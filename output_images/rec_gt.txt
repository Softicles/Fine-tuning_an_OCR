crop_img/assembly_hw_226_crop_0.jpg	left char R1
crop_img/assembly_hw_226_crop_1.jpg	right char
crop_img/assembly_hw_226_crop_2.jpg	bft Addr
crop_img/assembly_hw_226_crop_3.jpg	Right Addr
crop_img/assembly_hw_226_crop_4.jpg	Stol when bft ≥ right
crop_img/assembly_hw_226_crop_5.jpg	 Find Minimum Index :
crop_img/assembly_hw_226_crop_6.jpg	(initially (s8)
crop_img/assembly_hw_226_crop_7.jpg	ptg to min element: Ro
crop_img/assembly_hw_226_crop_8.jpg	min dement s value : R1
crop_img/assembly_hw_226_crop_9.jpg	th to each element : Ra
crop_img/assembly_hw_226_crop_10.jpg	6
crop_img/assembly_hw_226_crop_11.jpg	1
crop_img/assembly_hw_226_crop_12.jpg	乙
crop_img/assembly_hw_226_crop_13.jpg	3
crop_img/assembly_hw_226_crop_14.jpg	4
crop_img/assembly_hw_226_crop_15.jpg	each elements value : R 3
crop_img/assembly_hw_226_crop_16.jpg	-addr of final clement R4
crop_img/assembly_hw_226_crop_17.jpg	b
crop_img/assembly_hw_226_crop_18.jpg	a
crop_img/assembly_hw_226_crop_19.jpg	) caesar cipher ;
crop_img/assembly_hw_226_crop_20.jpg	mod-retwrn
crop_img/assembly_hw_226_crop_21.jpg	string
crop_img/assembly_hw_226_crop_22.jpg	calsar:
crop_img/assembly_hw_226_crop_23.jpg	Shift
crop_img/assembly_hw_226_crop_24.jpg	find leng th
crop_img/assembly_hw_226_crop_25.jpg	get arguments for mod and mod-return
crop_img/assembly_hw_226_crop_26.jpg	(push a) push b)
crop_img/assembly_hw_226_crop_27.jpg	mod :
crop_img/assembly_hw_226_crop_28.jpg	。
crop_img/assembly_hw_226_crop_29.jpg	R4：=a （pop)
crop_img/assembly_hw_227_crop_0.jpg	negate stop-addr
crop_img/assembly_hw_227_crop_1.jpg	if(
crop_img/assembly_hw_227_crop_2.jpg	R4+R5
crop_img/assembly_hw_227_crop_3.jpg	HALT
crop_img/assembly_hw_227_crop_4.jpg	while R2+Ra !=0
crop_img/assembly_hw_227_crop_5.jpg	rer tote u
crop_img/assembly_hw_227_crop_6.jpg	LDR R2，R3,#0
crop_img/assembly_hw_227_crop_7.jpg	R1+
crop_img/assembly_hw_227_crop_8.jpg	R34
crop_img/assembly_hw_227_crop_9.jpg	R2=0
crop_img/assembly_hw_227_crop_10.jpg	STR RB,R2
crop_img/assembly_hw_227_crop_11.jpg	JML RU
crop_img/assembly_hw_227_crop_12.jpg	-R3
crop_img/assembly_hw_227_crop_13.jpg	-R4
crop_img/assembly_hw_227_crop_14.jpg	.) merge sort
crop_img/assembly_hw_227_crop_15.jpg	MERGESORT[ar, buf, rt, end)
crop_img/avl_hw_179_crop_0.jpg	.)add():
crop_img/avl_hw_179_crop_1.jpg	P
crop_img/avl_hw_179_crop_2.jpg	6
crop_img/avl_hw_179_crop_3.jpg	①
crop_img/avl_hw_179_crop_4.jpg	BST. Add ( )
crop_img/avl_hw_179_crop_5.jpg	2
crop_img/avl_hw_179_crop_6.jpg	Update huight ( from newly add node→ qroot)
crop_img/avl_hw_179_crop_7.jpg	③
crop_img/avl_hw_179_crop_8.jpg	Update BF
crop_img/avl_hw_179_crop_9.jpg	④
crop_img/avl_hw_179_crop_10.jpg	Fix unbalanad node
crop_img/avl_hw_179_crop_11.jpg	Fix un balanced node
crop_img/avl_hw_179_crop_12.jpg	a.getBF（）=2&&a.getleft（).getBF(）=1:
crop_img/avl_hw_179_crop_13.jpg	B
crop_img/avl_hw_179_crop_14.jpg	A
crop_img/avl_hw_179_crop_15.jpg	notR
crop_img/avl_hw_179_crop_16.jpg	A
crop_img/avl_hw_179_crop_17.jpg	β
crop_img/avl_hw_179_crop_18.jpg	0
crop_img/avl_hw_179_crop_19.jpg	4
crop_img/avl_hw_179_crop_20.jpg	4
crop_img/avl_hw_179_crop_21.jpg	C
crop_img/avl_hw_179_crop_22.jpg	2
crop_img/avl_hw_179_crop_23.jpg	S
crop_img/avl_hw_179_crop_24.jpg	2
crop_img/avl_hw_179_crop_25.jpg	o
crop_img/avl_hw_179_crop_26.jpg	oT
crop_img/avl_hw_179_crop_27.jpg	ig urr.get BF(）=-a && loft child.got BF()=-1:
crop_img/avl_hw_179_crop_28.jpg	B
crop_img/avl_hw_179_crop_29.jpg	4
crop_img/avl_hw_179_crop_30.jpg	9ot L
crop_img/avl_hw_179_crop_31.jpg	O
crop_img/avl_hw_179_crop_32.jpg	C
crop_img/avl_hw_179_crop_33.jpg	B
crop_img/avl_hw_179_crop_34.jpg	A
crop_img/avl_hw_179_crop_35.jpg	→
crop_img/avl_hw_179_crop_36.jpg	4
crop_img/avl_hw_179_crop_37.jpg	0
crop_img/avl_hw_179_crop_38.jpg	6
crop_img/avl_hw_179_crop_39.jpg	8
crop_img/avl_hw_179_crop_40.jpg	3
crop_img/avl_hw_179_crop_41.jpg	6
crop_img/avl_hw_179_crop_42.jpg	0
crop_img/avl_hw_179_crop_43.jpg	3
crop_img/avl_hw_179_crop_44.jpg	4
crop_img/c_programming_hw_review_217_crop_0.jpg	HW7,lart(lhactice dynamic memory allocation)
crop_img/c_programming_hw_review_217_crop_1.jpg	) logic oron in ik name-unique ():
crop_img/c_programming_hw_review_217_crop_2.jpg	.while(my-stncmp(*(player+count))→name,name)
crop_img/c_programming_hw_review_217_crop_3.jpg	&& count < num-playor){
crop_img/c_programming_hw_review_217_crop_4.jpg	count +;
crop_img/c_programming_hw_review_217_crop_5.jpg	3
crop_img/c_programming_hw_review_217_crop_6.jpg	At the lart playeif my-tnmptuncount ile
crop_img/c_programming_hw_review_217_crop_7.jpg	be out of bound , which will ma ke my -ht rncmp () crarhes
crop_img/c_programming_hw_review_217_crop_8.jpg	at the next iteration
crop_img/c_programming_hw_review_217_crop_9.jpg	 Cannot fruel) on reallocate () const pta
crop_img/c_programming_hw_review_217_crop_10.jpg	) cannot initialite a pta with i 
crop_img/c_programming_hw_review_217_crop_11.jpg	) lrocerr to wre realloc ():
crop_img/c_programming_hw_review_217_crop_12.jpg	① Modigy the original pto → corhect veion (not efficient
crop_img/c_programming_hw_review_217_crop_13.jpg	fon mamory but will be dealt with usiny realloc () lator)
crop_img/c_programming_hw_review_217_crop_14.jpg	healloc () to new location with efficient stosage in termn of
crop_img/c_programming_hw_review_217_crop_15.jpg	2
crop_img/c_programming_hw_review_217_crop_16.jpg	memoay
crop_img/c_programming_hw_review_217_crop_17.jpg	)
crop_img/c_programming_hw_review_217_crop_18.jpg	add-to-addn-list:
crop_img/c_programming_hw_review_217_crop_19.jpg	. When add to front, re avsign head using
crop_img/c_programming_hw_review_217_crop_20.jpg	addn-list = block
crop_img/c_programming_hw_review_217_crop_21.jpg	seen as
crop_img/c_programming_hw_review_217_crop_22.jpg	head
crop_img/computer_organization_exam_note_7_crop_0.jpg	1's complement : Poritive nums → Same a 2's complment
crop_img/computer_organization_exam_note_7_crop_1.jpg	Negative numsy → Flip all bitx
crop_img/computer_organization_exam_note_7_crop_2.jpg	n-bit 1'xcomf covo：-(2-1),2-1]
crop_img/computer_organization_exam_note_7_crop_3.jpg	ovaflow
crop_img/computer_organization_exam_note_7_crop_4.jpg	.Fo signed mgitude:it i a c ou of th aigit
crop_img/computer_organization_exam_note_7_crop_5.jpg	. For a's comp : a sum too large becomer negative
crop_img/computer_organization_exam_note_7_crop_6.jpg	a sum too &mall
crop_img/computer_organization_exam_note_7_crop_7.jpg	positive
crop_img/computer_organization_exam_note_7_crop_8.jpg	 Fractiondy Binary Number :
crop_img/computer_organization_exam_note_7_crop_9.jpg	￥-1
crop_img/computer_organization_exam_note_7_crop_10.jpg	1.M:Ex：1.0101=12°+0*a2+1a1+0*2+12
crop_img/computer_organization_exam_note_7_crop_11.jpg	*
crop_img/computer_organization_exam_note_7_crop_12.jpg	-4
crop_img/computer_organization_exam_note_7_crop_13.jpg	Man tisa (M)
crop_img/computer_organization_exam_note_7_crop_14.jpg	IEEE-t54: Expand the range of 1.M) wse 32 litN
crop_img/computer_organization_exam_note_7_crop_15.jpg	E-127
crop_img/computer_organization_exam_note_7_crop_16.jpg	. Rull:(-1)
crop_img/computer_organization_exam_note_7_crop_17.jpg	*
crop_img/computer_organization_exam_note_7_crop_18.jpg	*
crop_img/computer_organization_exam_note_7_crop_19.jpg	1.M
crop_img/computer_organization_exam_note_7_crop_20.jpg	8bits
crop_img/computer_organization_exam_note_7_crop_21.jpg	23 bitx
crop_img/computer_organization_exam_note_7_crop_22.jpg	1 bit
crop_img/computer_organization_exam_note_7_crop_23.jpg	. Drawbacks : big value sacrifier pricirion because big value
crop_img/computer_organization_exam_note_7_crop_24.jpg	meany E large → shif ting the floating point to the right
crop_img/computer_organization_exam_note_7_crop_25.jpg	comparing d Ff nums:
crop_img/computer_organization_exam_note_7_crop_26.jpg	. Lositive > Negative
crop_img/computer_organization_exam_note_7_crop_27.jpg	If both por tive  compare from left →right,which has
crop_img/computer_organization_exam_note_7_crop_28.jpg	larger bito finut is larger
crop_img/computer_organization_exam_note_7_crop_29.jpg	. If both negative ,
crop_img/computer_organization_exam_note_7_crop_30.jpg	maller
crop_img/computer_organization_exam_note_8_crop_0.jpg	) Bitwise operatog:
crop_img/computer_organization_exam_note_8_crop_1.jpg	.AND: ANo every bit bet ween A and B，denoted als A & B
crop_img/computer_organization_exam_note_8_crop_2.jpg	.oR : oR every bit bet ween A and B,denoted as AlB
crop_img/computer_organization_exam_note_8_crop_3.jpg	.NoT : Flip every bit og A, denoted ar ~A or A(not for computer)
crop_img/computer_organization_exam_note_8_crop_4.jpg	. XOR :XOR
crop_img/computer_organization_exam_note_8_crop_5.jpg	between A and B , denoted vs Aβ
crop_img/computer_organization_exam_note_8_crop_6.jpg	.NAND : A NANO B is denoted a ~(A &B)
crop_img/computer_organization_exam_note_8_crop_7.jpg	. NOR : A NoR B is denoted as ~(AlB)
crop_img/computer_organization_exam_note_8_crop_8.jpg	left shift : shift all bits of A to the left bl decimal) placer)
crop_img/computer_organization_exam_note_8_crop_9.jpg	the gap created filled by O) denoted as A 《B
crop_img/computer_organization_exam_note_8_crop_10.jpg	. Rightshift: shift all bitx of A to the right B
crop_img/computer_organization_exam_note_8_crop_11.jpg	the gap created filled by the bading digit,denoted ar A>B
crop_img/computer_organization_exam_note_8_crop_12.jpg	 Manipulating bit using bool funcs:
crop_img/computer_organization_exam_note_8_crop_13.jpg	. CLEAR : teho out a bit→ wre ANo with o at the same place
crop_img/computer_organization_exam_note_8_crop_14.jpg	. SET : make a bit become → use or with 1
crop_img/computer_organization_exam_note_8_crop_15.jpg	.ToGGLE: flip a bit→ use XoR with 1
crop_img/computer_organization_exam_note_8_crop_16.jpg	m
crop_img/computer_organization_exam_note_8_crop_17.jpg	AscII: Binary can be used to repre char, by assign a char with
crop_img/computer_organization_exam_note_8_crop_18.jpg	a binary num
crop_img/computer_organization_exam_note_8_crop_19.jpg	uppercase → loworcare : SET bit 5
crop_img/computer_organization_exam_note_8_crop_20.jpg	lowercase → uppercasse : cLEAR bit 5
crop_img/computer_organization_exam_note_8_crop_21.jpg	) Thansi tor: the bit wise operatous can be encoded by circuits) by
crop_img/computer_organization_exam_note_8_crop_22.jpg	using tran siton
crop_img/computer_organization_exam_note_9_crop_0.jpg	1→A
crop_img/computer_organization_exam_note_9_crop_1.jpg	0→B
crop_img/computer_organization_exam_note_9_crop_2.jpg	.
crop_img/computer_organization_exam_note_9_crop_3.jpg	. NANO gate:
crop_img/computer_organization_exam_note_10_crop_0.jpg	1
crop_img/computer_organization_exam_note_10_crop_1.jpg	C→1
crop_img/computer_organization_exam_note_10_crop_2.jpg	B—↓
crop_img/computer_organization_exam_note_10_crop_3.jpg	1
crop_img/computer_organization_exam_note_10_crop_4.jpg	-
crop_img/computer_organization_exam_note_10_crop_5.jpg	1
crop_img/computer_organization_exam_note_10_crop_6.jpg	1
crop_img/computer_organization_exam_note_10_crop_7.jpg	1
crop_img/computer_organization_exam_note_10_crop_8.jpg	1
crop_img/computer_organization_exam_note_10_crop_9.jpg	1
crop_img/computer_organization_exam_note_10_crop_10.jpg	1
crop_img/computer_organization_exam_note_10_crop_11.jpg	1
crop_img/computer_organization_exam_note_10_crop_12.jpg	NAND
crop_img/computer_organization_exam_note_10_crop_13.jpg	Note : Don't connect, N-type
crop_img/computer_organization_exam_note_10_crop_14.jpg	thansiton to powor
crop_img/computer_organization_exam_note_10_crop_15.jpg	ll-type
crop_img/computer_organization_exam_note_10_crop_16.jpg	ground
crop_img/computer_organization_exam_note_10_crop_17.jpg	Because there will be floating voltage acron the thansitor
crop_img/computer_organization_exam_note_10_crop_18.jpg	)Combinational logic cincuit s: output depends only on the inputs
crop_img/computer_organization_exam_note_10_crop_19.jpg	. Decodor: Output has one bit I and the nest are o repre the chosen
crop_img/computer_organization_exam_note_10_crop_20.jpg	combinatlon of value of the input bits
crop_img/computer_organization_exam_note_10_crop_21.jpg	. n-bit input
crop_img/computer_organization_exam_note_10_crop_22.jpg	. a- bit out put
crop_img/computer_organization_exam_note_10_crop_23.jpg	A
crop_img/computer_organization_exam_note_10_crop_24.jpg	B
crop_img/computer_organization_exam_note_10_crop_25.jpg	A
crop_img/computer_organization_exam_note_10_crop_26.jpg	B
crop_img/computer_organization_exam_note_10_crop_27.jpg	out put
crop_img/computer_organization_exam_note_10_crop_28.jpg	Inverter
crop_img/computer_organization_exam_note_10_crop_29.jpg	penote as:
crop_img/computer_organization_exam_note_10_crop_30.jpg	$Q_{}B
crop_img/computer_organization_exam_note_10_crop_31.jpg	$Q_{1}AB
crop_img/computer_organization_exam_note_10_crop_32.jpg	Binary Inputs
crop_img/computer_organization_exam_note_10_crop_33.jpg	AND Gates
crop_img/computer_organization_exam_note_10_crop_34.jpg	Input
crop_img/computer_organization_exam_note_10_crop_35.jpg	Q{2}B
crop_img/computer_organization_exam_note_10_crop_36.jpg	B
crop_img/computer_organization_exam_note_10_crop_37.jpg	Q_3}=  AB
crop_img/computer_organization_exam_note_10_crop_38.jpg	Data Lines
crop_img/computer_organization_exam_note_11_crop_0.jpg	• Mux : select one of the inputs to be the outpaut
crop_img/computer_organization_exam_note_11_crop_1.jpg	. n input lines ( inverteus)
crop_img/computer_organization_exam_note_11_crop_2.jpg	.2 inputys to choose which to output
crop_img/computer_organization_exam_note_11_crop_3.jpg	A
crop_img/computer_organization_exam_note_11_crop_4.jpg	B
crop_img/computer_organization_exam_note_11_crop_5.jpg	C。
crop_img/computer_organization_exam_note_11_crop_6.jpg	dinput lines
crop_img/computer_organization_exam_note_11_crop_7.jpg	Inverters
crop_img/computer_organization_exam_note_11_crop_8.jpg	penote ar:
crop_img/computer_organization_exam_note_11_crop_9.jpg	2
crop_img/computer_organization_exam_note_11_crop_10.jpg	S
crop_img/computer_organization_exam_note_11_crop_11.jpg	ybjieshou@easmoney.com
crop_img/computer_organization_exam_note_11_crop_12.jpg	a
crop_img/computer_organization_exam_note_11_crop_13.jpg	b
crop_img/computer_organization_exam_note_11_crop_14.jpg	"AND"gate
crop_img/computer_organization_exam_note_11_crop_15.jpg	0
crop_img/computer_organization_exam_note_11_crop_16.jpg	“OR"gate
crop_img/computer_organization_exam_note_11_crop_17.jpg	B
crop_img/computer_organization_exam_note_11_crop_18.jpg	O
crop_img/computer_organization_exam_note_11_crop_19.jpg	co
crop_img/computer_organization_exam_note_11_crop_20.jpg	D
crop_img/computer_organization_exam_note_11_crop_21.jpg	 One Bit Adder : for form A tB wheore A and B are 1-bit number
crop_img/computer_organization_exam_note_11_crop_22.jpg	· Three 1-bit inputs : A,B, and the catory -in
crop_img/computer_organization_exam_note_11_crop_23.jpg	.Two 1-bit outputs : ouput bit and the corry out
crop_img/computer_organization_exam_note_11_crop_24.jpg	Cwry in
crop_img/computer_organization_exam_note_11_crop_25.jpg	Denoted as:
crop_img/computer_organization_exam_note_11_crop_26.jpg	A
crop_img/computer_organization_exam_note_11_crop_27.jpg	out
crop_img/computer_organization_exam_note_11_crop_28.jpg	B
crop_img/computer_organization_exam_note_11_crop_29.jpg	S
crop_img/computer_organization_exam_note_11_crop_30.jpg	caory out
crop_img/computer_organization_exam_note_11_crop_31.jpg	日
crop_img/computer_organization_exam_note_11_crop_32.jpg	Cin
crop_img/computer_organization_exam_note_11_crop_33.jpg	Cout
crop_img/computer_organization_exam_note_11_crop_34.jpg	. N-bit adder : Combine N one-bit addorus, let the carry out
crop_img/computer_organization_exam_note_11_crop_35.jpg	of the previous place be the warory-in of the cutorent place
crop_img/computer_organization_exam_note_11_crop_36.jpg	 Boolean algebra : Some use ful equations
crop_img/computer_organization_exam_note_12_crop_0.jpg	A+ AB =A
crop_img/computer_organization_exam_note_12_crop_1.jpg	.A +AB=A+B
crop_img/computer_organization_exam_note_12_crop_2.jpg	.（A+B)(A+C)=A+BC
crop_img/computer_organization_exam_note_12_crop_3.jpg	) From Truth table to Circuit : choose the rows that has output 1
crop_img/computer_organization_exam_note_12_crop_4.jpg	. Each ANo gate rephe one row of the true tabl
crop_img/computer_organization_exam_note_12_crop_5.jpg	 oR all the out puts of the ANo gates
crop_img/computer_organization_exam_note_12_crop_6.jpg	)k-map : A neat way to ercode the Tauth Table
crop_img/computer_organization_exam_note_12_crop_7.jpg	. Valid grey code : One entity changes f rom one state to the next
crop_img/computer_organization_exam_note_12_crop_8.jpg	(even fnom the lart state to the Ist stage)
crop_img/computer_organization_exam_note_12_crop_9.jpg	. Gret the boobean exprevsion from k-map:
crop_img/computer_organization_exam_note_12_crop_10.jpg	① Group the is on the table in group of a (n en)
crop_img/computer_organization_exam_note_12_crop_11.jpg	2 Add the bookean exprs of all the groups together
crop_img/computer_organization_exam_note_12_crop_12.jpg	Note: “x is also counted as
crop_img/computer_organization_exam_note_12_crop_13.jpg	.) sequential logic airuuit: Output depends on bo th current input and
crop_img/computer_organization_exam_note_12_crop_14.jpg	tored elementss( in the past)
crop_img/computer_organization_exam_note_12_crop_15.jpg	) RIs Latch : When both R andS are 1, one changers doernt affect
crop_img/computer_organization_exam_note_12_crop_16.jpg	the out put
crop_img/computer_organization_exam_note_12_crop_17.jpg	It's pomible that when Rand s are boh I)
crop_img/computer_organization_exam_note_12_crop_18.jpg	R
crop_img/computer_organization_exam_note_12_crop_19.jpg	1
crop_img/computer_organization_exam_note_12_crop_20.jpg	0
crop_img/computer_organization_exam_note_12_crop_21.jpg	output ixU=1,D=0 0o9 U=0,0=1
crop_img/computer_organization_exam_note_12_crop_22.jpg	S
crop_img/computer_organization_exam_note_12_crop_23.jpg	1
crop_img/computer_organization_exam_note_13_crop_0.jpg	) Gated 0 Latch: When Enable =) D=1 ，output i8 a=1)Q=0
crop_img/computer_organization_exam_note_13_crop_1.jpg	Enable=l)D=0)output ix Q=0)Q=1
crop_img/computer_organization_exam_note_13_crop_2.jpg	When Enable =o, a and a keep their previous values des pite D
crop_img/computer_organization_exam_note_13_crop_3.jpg	changing
crop_img/computer_organization_exam_note_13_crop_4.jpg	D
crop_img/computer_organization_exam_note_13_crop_5.jpg	S
crop_img/computer_organization_exam_note_13_crop_6.jpg	Enable
crop_img/computer_organization_exam_note_13_crop_7.jpg	) Registoer: An array of Gated 0 Latches
crop_img/computer_organization_exam_note_13_crop_8.jpg	Leader-Folo wo Flip Flop: Allow the output to be controlled by cocees
crop_img/computer_organization_exam_note_13_crop_9.jpg	leader
crop_img/computer_organization_exam_note_13_crop_10.jpg	Follower
crop_img/computer_organization_exam_note_13_crop_11.jpg	D
crop_img/computer_organization_exam_note_13_crop_12.jpg	D
crop_img/computer_organization_exam_note_13_crop_13.jpg	Gated
crop_img/computer_organization_exam_note_13_crop_14.jpg	Gated
crop_img/computer_organization_exam_note_13_crop_15.jpg	WE
crop_img/computer_organization_exam_note_13_crop_16.jpg	0
crop_img/computer_organization_exam_note_13_crop_17.jpg	WE
crop_img/computer_organization_exam_note_13_crop_18.jpg	D
crop_img/computer_organization_exam_note_13_crop_19.jpg	>0
crop_img/computer_organization_exam_note_13_crop_20.jpg	Lat ch
crop_img/computer_organization_exam_note_13_crop_21.jpg	Latch
crop_img/computer_organization_exam_note_13_crop_22.jpg	)Triggering
crop_img/computer_organization_exam_note_13_crop_23.jpg	allowing the circuit to be adive, ie. it ean take in put
crop_img/computer_organization_exam_note_13_crop_24.jpg	个
crop_img/computer_organization_exam_note_13_crop_25.jpg	and give out put
crop_img/computer_organization_exam_note_13_crop_26.jpg	. level trigger: The cirit becomey active when the gating or dock
crop_img/computer_organization_exam_note_13_crop_27.jpg	pulse is on a partiaular level
crop_img/computer_organization_exam_note_13_crop_28.jpg	Edge taiggor : The circuit beco med dotive at negative or foritive
crop_img/computer_organization_exam_note_13_crop_29.jpg	edge of the clock rignal
crop_img/computer_organization_exam_note_13_crop_30.jpg	. Flip-flop is edge triggered
crop_img/computer_organization_exam_note_14_crop_0.jpg	 State machine : contool sy&tem with finite # &tater
crop_img/computer_organization_exam_note_14_crop_1.jpg	 How to maintain state? Memory
crop_img/computer_organization_exam_note_14_crop_2.jpg	• What state to go next the cirauit output depend & on the current
crop_img/computer_organization_exam_note_14_crop_3.jpg	&tate and cinrcuit input &
crop_img/computer_organization_exam_note_14_crop_4.jpg	 Moore machine: it output values are determined soely by its awrent
crop_img/computer_organization_exam_note_14_crop_5.jpg	state
crop_img/computer_organization_exam_note_14_crop_6.jpg	) Algorithm for creating state machine logic:
crop_img/computer_organization_exam_note_14_crop_7.jpg	① Label the stater
crop_img/computer_organization_exam_note_14_crop_8.jpg	Cuate the truth table from the &tate diag ram using all valus of
crop_img/computer_organization_exam_note_14_crop_9.jpg	2
crop_img/computer_organization_exam_note_14_crop_10.jpg	the input lines and arent-state liner
crop_img/computer_organization_exam_note_14_crop_11.jpg	③
crop_img/computer_organization_exam_note_14_crop_12.jpg	Waite a sum-of-produot boo lean equation for each output value
crop_img/computer_organization_exam_note_14_crop_13.jpg	(next state and output lines) from the truth table
crop_img/computer_organization_exam_note_14_crop_14.jpg	④ simplify the equations
crop_img/computer_organization_exam_note_14_crop_15.jpg	⑤
crop_img/computer_organization_exam_note_14_crop_16.jpg	Implement the equations with gater
crop_img/computer_organization_exam_note_14_crop_17.jpg	) Von Neumann Model :A fundamental model of a computer for procesing
crop_img/computer_organization_exam_note_14_crop_18.jpg	comp programs) consisting of :
crop_img/computer_organization_exam_note_14_crop_19.jpg	. Memory
crop_img/computer_organization_exam_note_14_crop_20.jpg	. A poro cering unit
crop_img/computer_organization_exam_note_14_crop_21.jpg	. Input
crop_img/computer_organization_exam_note_14_crop_22.jpg	output
crop_img/computer_organization_exam_note_15_crop_0.jpg	. A contool unit
crop_img/computer_organization_exam_note_15_crop_1.jpg	 Comp program: a set of ins tructionx,contained in memory
crop_img/computer_organization_exam_note_15_crop_2.jpg	. The data the program needs is ei thor in input or mem
crop_img/computer_organization_exam_note_15_crop_3.jpg	 A ddrers space : # distinet memory locations
crop_img/computer_organization_exam_note_15_crop_4.jpg	Addrribility: capacity of each location#bit each locatin can tore
crop_img/computer_organization_exam_note_15_crop_5.jpg	.) Reading f rom a mem lo cation:
crop_img/computer_organization_exam_note_15_crop_6.jpg	① Blace the addr of that location in the mem addr seg (MAR)
crop_img/computer_organization_exam_note_15_crop_7.jpg	The data in the location then put into mem data reg (MoR)
crop_img/computer_organization_exam_note_15_crop_8.jpg	2
crop_img/computer_organization_exam_note_15_crop_9.jpg	) writing to a mem location:
crop_img/computer_organization_exam_note_15_crop_10.jpg	1 llace the addr of that location into MAR
crop_img/computer_organization_exam_note_15_crop_11.jpg	2
crop_img/computer_organization_exam_note_15_crop_12.jpg	I lace the data to write into Mor
crop_img/computer_organization_exam_note_15_crop_13.jpg	Tuin on Write Enable signal (WE)
crop_img/computer_organization_exam_note_15_crop_14.jpg	3
crop_img/computer_organization_exam_note_15_crop_15.jpg	(GPR)
crop_img/computer_organization_exam_note_15_crop_16.jpg	)frosing Unit: ALu +8 general purpose register (Ro→ R7)
crop_img/computer_organization_exam_note_15_crop_17.jpg	 Input /out put:
crop_img/computer_organization_exam_note_15_crop_18.jpg	key board / monitor
crop_img/computer_organization_exam_note_15_crop_19.jpg	 Control Unit : keep track of both whure we ore in the procers of
crop_img/computer_organization_exam_note_15_crop_20.jpg	executing the program and executing each instruction
crop_img/computer_organization_exam_note_15_crop_21.jpg	Inst are pro cessed one at a time
crop_img/computer_organization_exam_note_16_crop_0.jpg	 program Countor (ec): Holdes the current progrem counter (addr of the
crop_img/computer_organization_exam_note_16_crop_1.jpg	next instquction)
crop_img/computer_organization_exam_note_16_crop_2.jpg	.3 ways to up date Lc:
crop_img/computer_organization_exam_note_16_crop_3.jpg	Griven a value fon the Ic via address adder
crop_img/computer_organization_exam_note_16_crop_4.jpg	. IC=PC+1
crop_img/computer_organization_exam_note_16_crop_5.jpg	. Given the valhne for the Ic via the bus
crop_img/computer_organization_exam_note_16_crop_6.jpg	) Instruction Register (Ir): holds the value of the arvrent inestruction
crop_img/computer_organization_exam_note_16_crop_7.jpg	on the pro ceronz
crop_img/computer_organization_exam_note_16_crop_8.jpg	) Instruction set: The Lc3 IsA instruction set has 15 instructions
crop_img/computer_organization_exam_note_16_crop_9.jpg	. Not 16 be cause one is heseroed for future use
crop_img/computer_organization_exam_note_16_crop_10.jpg	) oporand : An operand can be found in 3 places
crop_img/computer_organization_exam_note_16_crop_11.jpg	. fart of the instoruction → imme diate value
crop_img/computer_organization_exam_note_16_crop_12.jpg	. Registor
crop_img/computer_organization_exam_note_16_crop_13.jpg	Memory
crop_img/computer_organization_exam_note_16_crop_14.jpg	2) Addresing mode: A formula to calculate the addr of a mem location
crop_img/computer_organization_exam_note_16_crop_15.jpg	to be read / write
crop_img/computer_organization_exam_note_16_crop_16.jpg	V
crop_img/computer_organization_exam_note_16_crop_17.jpg	go in to see what in the mem loc
crop_img/computer_organization_exam_note_16_crop_18.jpg	 Base+off sot mode : let Ro =× 3ool be the base register
crop_img/computer_organization_exam_note_16_crop_19.jpg	offset=3
crop_img/computer_organization_exam_note_17_crop_0.jpg	(what inst is it !)
crop_img/computer_organization_exam_note_17_crop_1.jpg	0) Instruction;
crop_img/computer_organization_exam_note_17_crop_2.jpg	opcode
crop_img/computer_organization_exam_note_17_crop_3.jpg	+
crop_img/computer_organization_exam_note_17_crop_4.jpg	operands
crop_img/computer_organization_exam_note_17_crop_5.jpg	.3 kinds of inst:
crop_img/computer_organization_exam_note_17_crop_6.jpg	. oper ates : operate on data (AoO,AND,NoT)
crop_img/computer_organization_exam_note_17_crop_7.jpg	. Data Movement: move info from procersing unit to and from
crop_img/computer_organization_exam_note_17_crop_8.jpg	mem and to and from Ilo devies
crop_img/computer_organization_exam_note_17_crop_9.jpg	Control: Altering order of in structions (normally the inst
crop_img/computer_organization_exam_note_17_crop_10.jpg	in the next mem loc will be pro cesred)
crop_img/computer_organization_exam_note_17_crop_11.jpg	ADD：
crop_img/computer_organization_exam_note_17_crop_12.jpg	d &owrce operands
crop_img/computer_organization_exam_note_17_crop_13.jpg	+ I destination oporand
crop_img/computer_organization_exam_note_17_crop_14.jpg	≥1 of them
crop_img/computer_organization_exam_note_17_crop_15.jpg	GER
crop_img/computer_organization_exam_note_17_crop_16.jpg	ix stored
crop_img/computer_organization_exam_note_17_crop_17.jpg	in GlR
crop_img/computer_organization_exam_note_17_crop_18.jpg	.Note :3 bits to identify  GlR(from→7)
crop_img/computer_organization_exam_note_17_crop_19.jpg	.Ex： 0001|110|010|00110
crop_img/computer_organization_exam_note_17_crop_20.jpg	↓
crop_img/computer_organization_exam_note_17_crop_21.jpg	R6
crop_img/computer_organization_exam_note_17_crop_22.jpg	R6
crop_img/computer_organization_exam_note_17_crop_23.jpg	R2
crop_img/computer_organization_exam_note_17_crop_24.jpg	2rowl
crop_img/computer_organization_exam_note_17_crop_25.jpg	V
crop_img/computer_organization_exam_note_17_crop_26.jpg	operands taken
crop_img/computer_organization_exam_note_17_crop_27.jpg	dert operand
crop_img/computer_organization_exam_note_17_crop_28.jpg	from GER
crop_img/computer_organization_exam_note_17_crop_29.jpg	Do: Add Rd and R6 ) stone qesult to R6
crop_img/computer_organization_exam_note_17_crop_30.jpg	0001|110|010|1|00110
crop_img/computer_organization_exam_note_17_crop_31.jpg	↓
crop_img/computer_organization_exam_note_17_crop_32.jpg	immediate
crop_img/computer_organization_exam_note_17_crop_33.jpg	R2
crop_img/computer_organization_exam_note_17_crop_34.jpg	R6
crop_img/computer_organization_exam_note_17_crop_35.jpg	1 o
crop_img/computer_organization_exam_note_17_crop_36.jpg	value6
crop_img/computer_organization_exam_note_17_crop_37.jpg	V
crop_img/computer_organization_exam_note_17_crop_38.jpg	operandss taken
crop_img/computer_organization_exam_note_17_crop_39.jpg	from GLR
crop_img/computer_organization_exam_note_17_crop_40.jpg	dest operand
crop_img/computer_organization_exam_note_17_crop_41.jpg	D。: Add R2 and 6 store re sult to R6
crop_img/computer_organization_exam_note_18_crop_0.jpg	Lo（load):go intoa mem locatin,read the value inthereandt
crop_img/computer_organization_exam_note_18_crop_1.jpg	it in one of the GPR
crop_img/computer_organization_exam_note_18_crop_2.jpg	Ex:
crop_img/computer_organization_exam_note_18_crop_3.jpg	00100 10011000 110
crop_img/computer_organization_exam_note_18_crop_4.jpg	Ra
crop_img/computer_organization_exam_note_18_crop_5.jpg	198
crop_img/computer_organization_exam_note_18_crop_6.jpg	↓
crop_img/computer_organization_exam_note_18_crop_7.jpg	V
crop_img/computer_organization_exam_note_18_crop_8.jpg	dest operand
crop_img/computer_organization_exam_note_18_crop_9.jpg	off sot, used addrevring
crop_img/computer_organization_exam_note_18_crop_10.jpg	mode
crop_img/computer_organization_exam_note_18_crop_11.jpg	of mem loc
crop_img/computer_organization_exam_note_18_crop_12.jpg	to read
crop_img/computer_organization_exam_note_18_crop_13.jpg	.) LEA ; load a GIR with an adde
crop_img/computer_organization_exam_note_18_crop_14.jpg	1110| 101
crop_img/computer_organization_exam_note_18_crop_15.jpg	Ex:
crop_img/computer_organization_exam_note_18_crop_16.jpg	111111101
crop_img/computer_organization_exam_note_18_crop_17.jpg	R5
crop_img/computer_organization_exam_note_18_crop_18.jpg	-3
crop_img/computer_organization_exam_note_18_crop_19.jpg	D{ :Storelc*+(-3)toR5
crop_img/computer_organization_exam_note_18_crop_20.jpg	*
crop_img/computer_organization_exam_note_18_crop_21.jpg	)Condition cods：There ar single-it eg Nthat reinivlly
crop_img/computer_organization_exam_note_18_crop_22.jpg	set each time one of the GeRy is written
crop_img/computer_organization_exam_note_18_crop_23.jpg	. 1o0: negative dat a written into GIR
crop_img/computer_organization_exam_note_18_crop_24.jpg	. 010 : tero
crop_img/computer_organization_exam_note_18_crop_25.jpg	data Wni tten into GeR
crop_img/computer_organization_exam_note_18_crop_26.jpg	. ool : pobi tive data Written into arR
crop_img/computer_organization_exam_note_18_crop_27.jpg	)Ins truction Cycle : 6 phares
crop_img/computer_organization_exam_note_18_crop_28.jpg	.Fetch:
crop_img/computer_organization_exam_note_18_crop_29.jpg	obtain the next inst from memory and loads it into Ik)
crop_img/computer_organization_exam_note_18_crop_30.jpg	in tement Ic
crop_img/computer_organization_exam_note_18_crop_31.jpg	Decode: 4-to-16 decoder,tahing in opcodeoutput the line od to
crop_img/computer_organization_exam_note_19_crop_0.jpg	that opcode
crop_img/computer_organization_exam_note_19_crop_1.jpg	. Evaluate addr : computer the addr of mem location that is needed for
crop_img/computer_organization_exam_note_19_crop_2.jpg	for the in&t
crop_img/computer_organization_exam_note_19_crop_3.jpg	. Fotch operandy: Loading MAR wl the addr calculated in Evaluated
crop_img/computer_organization_exam_note_19_crop_4.jpg	addr"
crop_img/computer_organization_exam_note_19_crop_5.jpg	Execute : porform the task
crop_img/computer_organization_exam_note_19_crop_6.jpg	Store result
crop_img/computer_organization_exam_note_19_crop_7.jpg	* Note: Not all inst use all 6 phasser
crop_img/computer_organization_exam_note_19_crop_8.jpg	) BR(branch);If(condition …)→ do this inst
crop_img/computer_organization_exam_note_19_crop_9.jpg	Format: 0O0o|n2P|loff
crop_img/computer_organization_exam_note_19_crop_10.jpg	Uxe fc-relative
crop_img/computer_organization_exam_note_19_crop_11.jpg	Po:
crop_img/computer_organization_exam_note_19_crop_12.jpg	If n/t/p=1 ,check the condition coder)if N/z/p=1)
crop_img/computer_organization_exam_note_19_crop_13.jpg	then set Ic to new addr
crop_img/computer_organization_exam_note_19_crop_14.jpg	Use bare +offAt
crop_img/computer_organization_exam_note_19_crop_15.jpg	√
crop_img/computer_organization_exam_note_19_crop_16.jpg	) JMs: change Pc* to data in the bare regis tor
crop_img/computer_organization_exam_note_19_crop_17.jpg	This helps reachiny mem location outside of offsetsnange
crop_img/computer_organization_exam_note_19_crop_18.jpg	Format:1100000|010|000000
crop_img/computer_organization_exam_note_19_crop_19.jpg	BaseR:
crop_img/computer_organization_exam_note_19_crop_20.jpg	offret=0
crop_img/computer_organization_exam_note_19_crop_21.jpg	R2
crop_img/computer_organization_exam_note_20_crop_0.jpg	) Assembly: a low level language
crop_img/computer_organization_exam_note_20_crop_1.jpg	) Instructions: Label
crop_img/computer_organization_exam_note_20_crop_2.jpg	Opcode operandy
crop_img/computer_organization_exam_note_20_crop_3.jpg	Commenty
crop_img/computer_organization_exam_note_20_crop_4.jpg	Optional
crop_img/computer_organization_exam_note_20_crop_5.jpg	Use name
crop_img/computer_organization_exam_note_20_crop_6.jpg	optlonal
crop_img/computer_organization_exam_note_20_crop_7.jpg	s.t ADD，LO
crop_img/computer_organization_exam_note_20_crop_8.jpg	) Labels : symbolic namer awrigned to the mem loc
crop_img/computer_organization_exam_note_20_crop_9.jpg	. A location can con tain an inkt /value
crop_img/computer_organization_exam_note_20_crop_10.jpg	) Asrem bler : translate program in Assembly → machine lanquage
crop_img/computer_organization_exam_note_20_crop_11.jpg	) Pseudo-Ops (Assembler irectivers): A mersage from programmer
crop_img/computer_organization_exam_note_20_crop_12.jpg	to the afrem bler to help it pro ces
crop_img/computer_organization_exam_note_20_crop_13.jpg	•.oRIG : tell the assenbler where in the mem to place the prog ram
crop_img/computer_organization_exam_note_20_crop_14.jpg	Ex:.ORIG × 3001
crop_img/computer_organization_exam_note_20_crop_15.jpg	•.FIll: sot aside the next loc in the prog ram and initielize it
crop_img/computer_organization_exam_note_20_crop_16.jpg	with a value/ label
crop_img/computer_organization_exam_note_20_crop_17.jpg	•.Blkw : set a side a # sequential mem locations
crop_img/computer_organization_exam_note_20_crop_18.jpg	NEXTBLKW 2
crop_img/computer_organization_exam_note_20_crop_19.jpg	Ex：
crop_img/computer_organization_exam_note_20_crop_20.jpg	•.STRiNGz: initialize a sequence of n + mem locs to sto4e n
crop_img/computer_organization_exam_note_20_crop_21.jpg	chars (last loc containr xooo o - end-of-string char)
crop_img/computer_organization_exam_note_20_crop_22.jpg	.ENO :
crop_img/computer_organization_exam_note_20_crop_23.jpg	end of program ) don't pro cers any after
crop_img/computer_organization_exam_note_21_crop_0.jpg	Assembly progres: The progres of sunning an Arsembly prog ram
crop_img/computer_organization_exam_note_21_crop_1.jpg	. 2 complete passe:
crop_img/computer_organization_exam_note_21_crop_2.jpg	① Identify the addrs apd to each &ym bolic labelt and store them
crop_img/computer_organization_exam_note_21_crop_3.jpg	to a table (symbol table)
crop_img/computer_organization_exam_note_21_crop_4.jpg	Translate Assem bly insts into machine language
crop_img/computer_organization_exam_note_21_crop_5.jpg	2
crop_img/computer_organization_exam_note_21_crop_6.jpg	) Sub routines: functions for Assembly
crop_img/computer_organization_exam_note_21_crop_7.jpg	) call/ Return mechanism: the user makes a call inst to code A, and
crop_img/computer_organization_exam_note_21_crop_8.jpg	aftor the comp erecute code A, it makes a return ins truetion to the
crop_img/computer_organization_exam_note_21_crop_9.jpg	next inst in the program
crop_img/computer_organization_exam_note_21_crop_10.jpg	. caller : the prog that coritains the call inst
crop_img/computer_organization_exam_note_21_crop_11.jpg	. callee : the function
crop_img/computer_organization_exam_note_21_crop_12.jpg	 JsR(R): loads Ic with the starting) addr of the subroutine) and load&
crop_img/computer_organization_exam_note_21_crop_13.jpg	R7 with the addr of the inst imme diately after the JsR(R) inst
crop_img/computer_organization_exam_note_21_crop_14.jpg	. JSR : uye PC-re lative addr mode
crop_img/computer_organization_exam_note_21_crop_15.jpg	Fogmat : opcode 11 l off&et 11
crop_img/computer_organization_exam_note_21_crop_16.jpg	. JSRR : use BaseR addr mode
crop_img/computer_organization_exam_note_21_crop_17.jpg	Format: Opcode o|oo Base Rooo oo0
crop_img/computer_organization_exam_note_21_crop_18.jpg	 callee Save : tihe sub routiner have to store the existed valuer into
crop_img/computer_organization_exam_note_21_crop_19.jpg	memory
crop_img/computer_organization_exam_note_21_crop_20.jpg	before overwriting them
crop_img/computer_organization_exam_note_21_crop_21.jpg	 caller save : the caller stores Rt into mem because it will be
crop_img/computer_organization_exam_note_21_crop_22.jpg	Overwritten by JSR(R)
crop_img/computer_organization_exam_note_22_crop_0.jpg	) Stack : last thing We stogred in a stack is the I st thing we remove
crop_img/computer_organization_exam_note_22_crop_1.jpg	from it
crop_img/computer_organization_exam_note_22_crop_2.jpg	. Usage for memory management: We can use stack to manage memory
crop_img/computer_organization_exam_note_22_crop_3.jpg	. R6 8torer the addr of the top stack → Stach Lointor
crop_img/computer_organization_exam_note_22_crop_4.jpg	.push (): store data in to memoary and decorement top = move top
crop_img/computer_organization_exam_note_22_crop_5.jpg	up one pol
crop_img/computer_organization_exam_note_22_crop_6.jpg	pop() : take the data at top poition out of stack by inorementing
crop_img/computer_organization_exam_note_22_crop_7.jpg	top 三 move top down one pox
crop_img/computer_organization_exam_note_22_crop_8.jpg	Frame lointer: A ptn used for
crop_img/computer_organization_exam_note_22_crop_9.jpg	R4
crop_img/computer_organization_exam_note_22_crop_10.jpg	←R6
crop_img/computer_organization_exam_note_22_crop_11.jpg	…
crop_img/computer_organization_exam_note_22_crop_12.jpg	 Accersing local vars from the stack
crop_img/computer_organization_exam_note_22_crop_13.jpg	Callee's
crop_img/computer_organization_exam_note_22_crop_14.jpg	Ro
crop_img/computer_organization_exam_note_22_crop_15.jpg	. Saving the return value
crop_img/computer_organization_exam_note_22_crop_16.jpg	duties
crop_img/computer_organization_exam_note_22_crop_17.jpg	loal var n
crop_img/computer_organization_exam_note_22_crop_18.jpg	：
crop_img/computer_organization_exam_note_22_crop_19.jpg	• Acersing arguments from the stack
crop_img/computer_organization_exam_note_22_crop_20.jpg	tocal var1
crop_img/computer_organization_exam_note_22_crop_21.jpg	R5
crop_img/computer_organization_exam_note_22_crop_22.jpg	Old R5
crop_img/computer_organization_exam_note_22_crop_23.jpg	(Frame
crop_img/computer_organization_exam_note_22_crop_24.jpg	R7
crop_img/computer_organization_exam_note_22_crop_25.jpg	Pointer)
crop_img/computer_organization_exam_note_22_crop_26.jpg	return val
crop_img/computer_organization_exam_note_22_crop_27.jpg	lst org
crop_img/computer_organization_exam_note_22_crop_28.jpg	Caller'k
crop_img/computer_organization_exam_note_22_crop_29.jpg	.
crop_img/computer_organization_exam_note_22_crop_30.jpg	dutier
crop_img/computer_organization_exam_note_22_crop_31.jpg	last arg
crop_img/computer_organization_exam_note_22_crop_32.jpg	) Memony - mapped Io: Ilo devices and memory share the same addr space
crop_img/computer_organization_exam_note_22_crop_33.jpg	)synch ro nows ( a things happen at the same time)
crop_img/computer_organization_exam_note_22_crop_34.jpg	. Data supplied at a fixed, predictable rate
crop_img/computer_organization_exam_note_22_crop_35.jpg	. ceu reads/writes evory × cycles (consistently check)
crop_img/computer_organization_exam_note_22_crop_36.jpg	) A&ynch ronous (a things dont happen at the same time)
crop_img/computer_organization_exam_note_22_crop_37.jpg	. Data rate un pre dictabl
crop_img/computer_organization_exam_note_22_crop_38.jpg	. clu must synchronize with device, so that it doeon't migs data
crop_img/computer_organization_exam_note_22_crop_39.jpg	on wruite too quickly (I/o device controls the interaction)
crop_img/computer_organization_exam_note_22_crop_40.jpg	 Note : We focus on aynchronouk I/0
crop_img/computer_organization_exam_note_23_crop_0.jpg	Data register: Uxed for actual trans for of data(eg.har)
crop_img/computer_organization_exam_note_23_crop_1.jpg	) Statws regis tor: What the device is telling the ceu
crop_img/computer_organization_exam_note_23_crop_2.jpg	) Control registor: Allow us to set change able device characteristic
crop_img/computer_organization_exam_note_23_crop_3.jpg	) Device registor: can be memory mapped or have special Ilo insts
crop_img/computer_organization_exam_note_23_crop_4.jpg	. We focus on memory mapped I10
crop_img/computer_organization_exam_note_23_crop_5.jpg	(KBSR)
crop_img/computer_organization_exam_note_23_crop_6.jpg	Keyboard status Reg (×FEoo):Bit 15 ix k when the kybod
crop_img/computer_organization_exam_note_23_crop_7.jpg	has received a new char
crop_img/computer_organization_exam_note_23_crop_8.jpg	(KBOR)
crop_img/computer_organization_exam_note_23_crop_9.jpg	keyboard Data Rg(e):it[7:oontain the last chartypd
crop_img/computer_organization_exam_note_23_crop_10.jpg	on the key board
crop_img/computer_organization_exam_note_23_crop_11.jpg	(OSR)
crop_img/computer_organization_exam_note_23_crop_12.jpg	Display Statws Reg (xFEo4): Bit 15 is set when device ready to
crop_img/computer_organization_exam_note_23_crop_13.jpg	display ano ther char on soren
crop_img/computer_organization_exam_note_23_crop_14.jpg	(00R)
crop_img/computer_organization_exam_note_23_crop_15.jpg	Display Data Reg (×FEo6): chor ritten on bits [7:o] will be
crop_img/computer_organization_exam_note_23_crop_16.jpg	dis played on suen
crop_img/computer_organization_exam_note_23_crop_17.jpg	) Input from keyboard: When a char is typed, kBoR and KBsR react
crop_img/computer_organization_exam_note_23_crop_18.jpg	and the keyboard ix di's abled. Af ter KBoR is read, KBsR [15] is cleared
crop_img/computer_organization_exam_note_23_crop_19.jpg	and keyboard is enable
crop_img/computer_organization_exam_note_23_crop_20.jpg	) output to monitor : When the mo nitor is ready to dis play, Dsr react.
crop_img/computer_organization_exam_note_23_crop_21.jpg	Aftor the char is written to DoR monitor disp lays the char and osR[15]
crop_img/computer_organization_exam_note_23_crop_22.jpg	ins de ared
crop_img/computer_organization_exam_note_23_crop_23.jpg	 furpose of os : sharing
crop_img/computer_organization_exam_note_23_crop_24.jpg	resources and psotecting user from themselver
crop_img/computer_organization_exam_note_24_crop_0.jpg	and othens
crop_img/computer_organization_exam_note_24_crop_1.jpg	) Interupt: An uns oripted subroutine call taiggered by an externel event
crop_img/computer_organization_exam_note_24_crop_2.jpg	Ex: Ilo device fepogts a comp letion  oor
crop_img/computer_organization_exam_note_24_crop_3.jpg	Typer of privilege :
crop_img/computer_organization_exam_note_24_crop_4.jpg	. Supervisog privilege (privileged):
crop_img/computer_organization_exam_note_24_crop_5.jpg	. Accew to all areas in mem and can execute all instructions
crop_img/computer_organization_exam_note_24_crop_6.jpg	. Usually data structures or programs that are part of the
crop_img/computer_organization_exam_note_24_crop_7.jpg	operating system
crop_img/computer_organization_exam_note_24_crop_8.jpg	.User pri vileqe ( un privileged):
crop_img/computer_organization_exam_note_24_crop_9.jpg	. Access to some areas in mem and can execute tome insty
crop_img/computer_organization_exam_note_24_crop_10.jpg	 frocessog State: represented by 3 items
crop_img/computer_organization_exam_note_24_crop_11.jpg	①
crop_img/computer_organization_exam_note_24_crop_12.jpg	froceor Status Reg: frivilege [15],prioaity level [1o:83, Cond tion
crop_img/computer_organization_exam_note_24_crop_13.jpg	code [2.0]
crop_img/computer_organization_exam_note_24_crop_14.jpg	. Doesn't really exist ) the format is pushed to &tack
crop_img/computer_organization_exam_note_24_crop_15.jpg	frivilege = I: Un privileged
crop_img/computer_organization_exam_note_24_crop_16.jpg	=0 : Irivibeged
crop_img/computer_organization_exam_note_24_crop_17.jpg	2
crop_img/computer_organization_exam_note_24_crop_18.jpg	frogram counter
crop_img/computer_organization_exam_note_24_crop_19.jpg	3
crop_img/computer_organization_exam_note_24_crop_20.jpg	General regis ters
crop_img/computer_organization_exam_note_24_crop_21.jpg	) Raise Interuption : De vice Status heg set its bit 1 to raise an interupt
crop_img/computer_organization_exam_note_24_crop_22.jpg	signal
crop_img/computer_organization_note_116_crop_0.jpg	) signed magnitude: The ist bit represents the sign
crop_img/computer_organization_note_116_crop_1.jpg	，人：
crop_img/computer_organization_note_116_crop_2.jpg	一
crop_img/computer_organization_note_116_crop_3.jpg	.0： +
crop_img/computer_organization_note_116_crop_4.jpg	Ex:1→3
crop_img/computer_organization_note_116_crop_5.jpg	11→-3
crop_img/computer_organization_note_116_crop_6.jpg	n-1
crop_img/computer_organization_note_116_crop_7.jpg	n-1
crop_img/computer_organization_note_116_crop_8.jpg	frobmatic becaue aditiontraction ar don dffently
crop_img/computer_organization_note_116_crop_9.jpg	n- n-
crop_img/computer_organization_note_116_crop_10.jpg	) Two compbement : n bity covo [-a ,2-1]
crop_img/computer_organization_note_116_crop_11.jpg	Ex: 3 bits repre int E [-4,3
crop_img/computer_organization_note_116_crop_12.jpg	negative int is lt
crop_img/computer_organization_note_116_crop_13.jpg	100 100 10 1 000 001 010 01
crop_img/computer_organization_note_116_crop_14.jpg	bit is sill d!
crop_img/computer_organization_note_116_crop_15.jpg	→
crop_img/computer_organization_note_116_crop_16.jpg	-4-3-2-10123
crop_img/computer_organization_note_116_crop_17.jpg	4567
crop_img/computer_organization_note_116_crop_18.jpg	Additioiimgiuttlrtbtthe
crop_img/computer_organization_note_116_crop_19.jpg	into sign and the rust to decimal
crop_img/computer_organization_note_116_crop_20.jpg	O1O
crop_img/computer_organization_note_116_crop_21.jpg	001
crop_img/computer_organization_note_116_crop_22.jpg	1
crop_img/computer_organization_note_116_crop_23.jpg	d
crop_img/computer_organization_note_116_crop_24.jpg	+
crop_img/computer_organization_note_116_crop_25.jpg	+
crop_img/computer_organization_note_116_crop_26.jpg	+
crop_img/computer_organization_note_116_crop_27.jpg	+
crop_img/computer_organization_note_116_crop_28.jpg	101
crop_img/computer_organization_note_116_crop_29.jpg	11
crop_img/computer_organization_note_116_crop_30.jpg	-3
crop_img/computer_organization_note_116_crop_31.jpg	1
crop_img/computer_organization_note_116_crop_32.jpg	o0l
crop_img/computer_organization_note_116_crop_33.jpg	110
crop_img/computer_organization_note_116_crop_34.jpg	2
crop_img/computer_organization_note_116_crop_35.jpg	1
crop_img/computer_organization_note_116_crop_36.jpg	• Addition in a-comy lement:
crop_img/computer_organization_note_116_crop_37.jpg	Add like normal
crop_img/computer_organization_note_116_crop_38.jpg	Ex :
crop_img/computer_organization_note_116_crop_39.jpg	0102
crop_img/computer_organization_note_116_crop_40.jpg	010
crop_img/computer_organization_note_116_crop_41.jpg	2
crop_img/computer_organization_note_116_crop_42.jpg	001
crop_img/computer_organization_note_116_crop_43.jpg	1
crop_img/computer_organization_note_116_crop_44.jpg	十
crop_img/computer_organization_note_116_crop_45.jpg	+
crop_img/computer_organization_note_116_crop_46.jpg	+
crop_img/computer_organization_note_116_crop_47.jpg	001
crop_img/computer_organization_note_116_crop_48.jpg	101
crop_img/computer_organization_note_116_crop_49.jpg	1
crop_img/computer_organization_note_116_crop_50.jpg	-3
crop_img/computer_organization_note_116_crop_51.jpg	1
crop_img/computer_organization_note_116_crop_52.jpg	-
crop_img/computer_organization_note_116_crop_53.jpg	011
crop_img/computer_organization_note_116_crop_54.jpg	3
crop_img/computer_organization_note_116_crop_55.jpg	111
crop_img/computer_organization_note_116_crop_56.jpg	-1
crop_img/computer_organization_note_116_crop_57.jpg	000
crop_img/computer_organization_note_116_crop_58.jpg	0
crop_img/computer_organization_note_116_crop_59.jpg	7
crop_img/computer_organization_note_116_crop_60.jpg	2
crop_img/computer_organization_note_116_crop_61.jpg	1
crop_img/computer_organization_note_116_crop_62.jpg	1
crop_img/computer_organization_note_116_crop_63.jpg	O
crop_img/computer_organization_note_116_crop_64.jpg	0
crop_img/computer_organization_note_116_crop_65.jpg	1
crop_img/computer_organization_note_116_crop_66.jpg	1
crop_img/computer_organization_note_116_crop_67.jpg	0
crop_img/computer_organization_note_116_crop_68.jpg	0
crop_img/computer_organization_note_116_crop_69.jpg	0
crop_img/computer_organization_note_116_crop_70.jpg	563
crop_img/computer_organization_note_116_crop_71.jpg	→
crop_img/computer_organization_note_116_crop_72.jpg	281
crop_img/computer_organization_note_116_crop_73.jpg	→140→70
crop_img/computer_organization_note_116_crop_74.jpg	35
crop_img/computer_organization_note_116_crop_75.jpg	17
crop_img/computer_organization_note_116_crop_76.jpg	→
crop_img/computer_organization_note_116_crop_77.jpg	8
crop_img/computer_organization_note_116_crop_78.jpg	→
crop_img/computer_organization_note_116_crop_79.jpg	4→a→
crop_img/computer_organization_note_116_crop_80.jpg	→
crop_img/computer_organization_note_116_crop_81.jpg	J
crop_img/computer_organization_note_117_crop_0.jpg	→ 563
crop_img/computer_organization_note_117_crop_1.jpg	=1000110011
crop_img/computer_organization_note_117_crop_2.jpg	10
crop_img/computer_organization_note_117_crop_3.jpg	2
crop_img/computer_organization_note_117_crop_4.jpg	.
crop_img/computer_organization_note_117_crop_5.jpg	43
crop_img/computer_organization_note_117_crop_6.jpg	101011
crop_img/computer_organization_note_117_crop_7.jpg	10
crop_img/computer_organization_note_117_crop_8.jpg	2
crop_img/computer_organization_note_117_crop_9.jpg	14
crop_img/computer_organization_note_117_crop_10.jpg	1110
crop_img/computer_organization_note_117_crop_11.jpg	二
crop_img/computer_organization_note_117_crop_12.jpg	10
crop_img/computer_organization_note_117_crop_13.jpg	2
crop_img/computer_organization_note_117_crop_14.jpg	101011
crop_img/computer_organization_note_117_crop_15.jpg	43
crop_img/computer_organization_note_117_crop_16.jpg	10
crop_img/computer_organization_note_117_crop_17.jpg	2
crop_img/computer_organization_note_117_crop_18.jpg	十
crop_img/computer_organization_note_117_crop_19.jpg	→
crop_img/computer_organization_note_117_crop_20.jpg	+
crop_img/computer_organization_note_117_crop_21.jpg	入4
crop_img/computer_organization_note_117_crop_22.jpg	001110
crop_img/computer_organization_note_117_crop_23.jpg	10
crop_img/computer_organization_note_117_crop_24.jpg	2
crop_img/computer_organization_note_117_crop_25.jpg	57
crop_img/computer_organization_note_117_crop_26.jpg	1o
crop_img/computer_organization_note_117_crop_27.jpg	| 1 f 00 1
crop_img/computer_organization_note_117_crop_28.jpg	32+.16 +8+0+0+1 =57
crop_img/computer_organization_note_117_crop_29.jpg	2
crop_img/computer_organization_note_117_crop_30.jpg	43
crop_img/computer_organization_note_117_crop_31.jpg	10
crop_img/computer_organization_note_117_crop_32.jpg	1
crop_img/computer_organization_note_117_crop_33.jpg	011
crop_img/computer_organization_note_117_crop_34.jpg	10
crop_img/computer_organization_note_117_crop_35.jpg	2
crop_img/computer_organization_note_117_crop_36.jpg	→
crop_img/computer_organization_note_117_crop_37.jpg	1410
crop_img/computer_organization_note_117_crop_38.jpg	①0l1
crop_img/computer_organization_note_117_crop_39.jpg	10
crop_img/computer_organization_note_117_crop_40.jpg	2
crop_img/computer_organization_note_117_crop_41.jpg	29
crop_img/computer_organization_note_117_crop_42.jpg	10
crop_img/computer_organization_note_117_crop_43.jpg	0 11101
crop_img/computer_organization_note_117_crop_44.jpg	16+ 8+4 + 0+ 1 = 2g
crop_img/computer_organization_note_117_crop_45.jpg	2
crop_img/computer_organization_note_117_crop_46.jpg	c
crop_img/computer_organization_note_117_crop_47.jpg	)How to convertngative int into -mpment:flip&inc
crop_img/computer_organization_note_117_crop_48.jpg	1416=
crop_img/computer_organization_note_117_crop_49.jpg	001u0
crop_img/computer_organization_note_117_crop_50.jpg	2
crop_img/computer_organization_note_117_crop_51.jpg	fip
crop_img/computer_organization_note_117_crop_52.jpg	-14。
crop_img/computer_organization_note_117_crop_53.jpg	110001+1=110010
crop_img/computer_organization_note_117_crop_54.jpg	=
crop_img/computer_organization_note_117_crop_55.jpg	2
crop_img/computer_organization_note_117_crop_56.jpg	2
crop_img/computer_organization_note_117_crop_57.jpg	α
crop_img/computer_organization_note_117_crop_58.jpg	2
crop_img/computer_organization_note_117_crop_59.jpg	inc
crop_img/computer_organization_note_117_crop_60.jpg	.Then e can perfom 43x-4 sing adition in a-C:
crop_img/computer_organization_note_117_crop_61.jpg	1ololl。
crop_img/computer_organization_note_117_crop_62.jpg	2
crop_img/computer_organization_note_117_crop_63.jpg	+
crop_img/computer_organization_note_117_crop_64.jpg	110010
crop_img/computer_organization_note_117_crop_65.jpg	d
crop_img/computer_organization_note_117_crop_66.jpg	101× 101
crop_img/computer_organization_note_117_crop_67.jpg	2
crop_img/computer_organization_note_117_crop_68.jpg	exduded
crop_img/computer_organization_note_117_crop_69.jpg	because the addition is ponitive
crop_img/computer_organization_note_118_crop_0.jpg	) overflow : Out of bit to repre numbers
crop_img/computer_organization_note_118_crop_1.jpg	 A dding a too big posi tive #
crop_img/computer_organization_note_118_crop_2.jpg	Amall ngative #
crop_img/computer_organization_note_118_crop_3.jpg	carryin
crop_img/computer_organization_note_118_crop_4.jpg	sign :
crop_img/computer_organization_note_118_crop_5.jpg	:. A arry in into a rign bit but no caray out
crop_img/computer_organization_note_118_crop_6.jpg	≠ carly out
crop_img/computer_organization_note_118_crop_7.jpg	A coty out of a Mign bit but no cwry in
crop_img/computer_organization_note_118_crop_8.jpg	 sign extenxion : To extend from m-bit → n-bit for -comp
crop_img/computer_organization_note_118_crop_9.jpg	.Fon pom tive int, add o in front
crop_img/computer_organization_note_118_crop_10.jpg	— ncgativa int, ad 
crop_img/computer_organization_note_118_crop_11.jpg	Fractionary Binary Number :
crop_img/computer_organization_note_118_crop_12.jpg	-2
crop_img/computer_organization_note_118_crop_13.jpg	-3
crop_img/computer_organization_note_118_crop_14.jpg	1.1010..=1 +1.2 +0.2+1.2+…
crop_img/computer_organization_note_118_crop_15.jpg	floating point num bers
crop_img/computer_organization_note_118_crop_16.jpg	E-127
crop_img/computer_organization_note_118_crop_17.jpg	·IEEE-754:
crop_img/computer_organization_note_118_crop_18.jpg	*
crop_img/computer_organization_note_118_crop_19.jpg	1.M *2
crop_img/computer_organization_note_118_crop_20.jpg	·18. sign - bit
crop_img/computer_organization_note_118_crop_21.jpg	→sign
crop_img/computer_organization_note_118_crop_22.jpg	may nitude sy
crop_img/computer_organization_note_118_crop_23.jpg	.E: exponent -8 bits
crop_img/computer_organization_note_118_crop_24.jpg	→(E-27)E[-127，129]
crop_img/computer_organization_note_118_crop_25.jpg	. M: mantixa -a3bitx
crop_img/computer_organization_note_118_crop_26.jpg	Draw backs : Big value
crop_img/computer_organization_note_118_crop_27.jpg	saci fices precision
crop_img/computer_organization_note_118_crop_28.jpg	.It is be cause bing value requires big E→ Mhifting the
crop_img/computer_organization_note_118_crop_29.jpg	floating point to the right
crop_img/computer_organization_note_119_crop_0.jpg	1
crop_img/computer_organization_note_119_crop_1.jpg	0
crop_img/computer_organization_note_119_crop_2.jpg	0
crop_img/computer_organization_note_119_crop_3.jpg	0
crop_img/computer_organization_note_119_crop_4.jpg	0
crop_img/computer_organization_note_119_crop_5.jpg	一
crop_img/computer_organization_note_119_crop_6.jpg	一
crop_img/computer_organization_note_119_crop_7.jpg	0
crop_img/computer_organization_note_119_crop_8.jpg	1
crop_img/computer_organization_note_119_crop_9.jpg	一
crop_img/computer_organization_note_119_crop_10.jpg	.OR
crop_img/computer_organization_note_119_crop_11.jpg	°NANO : NOT AND
crop_img/computer_organization_note_119_crop_12.jpg	. NOT
crop_img/computer_organization_note_119_crop_13.jpg	XOR:
crop_img/computer_organization_note_119_crop_14.jpg	A
crop_img/computer_organization_note_119_crop_15.jpg	B
crop_img/computer_organization_note_119_crop_16.jpg	A
crop_img/computer_organization_note_119_crop_17.jpg	XORB
crop_img/computer_organization_note_119_crop_18.jpg	0→0
crop_img/computer_organization_note_119_crop_19.jpg	0
crop_img/computer_organization_note_119_crop_20.jpg	0
crop_img/computer_organization_note_119_crop_21.jpg	。
crop_img/computer_organization_note_119_crop_22.jpg	1
crop_img/computer_organization_note_119_crop_23.jpg	一
crop_img/computer_organization_note_119_crop_24.jpg	0
crop_img/computer_organization_note_119_crop_25.jpg	一
crop_img/computer_organization_note_119_crop_26.jpg	一
crop_img/computer_organization_note_119_crop_27.jpg	)Given two
crop_img/computer_organization_note_119_crop_28.jpg	junctions
crop_img/computer_organization_note_120_crop_0.jpg	=7
crop_img/computer_organization_note_120_crop_1.jpg	α
crop_img/computer_organization_note_120_crop_2.jpg	二
crop_img/computer_organization_note_120_crop_3.jpg	trash
crop_img/computer_organization_note_120_crop_4.jpg	 Bit vect ons : packed 10 in to a vector
crop_img/computer_organization_note_120_crop_5.jpg	Ex：
crop_img/computer_organization_note_120_crop_6.jpg	v=
crop_img/computer_organization_note_120_crop_7.jpg	0b10101010
crop_img/computer_organization_note_120_crop_8.jpg	binary
crop_img/computer_organization_note_120_crop_9.jpg	v=0b 10000000
crop_img/computer_organization_note_120_crop_10.jpg	—
crop_img/computer_organization_note_120_crop_11.jpg	W=0=
crop_img/computer_organization_note_120_crop_12.jpg	00□00000
crop_img/computer_organization_note_120_crop_13.jpg	1111
crop_img/computer_organization_note_120_crop_14.jpg	⇒7
crop_img/computer_organization_note_120_crop_15.jpg	NW=
crop_img/computer_organization_note_121_crop_0.jpg	？
crop_img/computer_organization_note_121_crop_1.jpg	16
crop_img/computer_organization_note_121_crop_2.jpg	2
crop_img/computer_organization_note_121_crop_3.jpg	1
crop_img/computer_organization_note_121_crop_4.jpg	+
crop_img/computer_organization_note_121_crop_5.jpg	2
crop_img/computer_organization_note_121_crop_6.jpg	4
crop_img/computer_organization_note_121_crop_7.jpg	111
crop_img/computer_organization_note_121_crop_8.jpg	010
crop_img/computer_organization_note_121_crop_9.jpg	001
crop_img/computer_organization_note_121_crop_10.jpg	010
crop_img/computer_organization_note_121_crop_11.jpg	100
crop_img/computer_organization_note_121_crop_12.jpg	0111
crop_img/computer_organization_note_121_crop_13.jpg	0100
crop_img/computer_organization_note_121_crop_14.jpg	01010100
crop_img/computer_organization_note_121_crop_15.jpg	4
crop_img/computer_organization_note_121_crop_16.jpg	4
crop_img/computer_organization_note_121_crop_17.jpg	5
crop_img/computer_organization_note_121_crop_18.jpg	7
crop_img/computer_organization_note_121_crop_19.jpg	7454
crop_img/computer_organization_note_121_crop_20.jpg	16
crop_img/computer_organization_note_121_crop_21.jpg	.) AscII : Repre words/ numx/symbols with bits
crop_img/computer_organization_note_121_crop_22.jpg	upper case → lowercase : SET bit5
crop_img/computer_organization_note_121_crop_23.jpg	lowerease → upperecase  : CLEAR bit 5
crop_img/computer_organization_note_121_crop_24.jpg	65 536
crop_img/computer_organization_note_121_crop_25.jpg	. Tranyiton :
crop_img/computer_organization_note_121_crop_26.jpg	we want to under stand the be havior of transitor os
crop_img/computer_organization_note_121_crop_27.jpg	a kwitch
crop_img/computer_organization_note_122_crop_0.jpg	NoT Gate
crop_img/computer_organization_note_122_crop_1.jpg	2.9
crop_img/computer_organization_note_122_crop_2.jpg	O
crop_img/computer_organization_note_122_crop_3.jpg	A
crop_img/computer_organization_note_122_crop_4.jpg	→
crop_img/computer_organization_note_122_crop_5.jpg	1B
crop_img/computer_organization_note_122_crop_6.jpg	C
crop_img/computer_organization_note_124_crop_0.jpg	219
crop_img/computer_organization_note_124_crop_1.jpg	0
crop_img/computer_organization_note_124_crop_2.jpg	A
crop_img/computer_organization_note_124_crop_3.jpg	1
crop_img/computer_organization_note_124_crop_4.jpg	B
crop_img/computer_organization_note_124_crop_5.jpg	→ 1
crop_img/computer_organization_note_124_crop_6.jpg	C
crop_img/computer_organization_note_124_crop_7.jpg	7
crop_img/computer_organization_note_124_crop_8.jpg	(Not OR)
crop_img/computer_organization_note_124_crop_9.jpg	B
crop_img/computer_organization_note_124_crop_10.jpg	A
crop_img/computer_organization_note_124_crop_11.jpg	NoR
crop_img/computer_organization_note_124_crop_12.jpg	A
crop_img/computer_organization_note_124_crop_13.jpg	B
crop_img/computer_organization_note_124_crop_14.jpg	NOR
crop_img/computer_organization_note_124_crop_15.jpg	Gate
crop_img/computer_organization_note_124_crop_16.jpg	⇒
crop_img/computer_organization_note_124_crop_17.jpg	人
crop_img/computer_organization_note_124_crop_18.jpg	1
crop_img/computer_organization_note_124_crop_19.jpg	0
crop_img/computer_organization_note_124_crop_20.jpg	1 0
crop_img/computer_organization_note_124_crop_21.jpg	0
crop_img/computer_organization_note_124_crop_22.jpg	一
crop_img/computer_organization_note_124_crop_23.jpg	0
crop_img/computer_organization_note_124_crop_24.jpg	0 0
crop_img/computer_organization_note_124_crop_25.jpg	一
crop_img/computer_organization_note_124_crop_26.jpg	NOR
crop_img/computer_organization_note_124_crop_27.jpg	NOT(NOR)
crop_img/computer_organization_note_124_crop_28.jpg	NOT
crop_img/computer_organization_note_124_crop_29.jpg	=OR
crop_img/computer_organization_note_124_crop_30.jpg	A
crop_img/computer_organization_note_124_crop_31.jpg	B
crop_img/computer_organization_note_124_crop_32.jpg	C
crop_img/computer_organization_note_124_crop_33.jpg	D
crop_img/computer_organization_note_125_crop_0.jpg	NOT
crop_img/computer_organization_note_125_crop_1.jpg	1
crop_img/computer_organization_note_125_crop_2.jpg	1
crop_img/computer_organization_note_125_crop_3.jpg	1
crop_img/computer_organization_note_125_crop_4.jpg	1
crop_img/computer_organization_note_125_crop_5.jpg	1
crop_img/computer_organization_note_125_crop_6.jpg	→ AND
crop_img/computer_organization_note_125_crop_7.jpg	1
crop_img/computer_organization_note_125_crop_8.jpg	D
crop_img/computer_organization_note_125_crop_9.jpg	1
crop_img/computer_organization_note_125_crop_10.jpg	Gute
crop_img/computer_organization_note_125_crop_11.jpg	1
crop_img/computer_organization_note_125_crop_12.jpg	1
crop_img/computer_organization_note_125_crop_13.jpg	1
crop_img/computer_organization_note_125_crop_14.jpg	1
crop_img/computer_organization_note_125_crop_15.jpg	1
crop_img/computer_organization_note_125_crop_16.jpg	1
crop_img/computer_organization_note_125_crop_17.jpg	1
crop_img/computer_organization_note_125_crop_18.jpg	1
crop_img/computer_organization_note_125_crop_19.jpg	1
crop_img/computer_organization_note_125_crop_20.jpg	1
crop_img/computer_organization_note_125_crop_21.jpg	1
crop_img/computer_organization_note_125_crop_22.jpg	1
crop_img/computer_organization_note_125_crop_23.jpg	1
crop_img/computer_organization_note_125_crop_24.jpg	1
crop_img/computer_organization_note_125_crop_25.jpg	1
crop_img/computer_organization_note_125_crop_26.jpg	1
crop_img/computer_organization_note_125_crop_27.jpg	1
crop_img/computer_organization_note_125_crop_28.jpg	NAND
crop_img/computer_organization_note_125_crop_29.jpg	1
crop_img/computer_organization_note_125_crop_30.jpg	Note: Don't connect N-type thanxiton to power
crop_img/computer_organization_note_125_crop_31.jpg	be cause they
crop_img/computer_organization_note_125_crop_32.jpg	P-type
crop_img/computer_organization_note_125_crop_33.jpg	ground
crop_img/computer_organization_note_125_crop_34.jpg	will canse
crop_img/computer_organization_note_125_crop_35.jpg	floating vol tage acrous the thansitor
crop_img/computer_organization_note_125_crop_36.jpg	(CLC)
crop_img/computer_organization_note_125_crop_37.jpg	) Combinational Logic circutx : output depend s only on the inputs
crop_img/computer_organization_note_125_crop_38.jpg	. Decoder : The output has exacthy one I and the sest is
crop_img/computer_organization_note_125_crop_39.jpg	 n inputs
crop_img/computer_organization_note_125_crop_40.jpg	. a outputs
crop_img/computer_organization_note_125_crop_41.jpg	. Mux : select one of the inp uts and connect it to the out put
crop_img/computer_organization_note_125_crop_42.jpg	A
crop_img/computer_organization_note_125_crop_43.jpg	B
crop_img/computer_organization_note_125_crop_44.jpg	I input line
crop_img/computer_organization_note_125_crop_45.jpg	√
crop_img/computer_organization_note_125_crop_46.jpg	S
crop_img/computer_organization_note_125_crop_47.jpg	c (the same aos A onB
crop_img/computer_organization_note_125_crop_48.jpg	depends on s)
crop_img/computer_organization_note_126_crop_0.jpg	n inputr line
crop_img/computer_organization_note_126_crop_1.jpg	. 2 input s
crop_img/computer_organization_note_126_crop_2.jpg	. One Bit Adder : lorf orm At b
crop_img/computer_organization_note_126_crop_3.jpg	where A,b wre n-bits numbers
crop_img/computer_organization_note_126_crop_4.jpg	one bit /ürau't
crop_img/computer_organization_note_126_crop_5.jpg	.Input : 3 n-bitx num boux A,B) and 
crop_img/computer_organization_note_126_crop_6.jpg	corry
crop_img/computer_organization_note_126_crop_7.jpg	c^{'s$
crop_img/computer_organization_note_126_crop_8.jpg	output . an-bits
crop_img/computer_organization_note_126_crop_9.jpg	carry
crop_img/computer_organization_note_126_crop_10.jpg	result
crop_img/computer_organization_note_126_crop_11.jpg	to next
crop_img/computer_organization_note_126_crop_12.jpg	column
crop_img/computer_organization_note_126_crop_13.jpg	 cincuit Sim :
crop_img/computer_organization_note_126_crop_14.jpg	. Wine color:
crop_img/computer_organization_note_126_crop_15.jpg	. Dark green : wire with valne O
crop_img/computer_organization_note_126_crop_16.jpg	 Light green :
crop_img/computer_organization_note_126_crop_17.jpg	1
crop_img/computer_organization_note_126_crop_18.jpg	Blue
crop_img/computer_organization_note_126_crop_19.jpg	: uniti ali zed wine
crop_img/computer_organization_note_126_crop_20.jpg	V
crop_img/computer_organization_note_126_crop_21.jpg	Conneded to power is considered initiali zed
crop_img/computer_organization_note_126_crop_22.jpg	I tran : forallel
crop_img/computer_organization_note_126_crop_23.jpg	whose gesult's are
crop_img/computer_organization_note_126_crop_24.jpg	广
crop_img/computer_organization_note_126_crop_25.jpg	. Fon boolean circut√
crop_img/computer_organization_note_126_crop_26.jpg	three ls and one o
crop_img/computer_organization_note_126_crop_27.jpg	 N tran . sequential
crop_img/computer_organization_note_126_crop_28.jpg	I tran : sequential
crop_img/computer_organization_note_126_crop_29.jpg	) Symbols :
crop_img/computer_organization_note_126_crop_30.jpg	Ntran : par ullel
crop_img/computer_organization_note_126_crop_31.jpg	NOT
crop_img/computer_organization_note_126_crop_32.jpg	D0
crop_img/computer_organization_note_126_crop_33.jpg	——
crop_img/computer_organization_note_126_crop_34.jpg	——D
crop_img/computer_organization_note_126_crop_35.jpg	OR
crop_img/computer_organization_note_126_crop_36.jpg	ANO
crop_img/computer_organization_note_126_crop_37.jpg	NOR
crop_img/computer_organization_note_126_crop_38.jpg	—0
crop_img/computer_organization_note_126_crop_39.jpg	NANO
crop_img/computer_organization_note_126_crop_40.jpg	□
crop_img/computer_organization_note_127_crop_0.jpg	A +B
crop_img/computer_organization_note_127_crop_1.jpg	三AVB
crop_img/computer_organization_note_127_crop_2.jpg	A′
crop_img/computer_organization_note_127_crop_3.jpg	=7A
crop_img/computer_organization_note_127_crop_4.jpg	AB
crop_img/computer_organization_note_127_crop_5.jpg	三A∧B
crop_img/computer_organization_note_127_crop_6.jpg	 Boolean algebra:
crop_img/computer_organization_note_127_crop_7.jpg	Additive : A+B=B+A
crop_img/computer_organization_note_127_crop_8.jpg	. Mul tip licative : AB = BA
crop_img/computer_organization_note_127_crop_9.jpg	A(BC)=(AB)C
crop_img/computer_organization_note_127_crop_10.jpg	. Basic Identitius : . A +o=A
crop_img/computer_organization_note_127_crop_11.jpg	OA
crop_img/computer_organization_note_127_crop_12.jpg	=0
crop_img/computer_organization_note_127_crop_13.jpg	1A=A
crop_img/computer_organization_note_127_crop_14.jpg	A+1 =1
crop_img/computer_organization_note_127_crop_15.jpg	A+A=A
crop_img/computer_organization_note_127_crop_16.jpg	AA=A
crop_img/computer_organization_note_127_crop_17.jpg	A+A=1
crop_img/computer_organization_note_127_crop_18.jpg	AA=0
crop_img/computer_organization_note_127_crop_19.jpg	Uxeful equation : A + AB =A
crop_img/computer_organization_note_127_crop_20.jpg	A+AB=A +B
crop_img/computer_organization_note_127_crop_21.jpg	(A+B)(A+C)=A+BC
crop_img/computer_organization_note_127_crop_22.jpg	 Truth table to ciaicuit :
crop_img/computer_organization_note_127_crop_23.jpg	 Each Ano gate sepre one row of the true table
crop_img/computer_organization_note_127_crop_24.jpg	 Eade or gate repne one col of the toue table
crop_img/computer_organization_note_128_crop_0.jpg	可
crop_img/computer_organization_note_128_crop_1.jpg	k-map:
crop_img/computer_organization_note_128_crop_2.jpg	B
crop_img/computer_organization_note_128_crop_3.jpg	B
crop_img/computer_organization_note_128_crop_4.jpg	What is the
crop_img/computer_organization_note_128_crop_5.jpg	What is the
crop_img/computer_organization_note_128_crop_6.jpg	A'
crop_img/computer_organization_note_128_crop_7.jpg	output if both A
crop_img/computer_organization_note_128_crop_8.jpg	output if A is
crop_img/computer_organization_note_128_crop_9.jpg	and B are
crop_img/computer_organization_note_128_crop_10.jpg	false and B is
crop_img/computer_organization_note_128_crop_11.jpg	false?
crop_img/computer_organization_note_128_crop_12.jpg	true?
crop_img/computer_organization_note_128_crop_13.jpg	What is the
crop_img/computer_organization_note_128_crop_14.jpg	Ａ
crop_img/computer_organization_note_128_crop_15.jpg	What is the
crop_img/computer_organization_note_128_crop_16.jpg	output if A is
crop_img/computer_organization_note_128_crop_17.jpg	output if both A
crop_img/computer_organization_note_128_crop_18.jpg	true and B is
crop_img/computer_organization_note_128_crop_19.jpg	and B are true?
crop_img/computer_organization_note_128_crop_20.jpg	false?
crop_img/computer_organization_note_128_crop_21.jpg	.valid grycoe:on entityhage fomoe tetotnext
crop_img/computer_organization_note_128_crop_22.jpg	) Basic storage:
crop_img/computer_organization_note_128_crop_23.jpg	) R/S Latch:
crop_img/computer_organization_note_128_crop_24.jpg	1
crop_img/computer_organization_note_128_crop_25.jpg	"
crop_img/computer_organization_note_128_crop_26.jpg	.
crop_img/computer_organization_note_128_crop_27.jpg	.
crop_img/computer_organization_note_128_crop_28.jpg	0
crop_img/computer_organization_note_128_crop_29.jpg	U
crop_img/computer_organization_note_128_crop_30.jpg	R
crop_img/computer_organization_note_128_crop_31.jpg	1
crop_img/computer_organization_note_128_crop_32.jpg	①
crop_img/computer_organization_note_128_crop_33.jpg	S
crop_img/computer_organization_note_128_crop_34.jpg	1
crop_img/computer_organization_note_128_crop_35.jpg	.
crop_img/computer_organization_note_128_crop_36.jpg	(regordles of s)
crop_img/computer_organization_note_128_crop_37.jpg	R=1
crop_img/computer_organization_note_128_crop_38.jpg	→U=0)0=1
crop_img/computer_organization_note_128_crop_39.jpg	→ U= 1，0=0
crop_img/computer_organization_note_128_crop_40.jpg	_R)
crop_img/computer_organization_note_128_crop_41.jpg	S =1
crop_img/computer_organization_note_128_crop_42.jpg	→ Stable → The aircuit has memory
crop_img/computer_organization_note_129_crop_0.jpg	·
crop_img/computer_organization_note_129_crop_1.jpg	R =S = O → U= D = 
crop_img/computer_organization_note_129_crop_2.jpg	Not stable
crop_img/computer_organization_note_129_crop_3.jpg	If we want stable and don't want an input =1 all the time
crop_img/computer_organization_note_129_crop_4.jpg	→ ①-latch
crop_img/computer_organization_note_129_crop_5.jpg	 elock : conthol the pae the ci acuit dos thing
crop_img/computer_organization_note_129_crop_6.jpg	) State machine: conthol sys tem with a finite # stater
crop_img/computer_organization_note_129_crop_7.jpg	0
crop_img/computer_organization_note_129_crop_8.jpg	1
crop_img/computer_organization_note_129_crop_9.jpg	0
crop_img/computer_organization_note_129_crop_10.jpg	S
crop_img/computer_organization_note_129_crop_11.jpg	S1
crop_img/computer_organization_note_129_crop_12.jpg	0
crop_img/computer_organization_note_129_crop_13.jpg	 the st ate We gonna ended af ot is Nol 3
crop_img/computer_organization_note_129_crop_14.jpg	 Maintaining state ix memory
crop_img/computer_organization_note_129_crop_15.jpg	. Make sure we have mef ficient states for our machine
crop_img/computer_organization_note_129_crop_16.jpg	. Make swre at a rtate, the machine knows Whot stote to
crop_img/computer_organization_note_129_crop_17.jpg	go to next.
crop_img/computer_organization_note_129_crop_18.jpg	 Moone machine: output deter nined sey by avent state
crop_img/computer_organization_note_129_crop_19.jpg	.) one Hot: a method to encode state
crop_img/computer_organization_note_129_crop_20.jpg	oool→state 1
crop_img/computer_organization_note_129_crop_21.jpg	0010
crop_img/computer_organization_note_129_crop_22.jpg	a
crop_img/computer_organization_note_129_crop_23.jpg	0100
crop_img/computer_organization_note_129_crop_24.jpg	3
crop_img/computer_organization_note_129_crop_25.jpg	1000
crop_img/computer_organization_note_129_crop_26.jpg	4
crop_img/computer_organization_note_130_crop_0.jpg	84210
crop_img/computer_organization_note_130_crop_1.jpg	 Binary encoder :
crop_img/computer_organization_note_130_crop_2.jpg	ano ther method to encode state
crop_img/computer_organization_note_130_crop_3.jpg	)Reaeing s tate machine true tabe : loy atten fion to the stte bit
crop_img/computer_organization_note_130_crop_4.jpg	combination
crop_img/computer_organization_note_130_crop_5.jpg	. State
crop_img/computer_organization_note_130_crop_6.jpg	input bit x & nt ate bit
crop_img/computer_organization_note_130_crop_7.jpg	) VonNeumann Model :A funde mental model of a computer for proceiny comp
crop_img/computer_organization_note_130_crop_8.jpg	yogaamx, consisting of:
crop_img/computer_organization_note_130_crop_9.jpg	. Memo ry
crop_img/computer_organization_note_130_crop_10.jpg	A procling unit
crop_img/computer_organization_note_130_crop_11.jpg	Input
crop_img/computer_organization_note_130_crop_12.jpg	out put
crop_img/computer_organization_note_130_crop_13.jpg	0
crop_img/computer_organization_note_130_crop_14.jpg	A control unit
crop_img/computer_organization_note_130_crop_15.jpg	→ We ω
crop_img/computer_organization_note_130_crop_16.jpg	Comp pogram: st of intutioncontained i moy
crop_img/computer_organization_note_130_crop_17.jpg	,The data the program needs is either in input o mem
crop_img/computer_organization_note_130_crop_18.jpg	) Addrerribility & Addreer space:
crop_img/computer_organization_note_130_crop_19.jpg	• Addres space : dis tinet memory loctionk
crop_img/computer_organization_note_130_crop_20.jpg	• Addrevi bility: capability of lach locotion
crop_img/computer_organization_note_130_crop_21.jpg	) Reading from a nem location:
crop_img/computer_organization_note_131_crop_0.jpg	addrer ing ind
crop_img/computer_organization_note_131_crop_1.jpg	个
crop_img/computer_organization_note_131_crop_2.jpg	→ The info in the location then gut into mem data reg (MoR)
crop_img/computer_organization_note_131_crop_3.jpg	V
crop_img/computer_organization_note_131_crop_4.jpg	hold the lontent
crop_img/computer_organization_note_131_crop_5.jpg	) Writing to a mem location:
crop_img/computer_organization_note_131_crop_6.jpg	of a mem lo codion
crop_img/computer_organization_note_131_crop_7.jpg	. llace the addr
crop_img/computer_organization_note_131_crop_8.jpg	flace the volue need to write into Mor
crop_img/computer_organization_note_131_crop_9.jpg	A
crop_img/computer_organization_note_131_crop_10.jpg	. Turn on Write Enal b signal
crop_img/computer_organization_note_131_crop_11.jpg	GLR
crop_img/computer_organization_note_131_crop_12.jpg	) faocewing Unit : ALu + 8 general purpose
crop_img/computer_organization_note_131_crop_13.jpg	registers(Ro→R7)
crop_img/computer_organization_note_131_crop_14.jpg	) Input, Out put : keyfo ard/ moniton
crop_img/computer_organization_note_131_crop_15.jpg	) Control Unit : keep trackr of bo th whre we oe in the prour of
crop_img/computer_organization_note_131_crop_16.jpg	exe cuting the frog ram and executing each inotouction
crop_img/computer_organization_note_131_crop_17.jpg	 Instrution Provring: The computer rocerer one in toution at a
crop_img/computer_organization_note_131_crop_18.jpg	time
crop_img/computer_organization_note_131_crop_19.jpg	Instruction : opcode
crop_img/computer_organization_note_131_crop_20.jpg	+
crop_img/computer_organization_note_131_crop_21.jpg	operands
crop_img/computer_organization_note_131_crop_22.jpg	( what ins truction is it)
crop_img/computer_organization_note_131_crop_23.jpg	. 8 kindy of instructong :
crop_img/computer_organization_note_131_crop_24.jpg	.Oprates: oferate on data (ADD, AND, NoT)
crop_img/computer_organization_note_131_crop_25.jpg	. Data Movement : move info from procersing unit to and from
crop_img/computer_organization_note_131_crop_26.jpg	memory and to and from Ilo devices
crop_img/computer_organization_note_131_crop_27.jpg	Control:
crop_img/computer_organization_note_131_crop_28.jpg	Altoing
crop_img/computer_organization_note_131_crop_29.jpg	order of instouctions (normally the
crop_img/computer_organization_note_131_crop_30.jpg	instowetion in the nert mem lo cation vill be pro cesed)
crop_img/computer_organization_note_132_crop_0.jpg	ADd : 2 source operands + 1 des tination perand
crop_img/computer_organization_note_132_crop_1.jpg	stored in
crop_img/computer_organization_note_132_crop_2.jpg	gqwres≥1 orerand
crop_img/computer_organization_note_132_crop_3.jpg	Atoned in the proesing unit
crop_img/computer_organization_note_132_crop_4.jpg	the procering unit
crop_img/computer_organization_note_132_crop_5.jpg	Note: 3 bits is ruquired to identify
crop_img/computer_organization_note_132_crop_6.jpg	a register
crop_img/computer_organization_note_132_crop_7.jpg	1101010|100|110
crop_img/computer_organization_note_132_crop_8.jpg	Ex:
crop_img/computer_organization_note_132_crop_9.jpg	0001
crop_img/computer_organization_note_132_crop_10.jpg	opcode for
crop_img/computer_organization_note_132_crop_11.jpg	R6
crop_img/computer_organization_note_132_crop_12.jpg	R6
crop_img/computer_organization_note_132_crop_13.jpg	R2
crop_img/computer_organization_note_132_crop_14.jpg	add
crop_img/computer_organization_note_132_crop_15.jpg	↓
crop_img/computer_organization_note_132_crop_16.jpg	destination
crop_img/computer_organization_note_132_crop_17.jpg	oper and
crop_img/computer_organization_note_132_crop_18.jpg	content in ks
crop_img/computer_organization_note_132_crop_19.jpg	ay
crop_img/computer_organization_note_132_crop_20.jpg	Q
crop_img/computer_organization_note_132_crop_21.jpg	→
crop_img/computer_organization_note_132_crop_22.jpg	R6<“R2+RC
crop_img/computer_organization_note_132_crop_23.jpg	0001| 110010|①|00110
crop_img/computer_organization_note_132_crop_24.jpg	R6
crop_img/computer_organization_note_132_crop_25.jpg	R
crop_img/computer_organization_note_132_crop_26.jpg	6→ immediate
crop_img/computer_organization_note_132_crop_27.jpg	val
crop_img/computer_organization_note_132_crop_28.jpg	u
crop_img/computer_organization_note_132_crop_29.jpg	2
crop_img/computer_organization_note_132_crop_30.jpg	→R6≤R2+6
crop_img/computer_organization_note_132_crop_31.jpg	AND : Similar to AoD
crop_img/computer_organization_note_132_crop_32.jpg	) Addesing mode :A formala to abalate the addrer of a mem location to
crop_img/computer_organization_note_132_crop_33.jpg	be read
crop_img/computer_organization_note_132_crop_34.jpg	. LO (load):
crop_img/computer_organization_note_132_crop_35.jpg	go into a mem loc tion, read the vahue in thuu, and store
crop_img/computer_organization_note_132_crop_36.jpg	it in one of the registor
crop_img/computer_organization_note_132_crop_37.jpg	Ex:0010010011 0 00110
crop_img/computer_organization_note_132_crop_38.jpg	LO
crop_img/computer_organization_note_132_crop_39.jpg	Ra
crop_img/computer_organization_note_132_crop_40.jpg	8
crop_img/computer_organization_note_132_crop_41.jpg	dertination operand
crop_img/computer_organization_note_132_crop_42.jpg	operand wed to calc
crop_img/computer_organization_note_132_crop_43.jpg	the mem addh to read from
crop_img/computer_organization_note_132_crop_44.jpg	T (w/ sign extension)
crop_img/computer_organization_note_132_crop_45.jpg	.Use Ic -relative addrersingy moode : mem = [sc+ ffset]
crop_img/computer_organization_note_133_crop_0.jpg	)Instruction lyde : 6 pheses
crop_img/computer_organization_note_133_crop_1.jpg	Fetch : obtain the next instrution from memory and loads it into
crop_img/computer_organization_note_133_crop_2.jpg	the instruetion regis tor (IR). At the same time, increment Ic
crop_img/computer_organization_note_133_crop_3.jpg	Peode : 4-to-l6 decoder )taking in op code) output the line ourp to
crop_img/computer_organization_note_133_crop_4.jpg	that ofcode
crop_img/computer_organization_note_133_crop_5.jpg	Evaluete addrers : computes the addrers of mem location thot is aeeded
crop_img/computer_organization_note_133_crop_6.jpg	fon the instauction
crop_img/computer_organization_note_133_crop_7.jpg	Fetch Operands : loading MAr W/ the addr calmlated in "Evaluate
crop_img/computer_organization_note_133_crop_8.jpg	Addrevr"
crop_img/computer_organization_note_133_crop_9.jpg	Exe ate : excuting the instruction
crop_img/computer_organization_note_133_crop_10.jpg	a
crop_img/computer_organization_note_133_crop_11.jpg	Store result : Storing the rerilt
crop_img/computer_organization_note_133_crop_12.jpg	* Note : Not all instruction require G phaser
crop_img/computer_organization_note_133_crop_13.jpg	)GBR;
crop_img/computer_organization_note_133_crop_14.jpg	temporary storage location that can be acsed in a mingle dock
crop_img/computer_organization_note_133_crop_15.jpg	ayde Used by AoD, AND, NoT, LD,LDI, LDR
crop_img/computer_organization_note_133_crop_16.jpg	 Is truction set :The Lc-3 IsA ins truction set has 15 instructio ns (not
crop_img/computer_organization_note_133_crop_17.jpg	M sine the code lo in resorived for futave nud)
crop_img/computer_organization_note_133_crop_18.jpg	operand : An operand can be found in 3 plas
crop_img/computer_organization_note_133_crop_19.jpg	.I art of the ins truction → imme diate oporand
crop_img/computer_organization_note_133_crop_20.jpg	Registor
crop_img/computer_organization_note_133_crop_21.jpg	Memory
crop_img/computer_organization_note_134_crop_0.jpg	Thire are  addr modes : immedi ate) register, and 3 memotry addr
crop_img/computer_organization_note_134_crop_1.jpg	. Imme diate
crop_img/computer_organization_note_134_crop_2.jpg	Register
crop_img/computer_organization_note_134_crop_3.jpg	. fc-relative
crop_img/computer_organization_note_134_crop_4.jpg	Memory
crop_img/computer_organization_note_134_crop_5.jpg	. Indired
crop_img/computer_organization_note_134_crop_6.jpg	) Condition Codes : Thee are 3 singhe -bit reg N,2,I tat ore
crop_img/computer_organization_note_134_crop_7.jpg	individually set each time one of the 8 Gir is wriften:
crop_img/computer_organization_note_134_crop_8.jpg	3cres
crop_img/computer_organization_note_134_crop_9.jpg	100
crop_img/computer_organization_note_134_crop_10.jpg	010
crop_img/computer_organization_note_134_crop_11.jpg	001
crop_img/computer_organization_note_134_crop_12.jpg	· 1o0 : negat v data written into GeR
crop_img/computer_organization_note_134_crop_13.jpg	. 010 :200
crop_img/computer_organization_note_134_crop_14.jpg	·001 :ponitive
crop_img/computer_organization_note_134_crop_15.jpg	Load Effitivre Addr
crop_img/computer_organization_note_134_crop_16.jpg	) LEA instauction: load a GeR with an addres
crop_img/computer_organization_note_134_crop_17.jpg	Ex； A人0|101|11 1 11 1 01
crop_img/computer_organization_note_134_crop_18.jpg	LEA
crop_img/computer_organization_note_134_crop_19.jpg	R5
crop_img/computer_organization_note_134_crop_20.jpg	-3
crop_img/computer_organization_note_134_crop_21.jpg	*
crop_img/computer_organization_note_134_crop_22.jpg	→
crop_img/computer_organization_note_134_crop_23.jpg	LC+(-3)
crop_img/computer_organization_note_134_crop_24.jpg	R5≤
crop_img/computer_organization_note_134_crop_25.jpg	incmented
crop_img/computer_organization_note_134_crop_26.jpg	Lc
crop_img/computer_organization_note_134_crop_27.jpg	Load : the procers of moviny info from mem to a regixtor
crop_img/computer_organization_note_134_crop_28.jpg	 The info in mem is sill there
crop_img/computer_organization_note_134_crop_29.jpg	 Stone:
crop_img/computer_organization_note_134_crop_30.jpg	a regirter to memosy
crop_img/computer_organization_note_134_crop_31.jpg	.The inf o in bogister is still there
crop_img/computer_organization_note_135_crop_0.jpg	Format for load / store:
crop_img/computer_organization_note_135_crop_1.jpg	3 bit
crop_img/computer_organization_note_135_crop_2.jpg	4bit
crop_img/computer_organization_note_135_crop_3.jpg	opcode
crop_img/computer_organization_note_135_crop_4.jpg	DR o SR
crop_img/computer_organization_note_135_crop_5.jpg	Addr Gen bits
crop_img/computer_organization_note_135_crop_6.jpg	V
crop_img/computer_organization_note_135_crop_7.jpg	regis ter
crop_img/computer_organization_note_135_crop_8.jpg	dertination
crop_img/computer_organization_note_135_crop_9.jpg	register
crop_img/computer_organization_note_135_crop_10.jpg	whone vabe will be
crop_img/computer_organization_note_135_crop_11.jpg	Asto ged in mem
crop_img/computer_organization_note_135_crop_12.jpg	 LOAD
crop_img/computer_organization_note_135_crop_13.jpg	→) STORE
crop_img/computer_organization_note_135_crop_14.jpg	8bit
crop_img/computer_organization_note_135_crop_15.jpg	ec* +offset
crop_img/computer_organization_note_135_crop_16.jpg	)lc-relative : mem
crop_img/computer_organization_note_135_crop_17.jpg	mem location
crop_img/computer_organization_note_135_crop_18.jpg	. LD,St
crop_img/computer_organization_note_135_crop_19.jpg	8bit
crop_img/computer_organization_note_135_crop_20.jpg	Indrect Mode mm=[ec*+offst])prand=[[coffset]]
crop_img/computer_organization_note_135_crop_21.jpg	 The addr of the operand can be any where in mem
crop_img/computer_organization_note_135_crop_22.jpg	. LOI,STI
crop_img/computer_organization_note_135_crop_23.jpg	6lt
crop_img/computer_organization_note_135_crop_24.jpg	) Bon+ off set Mode : mem = content of bar register
crop_img/computer_organization_note_135_crop_25.jpg	off set
crop_img/computer_organization_note_135_crop_26.jpg	+
crop_img/computer_organization_note_135_crop_27.jpg	↓
crop_img/computer_organization_note_135_crop_28.jpg	aGPR
crop_img/computer_organization_note_135_crop_29.jpg	. LOR, STR
crop_img/computer_organization_note_135_crop_30.jpg	) BR: If (condition…)→ do thirsBranch condition
crop_img/computer_organization_note_135_crop_31.jpg	Fognats
crop_img/computer_organization_note_135_crop_32.jpg	.mem localion of the next in&truction
crop_img/computer_organization_note_135_crop_33.jpg	. Ic Relative
crop_img/computer_organization_note_135_crop_34.jpg	nt) p crpd to N,t,I set by the poviour instmetion
crop_img/computer_organization_note_135_crop_35.jpg	tf n /2/=1: check the bit N/z/l ,if it is 1→
crop_img/computer_organization_note_135_crop_36.jpg	chance the inomented Ic adrer fom EVAvATE Aes phase
crop_img/computer_organization_note_136_crop_0.jpg	)JMe: change the content of rc→ Content in Base R (a GR)
crop_img/computer_organization_note_136_crop_1.jpg	.This hules qvaching men location out side  ffst ls range
crop_img/computer_organization_note_136_crop_2.jpg	Format:1 10 0| 0 00 010 000000
crop_img/computer_organization_note_136_crop_3.jpg	BaseR
crop_img/computer_organization_note_136_crop_4.jpg	Systematic decom sition: deecmpoe  coplec program into mall nanagable
crop_img/computer_organization_note_136_crop_5.jpg	unit
crop_img/computer_organization_note_136_crop_6.jpg	Thue contut to build the lorge unit of work ae sequential conditional
crop_img/computer_organization_note_136_crop_7.jpg	and itoative
crop_img/computer_organization_note_136_crop_8.jpg	)subtasks : component& of a laorge task
crop_img/computer_organization_note_136_crop_9.jpg	addh of  in structio
crop_img/computer_organization_note_136_crop_10.jpg	Control flow:
crop_img/computer_organization_note_136_crop_11.jpg	A ist tark
crop_img/computer_organization_note_136_crop_12.jpg	sequential
crop_img/computer_organization_note_136_crop_13.jpg	↓
crop_img/computer_organization_note_136_crop_14.jpg	B1 2nd task
crop_img/computer_organization_note_136_crop_15.jpg	V
crop_img/computer_organization_note_136_crop_16.jpg	B{t$
crop_img/computer_organization_note_136_crop_17.jpg	LC+=1
crop_img/computer_organization_note_136_crop_18.jpg	↓
crop_img/computer_organization_note_136_crop_19.jpg	01
crop_img/computer_organization_note_136_crop_20.jpg	Conditional
crop_img/computer_organization_note_136_crop_21.jpg	A generate condition
crop_img/computer_organization_note_136_crop_22.jpg	con dition al BR check
crop_img/computer_organization_note_136_crop_23.jpg	2
crop_img/computer_organization_note_136_crop_24.jpg	true
crop_img/computer_organization_note_136_crop_25.jpg	Sub se
crop_img/computer_organization_note_136_crop_26.jpg	I
crop_img/computer_organization_note_136_crop_27.jpg	$B_{2}1$
crop_img/computer_organization_note_136_crop_28.jpg	sub tark2
crop_img/computer_organization_note_136_crop_29.jpg	subtask1 C2+1
crop_img/computer_organization_note_136_crop_30.jpg	一
crop_img/computer_organization_note_136_crop_31.jpg	V
crop_img/computer_organization_note_136_crop_32.jpg	Ca BR that uncondionally blan che
crop_img/computer_organization_note_136_crop_33.jpg	Da
crop_img/computer_organization_note_136_crop_34.jpg	to 0a
crop_img/computer_organization_note_136_crop_35.jpg	+
crop_img/computer_organization_note_136_crop_36.jpg	→
crop_img/computer_organization_note_136_crop_37.jpg	${2+$
crop_img/computer_organization_note_137_crop_0.jpg	) Iterative:
crop_img/computer_organization_note_137_crop_1.jpg	generte condition
crop_img/computer_organization_note_137_crop_2.jpg	A
crop_img/computer_organization_note_137_crop_3.jpg	→
crop_img/computer_organization_note_137_crop_4.jpg	conclitional Br check
crop_img/computer_organization_note_137_crop_5.jpg	B
crop_img/computer_organization_note_137_crop_6.jpg	3
crop_img/computer_organization_note_137_crop_7.jpg	toue
crop_img/computer_organization_note_137_crop_8.jpg	f alu
crop_img/computer_organization_note_137_crop_9.jpg	0{3}+1$
crop_img/computer_organization_note_137_crop_10.jpg	↓
crop_img/computer_organization_note_137_crop_11.jpg	BR that unconiayban
crop_img/computer_organization_note_137_crop_12.jpg	3
crop_img/computer_organization_note_137_crop_13.jpg	to A
crop_img/computer_organization_note_137_crop_14.jpg	) Assembly lang nage : lows level
crop_img/computer_organization_note_137_crop_15.jpg	) HALT : s top running the program
crop_img/computer_organization_note_137_crop_16.jpg	) Instoruction : label
crop_img/computer_organization_note_137_crop_17.jpg	Opcode
crop_img/computer_organization_note_137_crop_18.jpg	operand's
crop_img/computer_organization_note_137_crop_19.jpg	j lomment
crop_img/computer_organization_note_137_crop_20.jpg	optionol
crop_img/computer_organization_note_137_crop_21.jpg	optional
crop_img/computer_organization_note_137_crop_22.jpg	) Labels : xymbolic names assigned to the memory location
crop_img/computer_organization_note_137_crop_23.jpg	. A lo cation can contain an ins truction /value
crop_img/computer_organization_note_137_crop_24.jpg	) Boeudo-op (Asem blber plirectiver) :a mesage from prog rammr
crop_img/computer_organization_note_137_crop_25.jpg	to the arsembler to help it rocr
crop_img/computer_organization_note_137_crop_26.jpg	tnanstate mog ram in
crop_img/computer_organization_note_137_crop_27.jpg	avsembyIsA of the Lc-3
crop_img/computer_organization_note_137_crop_28.jpg	①.oRIG: tell the aremb lr where in the mem to place the program
crop_img/computer_organization_note_137_crop_29.jpg	Ex :.ORIG×3050
crop_img/computer_organization_note_137_crop_30.jpg	②.FILL: set a side the next lo cation in the pogram and intialie it
crop_img/computer_organization_note_138_crop_0.jpg	with a vahue /label
crop_img/computer_organization_note_138_crop_1.jpg	③
crop_img/computer_organization_note_138_crop_2.jpg	.blkw: set araide a noumter of sequential mem location
crop_img/computer_organization_note_138_crop_3.jpg	Ex:LOC.BLKW2
crop_img/computer_organization_note_138_crop_4.jpg	last loc continr
crop_img/computer_organization_note_138_crop_5.jpg	×0000
crop_img/computer_organization_note_138_crop_6.jpg	9
crop_img/computer_organization_note_138_crop_7.jpg	④
crop_img/computer_organization_note_138_crop_8.jpg	.STRINGz:Pnitiali te a sequena of n+1 mem locationN, where
crop_img/computer_organization_note_138_crop_9.jpg	a sequenc of n charactors is the operand . Each loation holds a
crop_img/computer_organization_note_138_crop_10.jpg	toro-extended AscII code for the capd char
crop_img/computer_organization_note_138_crop_11.jpg	Ex:.ORIG ×3010
crop_img/computer_organization_note_138_crop_12.jpg	"ello. Wonld!
crop_img/computer_organization_note_138_crop_13.jpg	21
crop_img/computer_organization_note_138_crop_14.jpg	STRINGZ
crop_img/computer_organization_note_138_crop_15.jpg	5.ENo: tell arsembler thot it reached the end of the program)
crop_img/computer_organization_note_138_crop_16.jpg	don t pro us any af ter
crop_img/computer_organization_note_138_crop_17.jpg	) Asembhy fqogqe : d complete prse8
crop_img/computer_organization_note_138_crop_18.jpg	① Identify the actual binary adrs oupd to the symbolic labels
crop_img/computer_organization_note_138_crop_19.jpg	→This formx av symbol table
crop_img/computer_organization_note_138_crop_20.jpg	2
crop_img/computer_organization_note_138_crop_21.jpg	Translate assembly instructionx into cred machine language instuctionx
crop_img/computer_organization_note_138_crop_22.jpg	) 1st par: examinex instouctionx in equence) and increment the Lc once
crop_img/computer_organization_note_138_crop_23.jpg	fon each inst
crop_img/computer_organization_note_138_crop_24.jpg	If an inst has a lavel  a symbol entry i nade in the table
crop_img/computer_organization_note_138_crop_25.jpg	) 2nd pars: translate the progham into Lc-3 machine language int
crop_img/computer_organization_note_139_crop_0.jpg	×3013
crop_img/computer_organization_note_139_crop_1.jpg	R3，PTR
crop_img/computer_organization_note_139_crop_2.jpg	. Ex :L0
crop_img/computer_organization_note_139_crop_3.jpg	→ load k3 with content ia x3013
crop_img/computer_organization_note_139_crop_4.jpg	Have lc{*=×3002
crop_img/computer_organization_note_139_crop_5.jpg	We need off sot to create binary string repre the inst
crop_img/computer_organization_note_139_crop_6.jpg	Note : because
crop_img/computer_organization_note_139_crop_7.jpg	 Exeutbl image: the entity being executed by a computer,reated
crop_img/computer_organization_note_139_crop_8.jpg	from moduler
crop_img/computer_organization_note_139_crop_9.jpg	Each module i tranated into an obje file contaiing the intctionts
crop_img/computer_organization_note_139_crop_10.jpg	in the computor ured fon that module
crop_img/computer_organization_note_139_crop_11.jpg	 Multiple object Files: Ex: the progham ar onl module and the inut data
crop_img/computer_organization_note_139_crop_12.jpg	file ar another
crop_img/computer_organization_note_139_crop_13.jpg	beginning addr of the input file
crop_img/computer_organization_note_139_crop_14.jpg	(pseudo-op)
crop_img/computer_organization_note_139_crop_15.jpg	↓
crop_img/computer_organization_note_139_crop_16.jpg	• .EXTERNAL : identify
crop_img/computer_organization_note_139_crop_17.jpg	the STARTof FILE a not known yet, will
crop_img/computer_organization_note_139_crop_18.jpg	be known when transhatingy the other moduler
crop_img/computer_organization_note_139_crop_19.jpg	) Sub-routines: function fore Aembly
crop_img/computer_organization_note_139_crop_20.jpg	 call/oetuen mechanism; the woer makes a call instrudtion to code A
crop_img/computer_organization_note_139_crop_21.jpg	and oftor the omputer erecute code A, it makes a retwin instouction
crop_img/computer_organization_note_139_crop_22.jpg	to the next inr t ruction in the paogham
crop_img/computer_organization_note_139_crop_23.jpg	.Callo: the program that aontainx the call inst
crop_img/computer_organization_note_139_crop_24.jpg	callee : the function
crop_img/computer_organization_note_139_crop_25.jpg	JsR(R): loeds Ic with the starting addr of the mb routine, and loads
crop_img/computer_organization_note_139_crop_26.jpg	R7 with the addr immediat edly aftor the Jsr(R) int
crop_img/computer_organization_note_140_crop_0.jpg	whoe to come back ofter finishipg the subroutine
crop_img/computer_organization_note_140_crop_1.jpg	→ tetwan hin kage
crop_img/computer_organization_note_140_crop_2.jpg	. JSR : use Pel-helativ addr mode
crop_img/computer_organization_note_140_crop_3.jpg	Format: oprede |1 I off set 11
crop_img/computer_organization_note_140_crop_4.jpg	. JSRR : us Base Registor addr mode
crop_img/computer_organization_note_140_crop_5.jpg	Fofmat ocode lolool BaseRl ooo 0o0
crop_img/computer_organization_note_140_crop_6.jpg	 Saing and Restoring Regirtrs: the tubroutines may retwan values by
crop_img/computer_organization_note_140_crop_7.jpg	wouting in to Mer that alruady had some values in them
crop_img/computer_organization_note_140_crop_8.jpg	→ The sub routine & have fo store those existed values into memories
crop_img/computer_organization_note_140_crop_9.jpg	befote oveiwrite them
crop_img/computer_organization_note_140_crop_10.jpg	callee Save
crop_img/computer_organization_note_140_crop_11.jpg	. Caller Save : the callor does the stoging for Rt which will be
crop_img/computer_organization_note_140_crop_12.jpg	dextroyed by JsR(R)
crop_img/computer_organization_note_140_crop_13.jpg	) Stack: last thing We stoed in a stack is the first thing we removed
crop_img/computer_organization_note_140_crop_14.jpg	from it
crop_img/computer_organization_note_140_crop_15.jpg	.push () pop()
crop_img/computer_organization_note_140_crop_16.jpg	.top:
crop_img/computer_organization_note_140_crop_17.jpg	top
crop_img/computer_organization_note_140_crop_18.jpg	 Memory impementation: we change the top pos instead of moving around
crop_img/computer_organization_note_140_crop_19.jpg	the content s of mem locationk
crop_img/computer_organization_note_140_crop_20.jpg	. R6 storer the addr of the top stack > stack pointer
crop_img/computer_organization_note_140_crop_21.jpg	. data are stored in mem locationy whose addr is decrearing
crop_img/computer_organization_note_140_crop_22.jpg	.) Under flow : pop() when the stack ir empty
crop_img/computer_organization_note_140_crop_23.jpg	→85=1 if underflow
crop_img/computer_organization_note_140_crop_24.jpg	O otherwise
crop_img/computer_organization_note_141_crop_0.jpg	full
crop_img/computer_organization_note_141_crop_1.jpg	) over fow : push l)
crop_img/computer_organization_note_141_crop_2.jpg	→ R5=1 is overflow
crop_img/computer_organization_note_141_crop_3.jpg	o othrwire
crop_img/computer_organization_note_141_crop_4.jpg	)How a subroutine can get aorg ument&,retuin value, as well as
crop_img/computer_organization_note_141_crop_5.jpg	tertore regis toruk valeer (induding Rt)?→ Stack!
crop_img/computer_organization_note_141_crop_6.jpg	RO-RH
crop_img/computer_organization_note_141_crop_7.jpg	≤R6
crop_img/computer_organization_note_141_crop_8.jpg	3
crop_img/computer_organization_note_141_crop_9.jpg	local vorn
crop_img/computer_organization_note_141_crop_10.jpg	2
crop_img/computer_organization_note_141_crop_11.jpg	) Frame lointer : a ptr wred fon
crop_img/computer_organization_note_141_crop_12.jpg	Calle's
crop_img/computer_organization_note_141_crop_13.jpg	:
crop_img/computer_organization_note_141_crop_14.jpg	A
crop_img/computer_organization_note_141_crop_15.jpg	local varI
crop_img/computer_organization_note_141_crop_16.jpg	≤R5
crop_img/computer_organization_note_141_crop_17.jpg	Aceing local vor from the stack
crop_img/computer_organization_note_141_crop_18.jpg	dutier
crop_img/computer_organization_note_141_crop_19.jpg	Old R5
crop_img/computer_organization_note_141_crop_20.jpg	R7
crop_img/computer_organization_note_141_crop_21.jpg	l
crop_img/computer_organization_note_141_crop_22.jpg	Saving the re turn value
crop_img/computer_organization_note_141_crop_23.jpg	setwin val
crop_img/computer_organization_note_141_crop_24.jpg	1
crop_img/computer_organization_note_141_crop_25.jpg	Acerring argument from the stack
crop_img/computer_organization_note_141_crop_26.jpg	lnt arg
crop_img/computer_organization_note_141_crop_27.jpg	2
crop_img/computer_organization_note_141_crop_28.jpg	Caller'y
crop_img/computer_organization_note_141_crop_29.jpg	J4
crop_img/computer_organization_note_141_crop_30.jpg	last wig
crop_img/computer_organization_note_141_crop_31.jpg	duties
crop_img/computer_organization_note_141_crop_32.jpg	) C-lang uage : ovenall
crop_img/computer_organization_note_141_crop_33.jpg	Dakigned fot writing os,sther languager, low-bvel hard drivers)
crop_img/computer_organization_note_141_crop_34.jpg	cryptography)…
crop_img/computer_organization_note_141_crop_35.jpg	Eamily compiled and to produce compact  efficient code
crop_img/computer_organization_note_141_crop_36.jpg	Don't check runtime esror → need to be careful
crop_img/computer_organization_note_141_crop_37.jpg	language compiled directly into machine
crop_img/computer_organization_note_141_crop_38.jpg	C phovidex fome featurek with c library
crop_img/computer_organization_note_141_crop_39.jpg	. C ins pro cedural, no objectrs/damer
crop_img/computer_organization_note_141_crop_40.jpg	ure c otquct instead
crop_img/computer_organization_note_141_crop_41.jpg	Pointerx are usid in place of object ref
crop_img/computer_organization_note_142_crop_0.jpg	Each func munt have a uni qne name
crop_img/computer_organization_note_142_crop_1.jpg	) Data typer:
crop_img/computer_organization_note_142_crop_2.jpg	7It depends on your platform
crop_img/computer_organization_note_142_crop_3.jpg	7char-exactly 8bits
crop_img/computer_organization_note_142_crop_4.jpg	7
crop_img/computer_organization_note_142_crop_5.jpg	short int-at least16bits
crop_img/computer_organization_note_142_crop_6.jpg	7
crop_img/computer_organization_note_142_crop_7.jpg	int-atleast16bits
crop_img/computer_organization_note_142_crop_8.jpg	7
crop_img/computer_organization_note_142_crop_9.jpg	long int-at least32bits
crop_img/computer_organization_note_142_crop_10.jpg	7
crop_img/computer_organization_note_142_crop_11.jpg	You can tell with sizeof
crop_img/computer_organization_note_142_crop_12.jpg	sizeof is a compile-time constant reflecting the number of
crop_img/computer_organization_note_142_crop_13.jpg	bytes heldby a data type or instance
crop_img/computer_organization_note_142_crop_14.jpg	7
crop_img/computer_organization_note_142_crop_15.jpg	sizeof(char)<= sizeof(short)<= sizeof(int) <= sizeof(long)
crop_img/computer_organization_note_142_crop_16.jpg	×00
crop_img/computer_organization_note_142_crop_17.jpg	7
crop_img/computer_organization_note_142_crop_18.jpg	sizeofchar is1.
crop_img/computer_organization_note_142_crop_19.jpg	↓
crop_img/computer_organization_note_142_crop_20.jpg	Doesn't hove boo lean ty pe: o = false
crop_img/computer_organization_note_142_crop_21.jpg	(meaning 0{=falke
crop_img/computer_organization_note_142_crop_22.jpg	any non-zero integer = true
crop_img/computer_organization_note_142_crop_23.jpg	) string : aoray of charsends with o
crop_img/computer_organization_note_142_crop_24.jpg	Ex：chan s[]=“abc”
crop_img/computer_organization_note_142_crop_25.jpg	char *s=“abc”
crop_img/computer_organization_note_142_crop_26.jpg	n
crop_img/computer_organization_note_142_crop_27.jpg	. Use strben to get array's length
crop_img/computer_organization_note_142_crop_28.jpg	camnt midify
crop_img/computer_organization_note_142_crop_29.jpg	#include <string.h>
crop_img/computer_organization_note_142_crop_30.jpg	) Excaped charactous :
crop_img/computer_organization_note_142_crop_31.jpg	.\n : new line
crop_img/computer_organization_note_142_crop_32.jpg	·\t: tab
crop_img/computer_organization_note_142_crop_33.jpg	ハん：
crop_img/computer_organization_note_142_crop_34.jpg	cattriage return
crop_img/computer_organization_note_142_crop_35.jpg	· \OO0: ASCIIO
crop_img/computer_organization_note_142_crop_36.jpg	.：
crop_img/computer_organization_note_142_crop_37.jpg	(el)
crop_img/computer_organization_note_142_crop_38.jpg	) Cphephocron: a sepahated entity (not inc)， but can be executed by
crop_img/computer_organization_note_142_crop_39.jpg	C-compilor
crop_img/computer_organization_note_143_crop_0.jpg	.Macnor: reuable snippet of codeCreated by#define MAcho-NAME
crop_img/computer_organization_note_143_crop_1.jpg	code
crop_img/computer_organization_note_143_crop_2.jpg	→ Take the code snippet defined applied to the macao name
crop_img/computer_organization_note_143_crop_3.jpg	→Include the content of one soutce file into another file
crop_img/computer_organization_note_143_crop_4.jpg	→fhovide additional direction to the com piler for compiling code
crop_img/computer_organization_note_143_crop_5.jpg	) #inchude
crop_img/computer_organization_note_143_crop_6.jpg	Convention: we orly include files that end in ".h"
crop_img/computer_organization_note_143_crop_7.jpg	. Sutthounding the fil name with "": ll will look in the curr
crop_img/computer_organization_note_143_crop_8.jpg	dinectony → sys directory
crop_img/computer_organization_note_143_crop_9.jpg	 <> : ll only loo kk in ay& dir
crop_img/computer_organization_note_143_crop_10.jpg	(~ claster)
crop_img/computer_organization_note_143_crop_11.jpg	sthuet :a composite data type to ghoup related vaax into one place
crop_img/computer_organization_note_143_crop_12.jpg	.Contain no methods ,and al membos are publicly visible
crop_img/computer_organization_note_143_crop_13.jpg	. Namex folo wing the sthuct tay define instances of the struct
crop_img/computer_organization_note_143_crop_14.jpg	• Identigier/ function names and struct tags occupy
crop_img/computer_organization_note_143_crop_15.jpg	diff nome spacur
crop_img/computer_organization_note_143_crop_16.jpg	→An identigior /function name can be the same ar a strnct tag
crop_img/computer_organization_note_143_crop_17.jpg	Ex : strnct car
crop_img/computer_organization_note_143_crop_18.jpg	chan mfg 30];
crop_img/computer_organization_note_143_crop_19.jpg	a struct car
crop_img/computer_organization_note_143_crop_20.jpg	ty pe ik
crop_img/computer_organization_note_143_crop_21.jpg	y
crop_img/computer_organization_note_143_crop_22.jpg	chan model C3oj
crop_img/computer_organization_note_143_crop_23.jpg	int yearj
crop_img/computer_organization_note_143_crop_24.jpg	5j
crop_img/computer_organization_note_143_crop_25.jpg	struct can thinhis_car j
crop_img/computer_organization_note_143_crop_26.jpg	type name
crop_img/computer_organization_note_143_crop_27.jpg	struct tog
crop_img/computer_organization_note_143_crop_28.jpg	( not junt car)
crop_img/computer_organization_note_143_crop_29.jpg	. Rey a struct membenr: Ex:
crop_img/computer_organization_note_143_crop_30.jpg	thinhs_car. model
crop_img/computer_organization_note_144_crop_0.jpg	vah
crop_img/computer_organization_note_144_crop_1.jpg	Ex：trpy（mike-cor.model，(amy-4
crop_img/computer_organization_note_144_crop_2.jpg	V
crop_img/computer_organization_note_144_crop_3.jpg	should have enongh 960m
crop_img/computer_organization_note_144_crop_4.jpg	lointer: contain &s memory addr of an ther var
crop_img/computer_organization_note_144_crop_5.jpg	Ex: int b = 2g
crop_img/computer_organization_note_144_crop_6.jpg	mem location “b" holds 2g
crop_img/computer_organization_note_144_crop_7.jpg	mem location "baddr holdk adt of b
crop_img/computer_organization_note_144_crop_8.jpg	int *6 addr =&b
crop_img/computer_organization_note_144_crop_9.jpg	.&{:=addr
crop_img/computer_organization_note_144_crop_10.jpg	（*）
crop_img/computer_organization_note_144_crop_11.jpg	has a meaning:
crop_img/computer_organization_note_144_crop_12.jpg	①Intype dedaration: Ex:int *px=&
crop_img/computer_organization_note_144_crop_13.jpg	→* :=pointer to
crop_img/computer_organization_note_144_crop_14.jpg	2
crop_img/computer_organization_note_144_crop_15.jpg	In an expreNion : Et : px = i
crop_img/computer_organization_note_144_crop_16.jpg	→can be uold to read and change the value stored at a known
crop_img/computer_organization_note_144_crop_17.jpg	addr of a mem location
crop_img/computer_organization_note_144_crop_18.jpg	. For an woray, the identifier ix the pointer to the fist ement
crop_img/computer_organization_note_144_crop_19.jpg	Ex:int a 10]
crop_img/computer_organization_note_144_crop_20.jpg	Note: a ir a const ptr
crop_img/computer_organization_note_144_crop_21.jpg	a =(int *ρ =  a[0)
crop_img/computer_organization_note_144_crop_22.jpg	it
crop_img/computer_organization_note_144_crop_23.jpg	We can also do arith metic with pointor to get new pointers
crop_img/computer_organization_note_144_crop_24.jpg	Ex：
crop_img/computer_organization_note_144_crop_25.jpg	 deref
crop_img/computer_organization_note_144_crop_26.jpg	三 β=ρ+1× xi of（*p）
crop_img/computer_organization_note_144_crop_27.jpg	ρ =ρ + 1
crop_img/computer_organization_note_145_crop_0.jpg	→If in an int pointoρ+ is the addre of the next int
crop_img/computer_organization_note_145_crop_1.jpg	*
crop_img/computer_organization_note_145_crop_2.jpg	Ex: a[5]
crop_img/computer_organization_note_145_crop_3.jpg	(a+5)
crop_img/computer_organization_note_145_crop_4.jpg	三
crop_img/computer_organization_note_145_crop_5.jpg	)Operaton
crop_img/computer_organization_note_145_crop_6.jpg	a
crop_img/computer_organization_note_145_crop_7.jpg	pta to a struct → a struct member
crop_img/computer_organization_note_145_crop_8.jpg	Ex:
crop_img/computer_organization_note_145_crop_9.jpg	struct myStruct {
crop_img/computer_organization_note_145_crop_10.jpg	int a, b;
crop_img/computer_organization_note_145_crop_11.jpg	} *p; // p is a pointer to struct myStruct
crop_img/computer_organization_note_145_crop_12.jpg	(*p).a =(*p).b;←
crop_img/computer_organization_note_145_crop_13.jpg	Same
crop_img/computer_organization_note_145_crop_14.jpg	meaning
crop_img/computer_organization_note_145_crop_15.jpg	p->a =p->b;
crop_img/computer_organization_note_145_crop_16.jpg	个
crop_img/computer_organization_note_145_crop_17.jpg	)typedef:a shortcut to reate a new aliar for atype
crop_img/computer_organization_note_145_crop_18.jpg	sthuct a b5]
crop_img/computer_organization_note_145_crop_19.jpg	→ b ins an woray of 5 struct a
crop_img/computer_organization_note_145_crop_20.jpg	tyredef struct a sas[5]
crop_img/computer_organization_note_145_crop_21.jpg	ta5C
crop_img/computer_organization_note_145_crop_22.jpg	Atruct a c[5]
crop_img/computer_organization_note_145_crop_23.jpg	function name ( para-tyre para)
crop_img/computer_organization_note_145_crop_24.jpg	-)
crop_img/computer_organization_note_145_crop_25.jpg	function:
crop_img/computer_organization_note_145_crop_26.jpg	type-returned
crop_img/computer_organization_note_145_crop_27.jpg	Define function prototypes before main()
crop_img/computer_organization_note_145_crop_28.jpg	tyre-retuined := void mean the function doesnt return
crop_img/computer_organization_note_145_crop_29.jpg	para-tyle
crop_img/computer_organization_note_145_crop_30.jpg	i= void
crop_img/computer_organization_note_145_crop_31.jpg	take argumintn
crop_img/computer_organization_note_145_crop_32.jpg	main () return an &-bit va lue:
crop_img/computer_organization_note_145_crop_33.jpg	.O meanx okay  eveny thing ee neanx problemy
crop_img/computer_organization_note_145_crop_34.jpg	Any function can exit and etun value uing exit(gtval)
crop_img/computer_organization_note_145_crop_35.jpg	Ex: eocit(9g)
crop_img/computer_organization_note_145_crop_36.jpg	We can se the value on command line with echo ?
crop_img/computer_organization_note_145_crop_37.jpg	•
crop_img/computer_organization_note_146_crop_0.jpg	) local var : var inside a fu nc, where another func changes it' value
crop_img/computer_organization_note_146_crop_1.jpg	won't affect itk oniginal value in the host fun
crop_img/computer_organization_note_146_crop_2.jpg	 Grlobal var: var outside functionk, where another func changer itk value
crop_img/computer_organization_note_146_crop_3.jpg	will also change it for other funes
crop_img/computer_organization_note_146_crop_4.jpg	) main():int main(int argc, har *argv 3){
crop_img/computer_organization_note_146_crop_5.jpg	return o
crop_img/computer_organization_note_146_crop_6.jpg	3
crop_img/computer_organization_note_146_crop_7.jpg	.The finst funetion invoked whan uming the program
crop_img/computer_organization_note_146_crop_8.jpg	int argc := argument counter
crop_img/computer_organization_note_146_crop_9.jpg	chor *angv ] := aoray of pointon to a char
crop_img/computer_organization_note_146_crop_10.jpg	) connt:a type qualifier indicate that a var after initialited cannot
crop_img/computer_organization_note_146_crop_11.jpg	be changed
crop_img/computer_organization_note_146_crop_12.jpg	Ex: const int  n=5
crop_img/computer_organization_note_146_crop_13.jpg	 iteog: display the num bor of Gyter held by a data type or an
crop_img/computer_organization_note_146_crop_14.jpg	instance
crop_img/computer_organization_note_146_crop_15.jpg	) GoB: an utility for debugg ing anel executing pogramr
crop_img/computer_organization_note_146_crop_16.jpg	) Clre prouron: phoghams that modifies before compilation beging
crop_img/computer_organization_note_146_crop_17.jpg	) C compiler : thanslate C code into machine code
crop_img/computer_organization_note_146_crop_18.jpg	Incuding: Source code Analyix,Tanget Code Syn thesi,and Symbol
crop_img/computer_organization_note_146_crop_19.jpg	Tabl
crop_img/computer_organization_note_146_crop_20.jpg	) Clinker : (ombine vatrioux object mo duler into a kingle executab le
crop_img/computer_organization_note_147_crop_0.jpg	image
crop_img/computer_organization_note_147_crop_1.jpg	Storage Clarr . tells where the data will be stored and who can see it
crop_img/computer_organization_note_147_crop_2.jpg	Outside a function definition
crop_img/computer_organization_note_147_crop_3.jpg	Inside afunctiondefinition
crop_img/computer_organization_note_147_crop_4.jpg	scope: external definition
crop_img/computer_organization_note_147_crop_5.jpg	scope:within the function
crop_img/computer_organization_note_147_crop_6.jpg	a promise that
crop_img/computer_organization_note_147_crop_7.jpg	<none>
crop_img/computer_organization_note_147_crop_8.jpg	storage: static address
crop_img/computer_organization_note_147_crop_9.jpg	storage: on the stack
crop_img/computer_organization_note_147_crop_10.jpg	same
crop_img/computer_organization_note_147_crop_11.jpg	scope:within the function
crop_img/computer_organization_note_147_crop_12.jpg	9
crop_img/computer_organization_note_147_crop_13.jpg	the var will be
crop_img/computer_organization_note_147_crop_14.jpg	auto
crop_img/computer_organization_note_147_crop_15.jpg	N/A
crop_img/computer_organization_note_147_crop_16.jpg	storage: on the stack
crop_img/computer_organization_note_147_crop_17.jpg	scope: within the file only
crop_img/computer_organization_note_147_crop_18.jpg	scope:within the function
crop_img/computer_organization_note_147_crop_19.jpg	initialited when the
crop_img/computer_organization_note_147_crop_20.jpg	static
crop_img/computer_organization_note_147_crop_21.jpg	storage: static address
crop_img/computer_organization_note_147_crop_22.jpg	storage: static address
crop_img/computer_organization_note_147_crop_23.jpg	phog ram run
crop_img/computer_organization_note_147_crop_24.jpg	scope: external reference
crop_img/computer_organization_note_147_crop_25.jpg	scope: external reference
crop_img/computer_organization_note_147_crop_26.jpg	storage: static address; location
crop_img/computer_organization_note_147_crop_27.jpg	storage: static address; location
crop_img/computer_organization_note_147_crop_28.jpg	determined by file containing the
crop_img/computer_organization_note_147_crop_29.jpg	determinedby file containing the
crop_img/computer_organization_note_147_crop_30.jpg	external definition (can't have
crop_img/computer_organization_note_147_crop_31.jpg	external definition (can't have
crop_img/computer_organization_note_147_crop_32.jpg	 an extern var
crop_img/computer_organization_note_147_crop_33.jpg	extern
crop_img/computer_organization_note_147_crop_34.jpg	initializer either)
crop_img/computer_organization_note_147_crop_35.jpg	initializer either)
crop_img/computer_organization_note_147_crop_36.jpg	scope: within the function
crop_img/computer_organization_note_147_crop_37.jpg	can also takes data
crop_img/computer_organization_note_147_crop_38.jpg	storage: register or stack
crop_img/computer_organization_note_147_crop_39.jpg	(hint to compiler; use of & not
crop_img/computer_organization_note_147_crop_40.jpg	register |N/A
crop_img/computer_organization_note_147_crop_41.jpg	allowed; seldom used)
crop_img/computer_organization_note_147_crop_42.jpg	from sther files
crop_img/computer_organization_note_147_crop_43.jpg	Note.
crop_img/computer_organization_note_147_crop_44.jpg	static var onhy initiolized once at the prog ram load
crop_img/computer_organization_note_147_crop_45.jpg	type qualifiu:it i pat of the obectstype
crop_img/computer_organization_note_147_crop_46.jpg	① Connt: the value of thi vor can't be changed aftor initialization
crop_img/computer_organization_note_147_crop_47.jpg	volatile : the com pilr may not optimite tef to this var
crop_img/computer_organization_note_147_crop_48.jpg	2
crop_img/computer_organization_note_147_crop_49.jpg	③
crop_img/computer_organization_note_147_crop_50.jpg	Restrict:
crop_img/computer_organization_note_147_crop_51.jpg	for the lige tione of a pth, only it or a value
crop_img/computer_organization_note_147_crop_52.jpg	direct ly deri ved from it can be wed to ar the obect pointed
crop_img/computer_organization_note_147_crop_53.jpg	by the ptt
crop_img/computer_organization_note_147_crop_54.jpg	 void : anspeci fied type
crop_img/computer_organization_note_148_crop_0.jpg	on text
crop_img/computer_organization_note_148_crop_1.jpg	 Memory Layout:4 major memory egion:datastack de
crop_img/computer_organization_note_148_crop_2.jpg	related
crop_img/computer_organization_note_148_crop_3.jpg	to men
crop_img/computer_organization_note_148_crop_4.jpg	allocating
crop_img/computer_organization_note_148_crop_5.jpg	junetion
crop_img/computer_organization_note_148_crop_6.jpg	) extern ( stonage dar):
crop_img/computer_organization_note_148_crop_7.jpg	definition
crop_img/computer_organization_note_148_crop_8.jpg	Another c file allo cate stonage ) not current fie
crop_img/computer_organization_note_148_crop_9.jpg	A ty pical way to link gfobal vwriabler betwen C giler
crop_img/computer_organization_note_148_crop_10.jpg	 De caration:intoduce an identifier and it type(alr/ray
crop_img/computer_organization_note_148_crop_11.jpg	stauct/ function)
crop_img/computer_organization_note_148_crop_12.jpg	) Definition : instantiate the identifieg
crop_img/computer_organization_note_148_crop_13.jpg	Bare Type:
crop_img/computer_organization_note_148_crop_14.jpg	the type optionelly a storage das and /or a type
crop_img/computer_organization_note_148_crop_15.jpg	2
crop_img/computer_organization_note_148_crop_16.jpg	qua li fier
crop_img/computer_organization_note_148_crop_17.jpg	Applies to all namer up until the
crop_img/computer_organization_note_148_crop_18.jpg	Ex: static vlatile long int i *j,k[10
crop_img/computer_organization_note_148_crop_19.jpg	V
crop_img/computer_organization_note_148_crop_20.jpg	√
crop_img/computer_organization_note_148_crop_21.jpg	Base type
crop_img/computer_organization_note_148_crop_22.jpg	Dedanatorr
crop_img/computer_organization_note_148_crop_23.jpg	a function
crop_img/computer_organization_note_148_crop_24.jpg	Reacling type:
crop_img/computer_organization_note_148_crop_25.jpg	①
crop_img/computer_organization_note_148_crop_26.jpg	S tart at the identifio
crop_img/computer_organization_note_148_crop_27.jpg	)
crop_img/computer_organization_note_148_crop_28.jpg	Go nighat untilmeting a (/)/end
crop_img/computer_organization_note_148_crop_29.jpg	α
crop_img/computer_organization_note_148_crop_30.jpg	③ Go left
crop_img/computer_organization_note_148_crop_31.jpg	Ex: int *(**)()
crop_img/computer_organization_note_148_crop_32.jpg	1. to tig ht :
crop_img/computer_organization_note_148_crop_33.jpg	f) just f
crop_img/computer_organization_note_149_crop_0.jpg	pointer to a pointer
crop_img/computer_organization_note_149_crop_1.jpg	3. G0 right:
crop_img/computer_organization_note_149_crop_2.jpg	that returns a poiator to an int
crop_img/computer_organization_note_149_crop_3.jpg	Unwind a type:jt apply th operato in the order theyaremed
crop_img/computer_organization_note_149_crop_4.jpg	2
crop_img/computer_organization_note_149_crop_5.jpg	3
crop_img/computer_organization_note_149_crop_6.jpg	1
crop_img/computer_organization_note_149_crop_7.jpg	1.add *
crop_img/computer_organization_note_149_crop_8.jpg	a.add *
crop_img/computer_organization_note_149_crop_9.jpg	pointer to a pointer to a function
crop_img/computer_organization_note_149_crop_10.jpg	*
crop_img/computer_organization_note_149_crop_11.jpg	*)
crop_img/computer_organization_note_149_crop_12.jpg	3
crop_img/computer_organization_note_149_crop_13.jpg	8
crop_img/computer_organization_note_149_crop_14.jpg	→
crop_img/computer_organization_note_149_crop_15.jpg	4
crop_img/computer_organization_note_149_crop_16.jpg	that returns a poiator to an int
crop_img/computer_organization_note_149_crop_17.jpg	(deres)
crop_img/computer_organization_note_149_crop_18.jpg	3. call func
crop_img/computer_organization_note_149_crop_19.jpg	*
crop_img/computer_organization_note_149_crop_20.jpg	4. add
crop_img/computer_organization_note_149_crop_21.jpg	*
crop_img/computer_organization_note_149_crop_22.jpg	**
crop_img/computer_organization_note_149_crop_23.jpg	f)（)
crop_img/computer_organization_note_149_crop_24.jpg	mtvrn
crop_img/computer_organization_note_149_crop_25.jpg	4eturn an int
crop_img/computer_organization_note_149_crop_26.jpg	Ith to int
crop_img/computer_organization_note_149_crop_27.jpg	GBA Proggamming
crop_img/computer_organization_note_149_crop_28.jpg	fhoghamming on bare metals)no operating system
crop_img/computer_organization_note_149_crop_29.jpg	 Data typus:
crop_img/computer_organization_note_149_crop_30.jpg	.Integors (signed/ default /unkigned)
crop_img/computer_organization_note_149_crop_31.jpg	 char
crop_img/computer_organization_note_149_crop_32.jpg	(1 byte)
crop_img/computer_organization_note_149_crop_33.jpg	. short int oR short (a byter)
crop_img/computer_organization_note_149_crop_34.jpg	. int ( 4 bytes)
crop_img/computer_organization_note_149_crop_35.jpg	long ( 8 byter)
crop_img/computer_organization_note_149_crop_36.jpg	享
crop_img/computer_organization_note_149_crop_37.jpg	.Floating Loint (to be avoided because thyre soft wore emulaed)
crop_img/computer_organization_note_149_crop_38.jpg	Float
crop_img/computer_organization_note_149_crop_39.jpg	doubl
crop_img/computer_organization_note_150_crop_0.jpg	 Addrev s pace : 3a bit
crop_img/computer_organization_note_150_crop_1.jpg	 Display sreen : 24o × 16o pixel color video dis play souen
crop_img/computer_organization_note_150_crop_2.jpg	.hard wore supports: video memory → vidio controller→ display
crop_img/computer_organization_note_150_crop_3.jpg	Device hegistar: Apecific memoty location s that control vaiout hard ware
crop_img/computer_organization_note_150_crop_4.jpg	。
crop_img/computer_organization_note_150_crop_5.jpg	function alitie like the dixplyingut,and ond
crop_img/computer_organization_note_150_crop_6.jpg	REG_oIsictl : a device regist er that control many video modes on the
crop_img/computer_organization_note_150_crop_7.jpg	.
crop_img/computer_organization_note_150_crop_8.jpg	GBA) itk a ddrer is at Ox040oooo00
crop_img/computer_organization_note_150_crop_9.jpg	. Accers it by wing
crop_img/computer_organization_note_150_crop_10.jpg	(unbig ned short *) 0x04000000
crop_img/computer_organization_note_150_crop_11.jpg	·OF OE OD OC DB OA 0g 08 O7 06 05 O4 O3 Oa 0100
crop_img/computer_organization_note_150_crop_12.jpg	Bit mapped graphic
crop_img/computer_organization_note_150_crop_13.jpg	Mode
crop_img/computer_organization_note_150_crop_14.jpg	(BG)
crop_img/computer_organization_note_150_crop_15.jpg	til Moder: O,1, a
crop_img/computer_organization_note_150_crop_16.jpg	Mode :
crop_img/computer_organization_note_150_crop_17.jpg	Bit map Modes: 3, 4) 5
crop_img/computer_organization_note_150_crop_18.jpg	. Uoe Baa for bitmapped graphid
crop_img/computer_organization_note_150_crop_19.jpg	) 0ideo Memogry : Uke mode 3, and to show the soeen, url mode a
crop_img/computer_organization_note_150_crop_20.jpg	. Strts at ox o6oo oooo
crop_img/computer_organization_note_150_crop_21.jpg	.Conkists of 160 × 240 16-bit unigned thortx
crop_img/computer_organization_note_150_crop_22.jpg	gepre sent clous
crop_img/computer_organization_note_150_crop_23.jpg	Mem lock store colons of pixels going
crop_img/computer_organization_note_150_crop_24.jpg	lft-to-right
crop_img/computer_organization_note_150_crop_25.jpg	up-to -down
crop_img/computer_organization_note_151_crop_0.jpg	aN mem addn T
crop_img/computer_organization_note_151_crop_1.jpg	addr(how)cl)=aow*2.40+cal
crop_img/computer_organization_note_151_crop_2.jpg	Aorn
crop_img/computer_organization_note_151_crop_3.jpg	.
crop_img/computer_organization_note_151_crop_4.jpg	→
crop_img/computer_organization_note_151_crop_5.jpg	..
crop_img/computer_organization_note_151_crop_6.jpg	) Screen buffor: a potion of video memory that store the date tepreenting
crop_img/computer_organization_note_151_crop_7.jpg	all the pixcels of a compbete video frame
crop_img/computer_organization_note_151_crop_8.jpg	)Colors: colon of pixel is Reprerented by a l6-bit& unligned khort
crop_img/computer_organization_note_151_crop_9.jpg	0|000000000000
crop_img/computer_organization_note_151_crop_10.jpg	tad
crop_img/computer_organization_note_151_crop_11.jpg	not used
crop_img/computer_organization_note_151_crop_12.jpg	bue
crop_img/computer_organization_note_151_crop_13.jpg	green
crop_img/computer_organization_note_151_crop_14.jpg	) Blanking :
crop_img/computer_organization_note_151_crop_15.jpg	240
crop_img/computer_organization_note_151_crop_16.jpg	68
crop_img/computer_organization_note_151_crop_17.jpg	. Hblank : 68 picels
crop_img/computer_organization_note_151_crop_18.jpg	scanline
crop_img/computer_organization_note_151_crop_19.jpg	, √Blank: 68 scanlines
crop_img/computer_organization_note_151_crop_20.jpg	vdraw
crop_img/computer_organization_note_151_crop_21.jpg	hbl
crop_img/computer_organization_note_151_crop_22.jpg	160
crop_img/computer_organization_note_151_crop_23.jpg	68
crop_img/computer_organization_note_151_crop_24.jpg	vblank
crop_img/computer_organization_note_151_crop_25.jpg	Fig 4.1: vdraw, vblank and hblank
crop_img/computer_organization_note_151_crop_26.jpg	periods.
crop_img/computer_organization_note_151_crop_27.jpg	subject
crop_img/computer_organization_note_151_crop_28.jpg	length
crop_img/computer_organization_note_151_crop_29.jpg	cycles
crop_img/computer_organization_note_151_crop_30.jpg	) Dinplay timing:
crop_img/computer_organization_note_151_crop_31.jpg	pixel
crop_img/computer_organization_note_151_crop_32.jpg	1
crop_img/computer_organization_note_151_crop_33.jpg	4
crop_img/computer_organization_note_151_crop_34.jpg	HDraw
crop_img/computer_organization_note_151_crop_35.jpg	240px
crop_img/computer_organization_note_151_crop_36.jpg	960
crop_img/computer_organization_note_151_crop_37.jpg	HBlank
crop_img/computer_organization_note_151_crop_38.jpg	68px
crop_img/computer_organization_note_151_crop_39.jpg	272
crop_img/computer_organization_note_151_crop_40.jpg	scanline
crop_img/computer_organization_note_151_crop_41.jpg	Hdraw+Hbl
crop_img/computer_organization_note_151_crop_42.jpg	1232
crop_img/computer_organization_note_151_crop_43.jpg	VDraw
crop_img/computer_organization_note_151_crop_44.jpg	160*scanline
crop_img/computer_organization_note_151_crop_45.jpg	197120
crop_img/computer_organization_note_151_crop_46.jpg	VBlank
crop_img/computer_organization_note_151_crop_47.jpg	68*scanline
crop_img/computer_organization_note_151_crop_48.jpg	83776
crop_img/computer_organization_note_151_crop_49.jpg	refresh
crop_img/computer_organization_note_151_crop_50.jpg	VDraw+Vbl
crop_img/computer_organization_note_151_crop_51.jpg	280896
crop_img/computer_organization_note_151_crop_52.jpg	60 Hz
crop_img/computer_organization_note_151_crop_53.jpg	√
crop_img/computer_organization_note_151_crop_54.jpg	Table 4.1: Display timing details
crop_img/computer_organization_note_151_crop_55.jpg	-) Draw and blank poriods:
crop_img/computer_organization_note_151_crop_56.jpg	Aftor a sean line har been drawn (the
crop_img/computer_organization_note_152_crop_0.jpg	Hoaw prid-2)threi  pute(blan68piel)beone
crop_img/computer_organization_note_152_crop_1.jpg	it st ts drawing another kcanline
crop_img/computer_organization_note_152_crop_2.jpg	.After lo scan liner(pnaw)have been dhaw,ther wil b
crop_img/computer_organization_note_152_crop_3.jpg	68 &can line blank(vθlank) befohe storting ovr again
crop_img/computer_organization_note_152_crop_4.jpg	 Teaing: change pixel k input in the middle of √oraw
crop_img/computer_organization_note_152_crop_5.jpg	 out eut: half thix s freen , half another ereen
crop_img/computer_organization_note_152_crop_6.jpg	• To avoid tearing) update data dering VBlank
crop_img/computer_organization_note_152_crop_7.jpg	 alette: 2paletter， one fo spriter( bjectx))one for
crop_img/computer_organization_note_152_crop_8.jpg	backgroundr
crop_img/computer_organization_note_152_crop_9.jpg	 Both containk a56 entsier of 16 bit eologur
crop_img/computer_organization_note_152_crop_10.jpg	Thore are d2 wayi to wre palettes:
crop_img/computer_organization_note_152_crop_11.jpg	. connider it as a single palette with a56 colorx
crop_img/computer_organization_note_152_crop_12.jpg	Consi der it ax a coll ection of 6 mb-altts of 16colonn
crop_img/computer_organization_note_152_crop_13.jpg	.Index o is the tars porency index.In palette mode, pixels wl
crop_img/computer_organization_note_152_crop_14.jpg	value o in thans garent
crop_img/computer_organization_note_152_crop_15.jpg	)oMA(Dinect Memony Accers):A fast way of copying data from
crop_img/computer_organization_note_152_crop_16.jpg	one lac to another
crop_img/computer_organization_note_152_crop_17.jpg	) DMA Channels : 4 channel
crop_img/computer_organization_note_152_crop_18.jpg	O: highest priorityued for time-ritical operations and
crop_img/computer_organization_note_152_crop_19.jpg	can only be wed with internal RAM
crop_img/computer_organization_note_152_crop_20.jpg	.1,2: urad to thansfer kound data
crop_img/computer_organization_note_153_crop_0.jpg	general-purpose cpiex, can be ued for lo ading in new
crop_img/computer_organization_note_153_crop_1.jpg	3:
crop_img/computer_organization_note_153_crop_2.jpg	bitmap og tile data
crop_img/computer_organization_note_153_crop_3.jpg	) back to C
crop_img/computer_organization_note_153_crop_4.jpg	 one dim woay : ex: int ia [6]
crop_img/computer_organization_note_153_crop_5.jpg	Addrss:ia= & iaCo
crop_img/computer_organization_note_153_crop_6.jpg	)Two dim wtray : ex : int ia C36]
crop_img/computer_organization_note_153_crop_7.jpg	Ad dr :ia= & ia [o0]
crop_img/computer_organization_note_153_crop_8.jpg	ia[o] =&ia [0][o}
crop_img/computer_organization_note_153_crop_9.jpg	Adt of aow 
crop_img/computer_organization_note_153_crop_10.jpg	iaC1] = &ia[1]o Adπ of qow
crop_img/computer_organization_note_153_crop_11.jpg	) Lointer calculationk: let chor ar [azec]
crop_img/computer_organization_note_153_crop_12.jpg	siteof(char)=1
crop_img/computer_organization_note_153_crop_13.jpg	Calculate pointer to arr Exy
crop_img/computer_organization_note_153_crop_14.jpg	int off st=(x*q+y)* sizeof(int)
crop_img/computer_organization_note_153_crop_15.jpg	int *ρ=(int*)((char *) ator+offset)
crop_img/computer_organization_note_153_crop_16.jpg	for 30 aray and isjk be the indicer)
crop_img/computer_organization_note_153_crop_17.jpg	Note:
crop_img/computer_organization_note_153_crop_18.jpg	offset=i*9nowx*colx+j*colx+k
crop_img/computer_organization_note_153_crop_19.jpg	J8
crop_img/computer_organization_note_153_crop_20.jpg	 Why declaring
crop_img/computer_organization_note_153_crop_21.jpg	arr CJ[2 wogk, but a c] doen't2
crop_img/computer_organization_note_153_crop_22.jpg	.Because we to calculate to [icj we only need to know # ols
crop_img/computer_organization_note_153_crop_23.jpg	Declaring anr CI ins also fine since We don't need to move to
crop_img/computer_organization_note_154_crop_0.jpg	another rows ( multiplying with # nowk ix used to move to dif feent
crop_img/computer_organization_note_154_crop_1.jpg	nowk)
crop_img/computer_organization_note_154_crop_2.jpg	Can"Hello"be
crop_img/computer_organization_note_154_crop_3.jpg	.
crop_img/computer_organization_note_154_crop_4.jpg	Can pto value
crop_img/computer_organization_note_154_crop_5.jpg	be changed2
crop_img/computer_organization_note_154_crop_6.jpg	ch anged?
crop_img/computer_organization_note_154_crop_7.jpg	char *cp=“Hell”
crop_img/computer_organization_note_154_crop_8.jpg	yor
crop_img/computer_organization_note_154_crop_9.jpg	No
crop_img/computer_organization_note_154_crop_10.jpg	Yex
crop_img/computer_organization_note_154_crop_11.jpg	char ca CJ ="Hell0"
crop_img/computer_organization_note_154_crop_12.jpg	No
crop_img/computer_organization_note_154_crop_13.jpg	)siteof
crop_img/computer_organization_note_154_crop_14.jpg	char c1 了=“hell。”
crop_img/computer_organization_note_154_crop_15.jpg	char *ca =“hello"
crop_img/computer_organization_note_154_crop_16.jpg	izeof(c)=(inuding null terminatn
crop_img/computer_organization_note_154_crop_17.jpg	site of (ca)= 8 (size of a pointer on your system)
crop_img/computer_organization_note_154_crop_18.jpg	sttlen(c,)=strben(ca)=5
crop_img/computer_organization_note_154_crop_19.jpg	Fun fact:ia 3)三*(ia+3)= *(3+ia)=3[ia]
crop_img/computer_organization_note_154_crop_20.jpg	Aray of points:ex:static char *name ]=Illegal name
crop_img/computer_organization_note_154_crop_21.jpg	.
crop_img/computer_organization_note_154_crop_22.jpg	aname 1","namea" ，"nam elo"
crop_img/computer_organization_note_154_crop_23.jpg	u
crop_img/computer_organization_note_154_crop_24.jpg	.Alo called Morgi ally Indexed Anay
crop_img/computer_organization_note_154_crop_25.jpg	Size of stuct : site of struct =2 site of element + filler
crop_img/computer_organization_note_154_crop_26.jpg	小
crop_img/computer_organization_note_154_crop_27.jpg	.Fillor helps align ellements in memory
crop_img/computer_organization_note_154_crop_28.jpg	Align meank data types memogy adds has to be a maultiple of
crop_img/computer_organization_note_154_crop_29.jpg	their site
crop_img/computer_organization_note_154_crop_30.jpg	Tipk: alwayx use riteog
crop_img/computer_organization_note_155_crop_0.jpg	 Memory allocation: what if we reed some spae for use to enter data
crop_img/computer_organization_note_155_crop_1.jpg	) Malloc( gite): resorve a block of memory of xize and return
crop_img/computer_organization_note_155_crop_2.jpg	a pointer to it
crop_img/computer_organization_note_155_crop_3.jpg	retwin av ganeric ptor o type void * ptn to generic type
crop_img/computer_organization_note_155_crop_4.jpg	 khare the heap with other libn ary functions that reg uert stimage
crop_img/computer_organization_note_155_crop_5.jpg	directly from os
crop_img/computer_organization_note_155_crop_6.jpg	Stack
crop_img/computer_organization_note_155_crop_7.jpg	Unallocated memory
crop_img/computer_organization_note_155_crop_8.jpg	Heap
crop_img/computer_organization_note_155_crop_9.jpg	Dota
crop_img/computer_organization_note_155_crop_10.jpg	lode
crop_img/computer_organization_note_155_crop_11.jpg	Baxed on brk() and sbrk()
crop_img/computer_organization_note_155_crop_12.jpg	frogram break: the mem location that gopresents the end of heap
crop_img/computer_organization_note_155_crop_13.jpg	)
crop_img/computer_organization_note_155_crop_14.jpg	memory and the stoart of unallocat ed memogy
crop_img/computer_organization_note_155_crop_15.jpg	. lefault is on tor of the heap
crop_img/computer_organization_note_155_crop_16.jpg	. We can move the program oreak into unelocated mem to get tome
crop_img/computer_organization_note_155_crop_17.jpg	extha mem
crop_img/computer_organization_note_155_crop_18.jpg	) bak(voidend-data-sag ment): sotx the program break to the location
crop_img/computer_organization_note_155_crop_19.jpg	specified by end-data-begment
crop_img/computer_organization_note_155_crop_20.jpg	brk(int inament):in ment the it of the ogxam break
crop_img/computer_organization_note_155_crop_21.jpg	by increment
crop_img/computer_organization_note_155_crop_22.jpg	.) rp = malloc (mite of struct r)
crop_img/computer_organization_note_156_crop_0.jpg	ig (np == NULL) ) wrong
crop_img/computer_organization_note_156_crop_1.jpg	Uning rp be fore checking → rash
crop_img/computer_organization_note_156_crop_2.jpg	Conrect:①ig（(p=malloc（rite of stnuct ))==NuL)
crop_img/computer_organization_note_156_crop_3.jpg	" handle ogor here
crop_img/computer_organization_note_156_crop_4.jpg	2
crop_img/computer_organization_note_156_crop_5.jpg	09
crop_img/computer_organization_note_156_crop_6.jpg	2
crop_img/computer_organization_note_156_crop_7.jpg	is(!(np= malloc(ritaof struct )))
crop_img/computer_organization_note_156_crop_8.jpg	" handle eror hore
crop_img/computer_organization_note_156_crop_9.jpg	2
crop_img/computer_organization_note_156_crop_10.jpg	)should cast the retwined generic-type pto of malloc to its correct
crop_img/computer_organization_note_156_crop_11.jpg	type by castingy
crop_img/computer_organization_note_156_crop_12.jpg	.Ig not the compiler will silenty cark it to any type of t
crop_img/computer_organization_note_156_crop_13.jpg	 freel): faee the alls cated nemory back to the heap
crop_img/computer_organization_note_156_crop_14.jpg	.Aster fre) garbage data will be in the place even thongh the
crop_img/computer_organization_note_156_crop_15.jpg	ptr still existy
crop_img/computer_organization_note_156_crop_16.jpg	.) void*calloc (site-t num, site-t site):allocater ≥ num *xite
crop_img/computer_organization_note_156_crop_17.jpg	byter of th memory on the hap,tero-out thmand rtwns e
crop_img/computer_organization_note_156_crop_18.jpg	pto to it
crop_img/computer_organization_note_156_crop_19.jpg	) void*realloc (voidpt)ite_tn):reallocates≥nbyterof
crop_img/computer_organization_note_156_crop_20.jpg	mem on the heap, retuan a pt to it
crop_img/computer_organization_note_156_crop_21.jpg	 Copier the data staruting at ptr that was previously allocated
crop_img/computer_organization_note_156_crop_22.jpg	oftan ured to expand the mem site foh an existing object on the heaf
crop_img/data_structure_algorithm_note_30_crop_0.jpg	Total cost of operations
crop_img/data_structure_algorithm_note_30_crop_1.jpg	)Amontized Cost
crop_img/data_structure_algorithm_note_30_crop_2.jpg	#operationn
crop_img/data_structure_algorithm_note_30_crop_3.jpg	 Lointor: a variable that stores the me mory add rerr of an object
crop_img/data_structure_algorithm_note_30_crop_4.jpg	Hard removal: The data removed ix completely removed fom the
crop_img/data_structure_algorithm_note_30_crop_5.jpg	backiny s t ructwre
crop_img/data_structure_algorithm_note_30_crop_6.jpg	. Set a ponition to null is a har d removal method
crop_img/data_structure_algorithm_note_30_crop_7.jpg	) soft removal: The data ir still inside the backing data strudwre, but
crop_img/data_structure_algorithm_note_30_crop_8.jpg	canot be accerred by user
crop_img/data_structure_algorithm_note_30_crop_9.jpg	DATA STRUCTURE
crop_img/data_structure_algorithm_note_30_crop_10.jpg	 Lint: An ordered, o-alignedcontiguous collection of data
crop_img/data_structure_algorithm_note_30_crop_11.jpg	no gapis
crop_img/data_structure_algorithm_note_30_crop_12.jpg	start from
crop_img/data_structure_algorithm_note_30_crop_13.jpg	0
crop_img/data_structure_algorithm_note_30_crop_14.jpg	.2 standard implementation  lint : Asaay lixt， Linked ist
crop_img/data_structure_algorithm_note_30_crop_15.jpg	) Apray Lixt :
crop_img/data_structure_algorithm_note_30_crop_16.jpg	Cs l33a lecture note
crop_img/data_structure_algorithm_note_30_crop_17.jpg	) Linked list : 3 different impementations : Siagly-Linked Lis
crop_img/data_structure_algorithm_note_30_crop_18.jpg	Poubly-Linked List)
crop_img/data_structure_algorithm_note_30_crop_19.jpg	circularly Linhed List
crop_img/data_structure_algorithm_note_30_crop_20.jpg	) Singly-Linked List : CS133a lecture
crop_img/data_structure_algorithm_note_30_crop_21.jpg	Methodis that require going to the end of the list takes o(n)
crop_img/data_structure_algorithm_note_30_crop_22.jpg	Addback() → taokled using tail pointer
crop_img/data_structure_algorithm_note_30_crop_23.jpg	6
crop_img/data_structure_algorithm_note_30_crop_24.jpg	Remove bach () → a problem where it's im porible to arsign
crop_img/data_structure_algorithm_note_30_crop_25.jpg	a
crop_img/data_structure_algorithm_note_30_crop_26.jpg	tai l to dnd -to -last node
crop_img/data_structure_algorithm_note_30_crop_27.jpg	→ cannot go backwands
crop_img/data_structure_algorithm_note_31_crop_0.jpg	. Note on removeLast l): cannot directy et the data f “tuilto null
crop_img/data_structure_algorithm_note_31_crop_1.jpg	because the node itself stll there) meaniny the and-to last
crop_img/data_structure_algorithm_note_31_crop_2.jpg	node ins not pointing to nuel
crop_img/data_structure_algorithm_note_31_crop_3.jpg	Instead, hos to travern the lint to the and-to-last node,
crop_img/data_structure_algorithm_note_31_crop_4.jpg	then ret its pointer to point to null
crop_img/data_structure_algorithm_note_31_crop_5.jpg	.) Doubly linked list: Can do all methods in o(1) (erecept
crop_img/data_structure_algorithm_note_31_crop_6.jpg	add At thdex()) but cont memory and more comp
crop_img/data_structure_algorithm_note_31_crop_7.jpg	) cirular singhy lLinked tiot: like a singy linkd list but the
crop_img/data_structure_algorithm_note_31_crop_8.jpg	lart node points to the Mt node
crop_img/data_structure_algorithm_note_31_crop_9.jpg	."tail" ins not needed
crop_img/data_structure_algorithm_note_31_crop_10.jpg	. Add Front ():
crop_img/data_structure_algorithm_note_31_crop_11.jpg	Move old head's data"a
crop_img/data_structure_algorithm_note_31_crop_12.jpg	3
crop_img/data_structure_algorithm_note_31_crop_13.jpg	③
crop_img/data_structure_algorithm_note_31_crop_14.jpg	new node
crop_img/data_structure_algorithm_note_31_crop_15.jpg	to new node
crop_img/data_structure_algorithm_note_31_crop_16.jpg	2
crop_img/data_structure_algorithm_note_31_crop_17.jpg	①
crop_img/data_structure_algorithm_note_31_crop_18.jpg	head
crop_img/data_structure_algorithm_note_31_crop_19.jpg	 Move new head's data
crop_img/data_structure_algorithm_note_31_crop_20.jpg	a
crop_img/data_structure_algorithm_note_31_crop_21.jpg	to old head
crop_img/data_structure_algorithm_note_31_crop_22.jpg	•Add Back ():
crop_img/data_structure_algorithm_note_31_crop_23.jpg	① Add Front (data)
crop_img/data_structure_algorithm_note_31_crop_24.jpg	② Move Front To Back ()
crop_img/data_structure_algorithm_note_32_crop_0.jpg	Remove Back ():itorate to the and-to-last node
crop_img/data_structure_algorithm_note_33_crop_0.jpg	(Recwvrion)
crop_img/data_structure_algorithm_note_33_crop_1.jpg	 Lointor Reinforcement : each node determine whether it remains in the list
crop_img/data_structure_algorithm_note_33_crop_2.jpg	Et: remove duplicates in a linked List
crop_img/data_structure_algorithm_note_33_crop_3.jpg	1→22→0
crop_img/data_structure_algorithm_note_33_crop_4.jpg	2
crop_img/data_structure_algorithm_note_33_crop_5.jpg	1
crop_img/data_structure_algorithm_note_33_crop_6.jpg	1
crop_img/data_structure_algorithm_note_33_crop_7.jpg	public void removeDuplicates(){
crop_img/data_structure_algorithm_note_33_crop_8.jpg	2
crop_img/data_structure_algorithm_note_33_crop_9.jpg	head =rRemove(head);
crop_img/data_structure_algorithm_note_33_crop_10.jpg	retuqn
crop_img/data_structure_algorithm_note_33_crop_11.jpg	the node that replaces uro in the liot
crop_img/data_structure_algorithm_note_33_crop_12.jpg	}
crop_img/data_structure_algorithm_note_33_crop_13.jpg	3
crop_img/data_structure_algorithm_note_33_crop_14.jpg	3
crop_img/data_structure_algorithm_note_33_crop_15.jpg	4
crop_img/data_structure_algorithm_note_33_crop_16.jpg	private Node<T>(rRemoveNode<T> curr) {
crop_img/data_structure_algorithm_note_33_crop_17.jpg	5
crop_img/data_structure_algorithm_note_33_crop_18.jpg	6
crop_img/data_structure_algorithm_note_33_crop_19.jpg	if(curr == nul1){
crop_img/data_structure_algorithm_note_33_crop_20.jpg	Base case
crop_img/data_structure_algorithm_note_33_crop_21.jpg	7
crop_img/data_structure_algorithm_note_33_crop_22.jpg	return null;
crop_img/data_structure_algorithm_note_33_crop_23.jpg	return the node that relaes cutor.next
crop_img/data_structure_algorithm_note_33_crop_24.jpg	}
crop_img/data_structure_algorithm_note_33_crop_25.jpg	8
crop_img/data_structure_algorithm_note_33_crop_26.jpg	in the list (reuersive otep)
crop_img/data_structure_algorithm_note_33_crop_27.jpg	9
crop_img/data_structure_algorithm_note_33_crop_28.jpg	curr.next = rRemove(curr.next);
crop_img/data_structure_algorithm_note_33_crop_29.jpg	10
crop_img/data_structure_algorithm_note_33_crop_30.jpg	if (curr.next != null
crop_img/data_structure_algorithm_note_33_crop_31.jpg	11
crop_img/data_structure_algorithm_note_33_crop_32.jpg	&& curr.data.equals(curr.next.data) {
crop_img/data_structure_algorithm_note_33_crop_33.jpg	12
crop_img/data_structure_algorithm_note_33_crop_34.jpg	return curr.next;
crop_img/data_structure_algorithm_note_33_crop_35.jpg	condition for cur fo be in the list
crop_img/data_structure_algorithm_note_33_crop_36.jpg	13
crop_img/data_structure_algorithm_note_33_crop_37.jpg	}
crop_img/data_structure_algorithm_note_33_crop_38.jpg	14
crop_img/data_structure_algorithm_note_33_crop_39.jpg	return curr;
crop_img/data_structure_algorithm_note_33_crop_40.jpg	15
crop_img/data_structure_algorithm_note_33_crop_41.jpg	}
crop_img/data_structure_algorithm_note_33_crop_42.jpg	ony remove / add from top
crop_img/data_structure_algorithm_note_33_crop_43.jpg	0
crop_img/data_structure_algorithm_note_33_crop_44.jpg	) Stackr :
crop_img/data_structure_algorithm_note_33_crop_45.jpg	。
crop_img/data_structure_algorithm_note_33_crop_46.jpg	0
crop_img/data_structure_algorithm_note_33_crop_47.jpg	0
crop_img/data_structure_algorithm_note_33_crop_48.jpg	0。0
crop_img/data_structure_algorithm_note_33_crop_49.jpg	. Data at the bot tom stay in the stack the long est (Lost In Fisrt
crop_img/data_structure_algorithm_note_33_crop_50.jpg	Out - LIFO)
crop_img/data_structure_algorithm_note_33_crop_51.jpg	fush () := addTop ()
crop_img/data_structure_algorithm_note_33_crop_52.jpg	fop()
crop_img/data_structure_algorithm_note_33_crop_53.jpg	=remove Top()
crop_img/data_structure_algorithm_note_33_crop_54.jpg	feek l) : = get Top
crop_img/data_structure_algorithm_note_33_crop_55.jpg	Problm : don't have add Index () and sem Index()
crop_img/data_structure_algorithm_note_34_crop_0.jpg	head
crop_img/data_structure_algorithm_note_34_crop_1.jpg	tail
crop_img/data_structure_algorithm_note_34_crop_2.jpg	back:
crop_img/data_structure_algorithm_note_34_crop_3.jpg	backing Linked list s tail
crop_img/data_structure_algorithm_note_34_crop_4.jpg	front:
crop_img/data_structure_algorithm_note_34_crop_5.jpg	backing linked list Is head
crop_img/data_structure_algorithm_note_34_crop_6.jpg	enquene () := add Back With Tail ()
crop_img/data_structure_algorithm_note_34_crop_7.jpg	dequene () := rem Front ()
crop_img/data_structure_algorithm_note_35_crop_0.jpg	(cir anlar Agray)
crop_img/data_structure_algorithm_note_35_crop_1.jpg	 Aqray Oueue
crop_img/data_structure_algorithm_note_35_crop_2.jpg	个
crop_img/data_structure_algorithm_note_35_crop_3.jpg	front
crop_img/data_structure_algorithm_note_35_crop_4.jpg	Backing Ds is cirular Agray with front index
crop_img/data_structure_algorithm_note_35_crop_5.jpg	.back=(front +site-1)%o backing Agr.bength
crop_img/data_structure_algorithm_note_35_crop_6.jpg	When re site ba cking Aor) set front back to O
crop_img/data_structure_algorithm_note_35_crop_7.jpg	enqueue （:adndex(front+-)backinglngh)
crop_img/data_structure_algorithm_note_35_crop_8.jpg	dequne():
crop_img/data_structure_algorithm_note_35_crop_9.jpg	.Set faont is data to null
crop_img/data_structure_algorithm_note_35_crop_10.jpg	front :=(f ront +1)%。 baching Ar.leng th
crop_img/data_structure_algorithm_note_35_crop_11.jpg	addback()
crop_img/data_structure_algorithm_note_35_crop_12.jpg	add Front ()
crop_img/data_structure_algorithm_note_35_crop_13.jpg	Deque:
crop_img/data_structure_algorithm_note_35_crop_14.jpg	remFront()
crop_img/data_structure_algorithm_note_35_crop_15.jpg	rem Back ()
crop_img/data_structure_algorithm_note_35_crop_16.jpg	) linked Degue: Have to deal with o(n) method (remove back())
crop_img/data_structure_algorithm_note_35_crop_17.jpg	uing sLL
crop_img/data_structure_algorithm_note_35_crop_18.jpg	→ Ua ol oas the backing os
crop_img/data_structure_algorithm_note_35_crop_19.jpg	) Asray peque : Use ciraular Aray as the baching Ds
crop_img/data_structure_algorithm_note_35_crop_20.jpg	) Trees : G ix a tree if r is lop-free and has no eyedes
crop_img/data_structure_algorithm_note_35_crop_21.jpg	farent
crop_img/data_structure_algorithm_note_35_crop_22.jpg	0
crop_img/data_structure_algorithm_note_35_crop_23.jpg	Lwrent & child.
crop_img/data_structure_algorithm_note_35_crop_24.jpg	8 dhild
crop_img/data_structure_algorithm_note_35_crop_25.jpg	. A node can have any # of children
crop_img/data_structure_algorithm_note_35_crop_26.jpg	Exacthy I node wl o parent
crop_img/data_structure_algorithm_note_36_crop_0.jpg	) uaf: Node that has O children
crop_img/data_structure_algorithm_note_36_crop_1.jpg	(BT)
crop_img/data_structure_algorithm_note_36_crop_2.jpg	 Binory Tree: Each node has at most 2 children:"bft"and “right"
crop_img/data_structure_algorithm_note_36_crop_3.jpg	.Full bT: each node has exadthy o or & children
crop_img/data_structure_algorithm_note_36_crop_4.jpg	. Compbte BT: satisfy 2 conditionr:
crop_img/data_structure_algorithm_note_36_crop_5.jpg	① Each dep th of the tre except the lowest depth murt have
crop_img/data_structure_algorithm_note_36_crop_6.jpg	maximum # no des
crop_img/data_structure_algorithm_note_36_crop_7.jpg	2 lowest dep th murt be filled fron boft→right
crop_img/data_structure_algorithm_note_36_crop_8.jpg	Fogr ea ch n there is exactly one shape a complete tree har
crop_img/data_structure_algorithm_note_36_crop_9.jpg	Balanced bT: A node ir ba lenad if its children have height that
crop_img/data_structure_algorithm_note_36_crop_10.jpg	diffor by Oor .A te ix balanud if every rode ir balanced
crop_img/data_structure_algorithm_note_36_crop_11.jpg	) binory search Tree (bst) :A binary tree where for a node with
crop_img/data_structure_algorithm_note_36_crop_12.jpg	data x, all the data in the beft sulb tre <x and all the data
crop_img/data_structure_algorithm_note_36_crop_13.jpg	in the rig ht sub tree x.
crop_img/data_structure_algorithm_note_36_crop_14.jpg	0) fre-order traveradl: qarent → left sub-tree→rig ht subtr
crop_img/data_structure_algorithm_note_36_crop_15.jpg	4
crop_img/data_structure_algorithm_note_36_crop_16.jpg	Ex :
crop_img/data_structure_algorithm_note_36_crop_17.jpg	→（4，2，13，6，5)7）
crop_img/data_structure_algorithm_note_36_crop_18.jpg	α
crop_img/data_structure_algorithm_note_36_crop_19.jpg	6
crop_img/data_structure_algorithm_note_36_crop_20.jpg	>
crop_img/data_structure_algorithm_note_36_crop_21.jpg	/
crop_img/data_structure_algorithm_note_36_crop_22.jpg	V
crop_img/data_structure_algorithm_note_36_crop_23.jpg	3
crop_img/data_structure_algorithm_note_36_crop_24.jpg	5
crop_img/data_structure_algorithm_note_36_crop_25.jpg	7
crop_img/data_structure_algorithm_note_36_crop_26.jpg	Ioe-order traversal is uni que
crop_img/data_structure_algorithm_note_36_crop_27.jpg	.
crop_img/data_structure_algorithm_note_36_crop_28.jpg	 In -ordor traveral : left mub trl  parent → right sub tre
crop_img/data_structure_algorithm_note_37_crop_0.jpg	→（l，2，3，4，5，6，+）
crop_img/data_structure_algorithm_note_37_crop_1.jpg	Ex:
crop_img/data_structure_algorithm_note_37_crop_2.jpg	\
crop_img/data_structure_algorithm_note_37_crop_3.jpg	×
crop_img/data_structure_algorithm_note_37_crop_4.jpg	2
crop_img/data_structure_algorithm_note_37_crop_5.jpg	6
crop_img/data_structure_algorithm_note_37_crop_6.jpg	ordered
crop_img/data_structure_algorithm_note_37_crop_7.jpg	7
crop_img/data_structure_algorithm_note_37_crop_8.jpg	5
crop_img/data_structure_algorithm_note_37_crop_9.jpg	→This out puts ondered list of data
crop_img/data_structure_algorithm_note_37_crop_10.jpg	) lorst -order traversal : bft sub-tree→hight mub-tre → faent
crop_img/data_structure_algorithm_note_37_crop_11.jpg	Ex :
crop_img/data_structure_algorithm_note_37_crop_12.jpg	→(1,3，2,5,7,6,4)
crop_img/data_structure_algorithm_note_37_crop_13.jpg	4
crop_img/data_structure_algorithm_note_37_crop_14.jpg	2
crop_img/data_structure_algorithm_note_37_crop_15.jpg	6
crop_img/data_structure_algorithm_note_37_crop_16.jpg	一
crop_img/data_structure_algorithm_note_37_crop_17.jpg	5
crop_img/data_structure_algorithm_note_37_crop_18.jpg	7
crop_img/data_structure_algorithm_note_37_crop_19.jpg	)Tqe Operations:
crop_img/data_structure_algorithm_note_37_crop_20.jpg	contains（):
crop_img/data_structure_algorithm_note_37_crop_21.jpg	.If data > aor Node. dat a : slarch right
crop_img/data_structure_algorithm_note_37_crop_22.jpg	data < awor Nodl. data : search bft
crop_img/data_structure_algorithm_note_37_crop_23.jpg	If
crop_img/data_structure_algorithm_note_37_crop_24.jpg	9
crop_img/data_structure_algorithm_note_37_crop_25.jpg	Wor&t case:
crop_img/data_structure_algorithm_note_37_crop_26.jpg	V
crop_img/data_structure_algorithm_note_37_crop_27.jpg	→0(n)
crop_img/data_structure_algorithm_note_37_crop_28.jpg	Genrally untime is O(log n)
crop_img/data_structure_algorithm_note_37_crop_29.jpg	. add () : Any data can bre added to leaf poritionN
crop_img/data_structure_algorithm_note_38_crop_0.jpg	.If dota> awor Node.dau: go pight
crop_img/data_structure_algorithm_note_38_crop_1.jpg	If data < cur Node. date ; go lft
crop_img/data_structure_algorithm_note_38_crop_2.jpg	public void Add(T data)
crop_img/data_structure_algorithm_note_38_crop_3.jpg	(cton note viplces cor
crop_img/data_structure_algorithm_note_38_crop_4.jpg	root = addH(root, data)
crop_img/data_structure_algorithm_note_38_crop_5.jpg	pth reinforcement
crop_img/data_structure_algorithm_note_38_crop_6.jpg	private Node addH(Node curr,T data):
crop_img/data_structure_algorithm_note_38_crop_7.jpg	if cuN ==null:
crop_img/data_structure_algorithm_note_38_crop_8.jpg	NodenewNode=newNode(data）
crop_img/data_structure_algorithm_note_38_crop_9.jpg	replice noll w/ n Node
crop_img/data_structure_algorithm_note_38_crop_10.jpg	return newNode
crop_img/data_structure_algorithm_note_38_crop_11.jpg	if curr.data == data:
crop_img/data_structure_algorithm_note_38_crop_12.jpg	//do nothing, data already in tree
crop_img/data_structure_algorithm_note_38_crop_13.jpg	if curr.data<data:
crop_img/data_structure_algorithm_note_38_crop_14.jpg	//recurse right
crop_img/data_structure_algorithm_note_38_crop_15.jpg	curr.right=addH(curr.right,data)
crop_img/data_structure_algorithm_note_38_crop_16.jpg	if curr.data>data:
crop_img/data_structure_algorithm_note_38_crop_17.jpg	//recurse left
crop_img/data_structure_algorithm_note_38_crop_18.jpg	curr.left=addH(curr.left, data)
crop_img/data_structure_algorithm_note_38_crop_19.jpg	return curr
crop_img/data_structure_algorithm_note_38_crop_20.jpg	• gemove (): There are 3 caser:
crop_img/data_structure_algorithm_note_38_crop_21.jpg	. Case I : The removed datu has no children :
crop_img/data_structure_algorithm_note_38_crop_22.jpg	. Btr reinforcement :
crop_img/data_structure_algorithm_note_38_crop_23.jpg	currNode. data == data : retwin null
crop_img/data_structure_algorithm_note_38_crop_24.jpg	1 child
crop_img/data_structure_algorithm_note_38_crop_25.jpg	Case &:The
crop_img/data_structure_algorithm_note_38_crop_26.jpg	. Ith rein force ment:
crop_img/data_structure_algorithm_note_38_crop_27.jpg	if aurr Node.data == dat a: return wor Node. net Node
crop_img/data_structure_algorithm_note_38_crop_28.jpg	.Case 3:The
crop_img/data_structure_algorithm_note_38_crop_29.jpg	2 childgen :
crop_img/data_structure_algorithm_note_38_crop_30.jpg	 Find the node con taining the data wing ptn reinforcement
crop_img/data_structure_algorithm_note_38_crop_31.jpg	. Delete the node' data
crop_img/data_structure_algorithm_note_38_crop_32.jpg	Re place with its succerron
crop_img/data_structure_algorithm_note_38_crop_33.jpg	pre de cersor
crop_img/data_structure_algorithm_note_38_crop_34.jpg	smallert
crop_img/data_structure_algorithm_note_38_crop_35.jpg	largest
crop_img/data_structure_algorithm_note_38_crop_36.jpg	data>
crop_img/data_structure_algorithm_note_38_crop_37.jpg	datd <aur.dat
crop_img/data_structure_algorithm_note_38_crop_38.jpg	cwa.ddta
crop_img/data_structure_algorithm_note_38_crop_39.jpg	Remoe the s/es (l ofr o dhuild this time)
crop_img/data_structure_algorithm_note_39_crop_0.jpg	rcton nide
crop_img/data_structure_algorithm_note_39_crop_1.jpg	public Tremove(T data):
crop_img/data_structure_algorithm_note_39_crop_2.jpg	Node dummy=newNode(null）
crop_img/data_structure_algorithm_note_39_crop_3.jpg	root=removeH(root,data,dummy）
crop_img/data_structure_algorithm_note_39_crop_4.jpg	riplies cur
crop_img/data_structure_algorithm_note_39_crop_5.jpg	return dummy.data
crop_img/data_structure_algorithm_note_39_crop_6.jpg	private Node removeH(Node curr, T data, Node dumrny):
crop_img/data_structure_algorithm_note_39_crop_7.jpg	if curr ==null:
crop_img/data_structure_algorithm_note_39_crop_8.jpg	//data not in tree
crop_img/data_structure_algorithm_note_39_crop_9.jpg	throw exception
crop_img/data_structure_algorithm_note_39_crop_10.jpg	if curr.data<data:
crop_img/data_structure_algorithm_note_39_crop_11.jpg	//recurse right
crop_img/data_structure_algorithm_note_39_crop_12.jpg	if curr.data>data:
crop_img/data_structure_algorithm_note_39_crop_13.jpg	//recurse left
crop_img/data_structure_algorithm_note_39_crop_14.jpg	if curr.data ==data:
crop_img/data_structure_algorithm_note_39_crop_15.jpg	dummy.data= curr.data
crop_img/data_structure_algorithm_note_39_crop_16.jpg	if curr has 0kids:
crop_img/data_structure_algorithm_note_39_crop_17.jpg	return null
crop_img/data_structure_algorithm_note_39_crop_18.jpg	if currhas 1kid:
crop_img/data_structure_algorithm_note_39_crop_19.jpg	return curr.kid
crop_img/data_structure_algorithm_note_39_crop_20.jpg	if curr has 2kids:
crop_img/data_structure_algorithm_note_39_crop_21.jpg	//get predecessor
crop_img/data_structure_algorithm_note_39_crop_22.jpg	1L++
crop_img/data_structure_algorithm_note_39_crop_23.jpg	Node dummy2=new Node(null)
crop_img/data_structure_algorithm_note_39_crop_24.jpg	curr.lft=trecor(crrleftdumy2)
crop_img/data_structure_algorithm_note_39_crop_25.jpg	PO
crop_img/data_structure_algorithm_note_39_crop_26.jpg	to Remove
crop_img/data_structure_algorithm_note_39_crop_27.jpg	0f
crop_img/data_structure_algorithm_note_39_crop_28.jpg	curr.data=dummy2.data
crop_img/data_structure_algorithm_note_39_crop_29.jpg	return curr
crop_img/data_structure_algorithm_note_39_crop_30.jpg	→as Ras possisle
crop_img/data_structure_algorithm_note_39_crop_31.jpg	ret arn the node replacing curr
crop_img/data_structure_algorithm_note_39_crop_32.jpg	private NodegetPredecessorNode curr, Nodedummy):
crop_img/data_structure_algorithm_note_39_crop_33.jpg	ptn rein forcement
crop_img/data_structure_algorithm_note_39_crop_34.jpg	//find the rightmost descendant
crop_img/data_structure_algorithm_note_39_crop_35.jpg	if curr.right= null:→ atr iN
crop_img/data_structure_algorithm_note_39_crop_36.jpg	//found predecessor
crop_img/data_structure_algorithm_note_39_crop_37.jpg	ar well
crop_img/data_structure_algorithm_note_39_crop_38.jpg	dummy.data=curr.data
crop_img/data_structure_algorithm_note_39_crop_39.jpg	return curr.left
crop_img/data_structure_algorithm_note_39_crop_40.jpg	cever trich to retun more
crop_img/data_structure_algorithm_note_39_crop_41.jpg	else:
crop_img/data_structure_algorithm_note_39_crop_42.jpg	curr.right=getPredecessor(curr.right,dummy）
crop_img/data_structure_algorithm_note_39_crop_43.jpg	than one value
crop_img/data_structure_algorithm_note_39_crop_44.jpg	return curr
crop_img/data_structure_algorithm_note_39_crop_45.jpg	PD
crop_img/data_structure_algorithm_note_39_crop_46.jpg	L
crop_img/data_structure_algorithm_note_39_crop_47.jpg	.Base case of get fre deeor ( : we want to remove the PD a wel)
crop_img/data_structure_algorithm_note_39_crop_48.jpg	there fore the arent of the eo will point to the bft (L) node
crop_img/data_structure_algorithm_note_39_crop_49.jpg	instead
crop_img/data_structure_algorithm_note_39_crop_50.jpg	gt predeceor will recontt the path it tave throgh to t
crop_img/data_structure_algorithm_note_39_crop_51.jpg	to the eo of to Remove.
crop_img/data_structure_algorithm_note_39_crop_52.jpg	) Reading recurrion:
crop_img/data_structure_algorithm_note_39_crop_53.jpg	checking the base case n=b, thn check
crop_img/data_structure_algorithm_note_39_crop_54.jpg	the case n=b+ …,until you get the oncept
crop_img/data_structure_algorithm_note_40_crop_0.jpg	Heap : A tree data structwre where for every node, the value of it
crop_img/data_structure_algorithm_note_40_crop_1.jpg	child ren is great er or smallor than its own value
crop_img/data_structure_algorithm_note_40_crop_2.jpg	noot
crop_img/data_structure_algorithm_note_40_crop_3.jpg	noot
crop_img/data_structure_algorithm_note_40_crop_4.jpg	 Max Heap:
crop_img/data_structure_algorithm_note_40_crop_5.jpg	decreasing
crop_img/data_structure_algorithm_note_40_crop_6.jpg	· Min Heap:
crop_img/data_structure_algorithm_note_40_crop_7.jpg	increasiny
crop_img/data_structure_algorithm_note_40_crop_8.jpg	8
crop_img/data_structure_algorithm_note_40_crop_9.jpg	八
crop_img/data_structure_algorithm_note_40_crop_10.jpg	o Heap ins a complete touue
crop_img/data_structure_algorithm_note_40_crop_11.jpg	. order: for a max heap  node with gruater vale has higher order
crop_img/data_structure_algorithm_note_40_crop_12.jpg	min heap)
crop_img/data_structure_algorithm_note_40_crop_13.jpg	smaller
crop_img/data_structure_algorithm_note_40_crop_14.jpg	parent has higher order than children
crop_img/data_structure_algorithm_note_40_crop_15.jpg	Backing os : array (because there ix no gaps bet ween data)
crop_img/data_structure_algorithm_note_40_crop_16.jpg	Stoning data of a heap into aray : use bvel-or der traverxal
crop_img/data_structure_algorithm_note_40_crop_17.jpg	. the o-index ele ment is null
crop_img/data_structure_algorithm_note_40_crop_18.jpg	let A be the backing array
crop_img/data_structure_algorithm_note_40_crop_19.jpg	• add ( ):
crop_img/data_structure_algorithm_note_40_crop_20.jpg	① A. add Back() → now heap may be out -of -ordor
crop_img/data_structure_algorithm_note_40_crop_21.jpg	② Us heap:
crop_img/data_structure_algorithm_note_40_crop_22.jpg	while new Node has higher or der than parent
crop_img/data_structure_algorithm_note_40_crop_23.jpg	&wap (new Node, parent)
crop_img/data_structure_algorithm_note_40_crop_24.jpg	if new Node is root:
crop_img/data_structure_algorithm_note_40_crop_25.jpg	break
crop_img/data_structure_algorithm_note_40_crop_26.jpg	.remove (): remove root ( highest order)
crop_img/data_structure_algorithm_note_40_crop_27.jpg	① nemove 
crop_img/data_structure_algorithm_note_40_crop_28.jpg	② move A [xite]
crop_img/data_structure_algorithm_note_40_crop_29.jpg	to index I→new Node
crop_img/data_structure_algorithm_note_41_crop_0.jpg	③
crop_img/data_structure_algorithm_note_41_crop_1.jpg	Down heap:
crop_img/data_structure_algorithm_note_41_crop_2.jpg	while newNode has lower order than it s children
crop_img/data_structure_algorithm_note_41_crop_3.jpg	if only I bad child :
crop_img/data_structure_algorithm_note_41_crop_4.jpg	A wap (new Node, bad child)
crop_img/data_structure_algorithm_note_41_crop_5.jpg	if a bad childrn :
crop_img/data_structure_algorithm_note_41_crop_6.jpg	&wap (new Node, bad child with hig her order
crop_img/data_structure_algorithm_note_41_crop_7.jpg	ig newNode is leaf (have o dildren):
crop_img/data_structure_algorithm_note_41_crop_8.jpg	break
crop_img/data_structure_algorithm_note_41_crop_9.jpg	starting from right→left
crop_img/data_structure_algorithm_note_41_crop_10.jpg	.build seap() :
crop_img/data_structure_algorithm_note_41_crop_11.jpg	V
crop_img/data_structure_algorithm_note_41_crop_12.jpg	for each intenal nodein reverse order level:
crop_img/data_structure_algorithm_note_41_crop_13.jpg	down Heap (V)
crop_img/data_structure_algorithm_note_41_crop_14.jpg	Runtime : o(n)
crop_img/data_structure_algorithm_note_41_crop_15.jpg	) Has hMap: A data structure that storer (key,value) pairs
crop_img/data_structure_algorithm_note_41_crop_16.jpg	let M be a hashmap
crop_img/data_structure_algorithm_note_41_crop_17.jpg	Rules: keyr must be unique and immutable
crop_img/data_structure_algorithm_note_41_crop_18.jpg	put (key,val) : t (ky,vae) pair into Mif y eady
crop_img/data_structure_algorithm_note_41_crop_19.jpg	existed, replace old value with new input value
crop_img/data_structure_algorithm_note_41_crop_20.jpg	get (key)
crop_img/data_structure_algorithm_note_41_crop_21.jpg	): return a ysociat ed value
crop_img/data_structure_algorithm_note_41_crop_22.jpg	We want put l) and get() to be o(1)  haush lodel) and backing array
crop_img/data_structure_algorithm_note_41_crop_23.jpg	hash value
crop_img/data_structure_algorithm_note_41_crop_24.jpg	hashlode(): map data of orbitrary xite to a fixed-site value
crop_img/data_structure_algorithm_note_41_crop_25.jpg	 Two ob jects are equal  they have the same hash value
crop_img/data_structure_algorithm_note_41_crop_26.jpg	Lreference : a dif f objectr have diff hash code
crop_img/data_structure_algorithm_note_41_crop_27.jpg	,index=/object . hahCode() l。 A,len 1
crop_img/data_structure_algorithm_note_42_crop_0.jpg	. collisiony : put a dif
crop_img/data_structure_algorithm_note_42_crop_1.jpg	keys into the same spot of baching array
crop_img/data_structure_algorithm_note_42_crop_2.jpg	good hash code () can reduce this
crop_img/data_structure_algorithm_note_42_crop_3.jpg	increase site of backing aray
crop_img/data_structure_algorithm_note_42_crop_4.jpg	# items
crop_img/data_structure_algorithm_note_42_crop_5.jpg	Load factor: a value indicate when to re site, i.c. when
crop_img/data_structure_algorithm_note_42_crop_6.jpg	A.len
crop_img/data_structure_algorithm_note_42_crop_7.jpg	≥load factor
crop_img/data_structure_algorithm_note_42_crop_8.jpg	. Rerite: when doing rexite, en changes so indices of keys mut
crop_img/data_structure_algorithm_note_42_crop_9.jpg	be recalunlated
crop_img/data_structure_algorithm_note_42_crop_10.jpg	• Open addrersing : I item per inde → linear/Quadretic robing
crop_img/data_structure_algorithm_note_42_crop_11.jpg	Closed addresing: ≥a items pr index → External chaining
crop_img/data_structure_algorithm_note_42_crop_12.jpg	no back ta
crop_img/data_structure_algorithm_note_42_crop_13.jpg	L
crop_img/data_structure_algorithm_note_42_crop_14.jpg	. Exteral chaining; one indesc hold a linked list
crop_img/data_structure_algorithm_note_42_crop_15.jpg	put () → 0(n) (adding to back)
crop_img/data_structure_algorithm_note_42_crop_16.jpg	qebite cost ; o(n)
crop_img/data_structure_algorithm_note_42_crop_17.jpg	Linear/auadratic probing: keep track of deleted items (De mak)
crop_img/data_structure_algorithm_note_42_crop_18.jpg	put (): stop when seeing sie non-remo ved entay
crop_img/data_structure_algorithm_note_42_crop_19.jpg	(*)
crop_img/data_structure_algorithm_note_42_crop_20.jpg	ot meeting removed entry with kay-valve
crop_img/data_structure_algorithm_note_42_crop_21.jpg	① Compute id
crop_img/data_structure_algorithm_note_42_crop_22.jpg	2
crop_img/data_structure_algorithm_note_42_crop_23.jpg	At id:
crop_img/data_structure_algorithm_note_42_crop_24.jpg	if key already existed: npdate valve
crop_img/data_structure_algorithm_note_42_crop_25.jpg	if dif f keys
crop_img/data_structure_algorithm_note_42_crop_26.jpg	probe right (id +=1)
crop_img/data_structure_algorithm_note_42_crop_27.jpg	手
crop_img/data_structure_algorithm_note_42_crop_28.jpg	DEL
crop_img/data_structure_algorithm_note_42_crop_29.jpg	remembor if it the lot one
crop_img/data_structure_algorithm_note_42_crop_30.jpg	：
crop_img/data_structure_algorithm_note_42_crop_31.jpg	null
crop_img/data_structure_algorithm_note_42_crop_32.jpg	ig lnt DEl =null : put key here
crop_img/data_structure_algorithm_note_42_crop_33.jpg	ebse: put key into let DEL
crop_img/data_structure_algorithm_note_43_crop_0.jpg	Runtime : Worst care O(n)
crop_img/data_structure_algorithm_note_43_crop_1.jpg	get () :(*)
crop_img/data_structure_algorithm_note_43_crop_2.jpg	④
crop_img/data_structure_algorithm_note_43_crop_3.jpg	Compute id
crop_img/data_structure_algorithm_note_43_crop_4.jpg	②
crop_img/data_structure_algorithm_note_43_crop_5.jpg	At id:
crop_img/data_structure_algorithm_note_43_crop_6.jpg	if keys are same : ret won ky's value
crop_img/data_structure_algorithm_note_43_crop_7.jpg	if diffkey: probe right
crop_img/data_structure_algorithm_note_43_crop_8.jpg	守
crop_img/data_structure_algorithm_note_43_crop_9.jpg	①EL : probe rig ht
crop_img/data_structure_algorithm_note_43_crop_10.jpg	null : stop) no found
crop_img/data_structure_algorithm_note_43_crop_11.jpg	Runtime : Wonrt care o(n)
crop_img/data_structure_algorithm_note_43_crop_12.jpg	resite: every thing can collide of ter resite→ o(n)
crop_img/data_structure_algorithm_note_43_crop_13.jpg	Quadratic obing can hel reduce runtime by oeating gap,but
crop_img/data_structure_algorithm_note_43_crop_14.jpg	this causes seardhing for empty spau to but items in ineff ioient
crop_img/data_structure_algorithm_note_43_crop_15.jpg	·What do we do when we cannot find an empty space? rexize(not once)
crop_img/data_structure_algorithm_note_43_crop_16.jpg	ara.len
crop_img/data_structure_algorithm_note_43_crop_17.jpg	? Aftor that the in dicer
crop_img/data_structure_algorithm_note_43_crop_18.jpg	. Why the max # at tempts in
crop_img/data_structure_algorithm_note_43_crop_19.jpg	2
crop_img/data_structure_algorithm_note_43_crop_20.jpg	will start repeating
crop_img/data_structure_algorithm_note_43_crop_21.jpg	he site once may not be enough
crop_img/data_structure_algorithm_note_43_crop_22.jpg	 Skipliot: 2o linked list  where a node has 4 ptos : nexct,previows)
crop_img/data_structure_algorithm_note_43_crop_23.jpg	above, be low
crop_img/data_structure_algorithm_note_43_crop_24.jpg	. Rulesi
crop_img/data_structure_algorithm_note_43_crop_25.jpg	① All data must be in lowest level
crop_img/data_structure_algorithm_note_43_crop_26.jpg	② If in level, must be lower bevels no dae can fel between 
crop_img/data_structure_algorithm_note_43_crop_27.jpg	empty bvels)
crop_img/data_structure_algorithm_note_43_crop_28.jpg	. contains()
crop_img/data_structure_algorithm_note_43_crop_29.jpg	if data > cure 's data ; go right
crop_img/data_structure_algorithm_note_43_crop_30.jpg	chse if data 
crop_img/data_structure_algorithm_note_43_crop_31.jpg	: go down
crop_img/data_structure_algorithm_note_44_crop_0.jpg	if hit null : not in list
crop_img/data_structure_algorithm_note_44_crop_1.jpg	add ( : most lft word item is -a)most right ful item is 
crop_img/data_structure_algorithm_note_44_crop_2.jpg	① Flip coin
crop_img/data_structure_algorithm_note_44_crop_3.jpg	② i8 head :# layers t=s (add on top)
crop_img/data_structure_algorithm_note_44_crop_4.jpg	ig tail: t art adding
crop_img/data_structure_algorithm_note_44_crop_5.jpg	Adding : if data > arr s data: go right
crop_img/data_structure_algorithm_note_44_crop_6.jpg	B
crop_img/data_structure_algorithm_note_44_crop_7.jpg	if data < ar's data:
crop_img/data_structure_algorithm_note_44_crop_8.jpg	add bef ore aurr
crop_img/data_structure_algorithm_note_44_crop_9.jpg	go up
crop_img/data_structure_algorithm_note_44_crop_10.jpg	continue until fall out of the list
crop_img/data_structure_algorithm_note_44_crop_11.jpg	remove (): si milor to contains (), but ofter found and remove
crop_img/data_structure_algorithm_note_44_crop_12.jpg	the element at the urrent level, go down and repiat until fall
crop_img/data_structure_algorithm_note_44_crop_13.jpg	out of list
crop_img/data_structure_algorithm_note_44_crop_14.jpg	Runtime:
crop_img/data_structure_algorithm_note_44_crop_15.jpg	for add () : random
crop_img/data_structure_algorithm_note_44_crop_16.jpg	for cont ains():
crop_img/data_structure_algorithm_note_44_crop_17.jpg	. Best case is simi lar to BsT → ollogn)
crop_img/data_structure_algorithm_note_44_crop_18.jpg	horitontal (all MEAD)
crop_img/data_structure_algorithm_note_44_crop_19.jpg	. Worst care: all datu ix in a single linked list
crop_img/data_structure_algorithm_note_44_crop_20.jpg	vertical (all TtILs)
crop_img/data_structure_algorithm_note_44_crop_21.jpg	0(n)
crop_img/data_structure_algorithm_note_44_crop_22.jpg	=7
crop_img/data_structure_algorithm_note_44_crop_23.jpg	for he movex(): o(n)
crop_img/data_structure_algorithm_note_44_crop_24.jpg	)AVL: self-balanuing binary search tre
crop_img/data_structure_algorithm_note_44_crop_25.jpg	.Balance: A node is balanced if it children have height diff byo
crop_img/data_structure_algorithm_note_44_crop_26.jpg	or 1. A tree cont aining all balanced node is ba lanaed
crop_img/data_structure_algorithm_note_44_crop_27.jpg	. null node
crop_img/data_structure_algorithm_note_44_crop_28.jpg	has heig ht -1
crop_img/data_structure_algorithm_note_45_crop_0.jpg	BF
crop_img/data_structure_algorithm_note_45_crop_1.jpg	. Balance facton :=node.left.height-node.right.height
crop_img/data_structure_algorithm_note_45_crop_2.jpg	.BFE-a,-1，0，1，α
crop_img/data_structure_algorithm_note_45_crop_3.jpg	hoot, bf=a→lean too much to the left
crop_img/data_structure_algorithm_note_45_crop_4.jpg	Ex:
crop_img/data_structure_algorithm_note_45_crop_5.jpg	Q
crop_img/data_structure_algorithm_note_45_crop_6.jpg	-1
crop_img/data_structure_algorithm_note_45_crop_7.jpg	心
crop_img/data_structure_algorithm_note_45_crop_8.jpg	Fixing unbalanced sub tre : Let A, B,c form a sub tree)
crop_img/data_structure_algorithm_note_45_crop_9.jpg	we have 4 caresi
crop_img/data_structure_algorithm_note_45_crop_10.jpg	① Rotate left:
crop_img/data_structure_algorithm_note_45_crop_11.jpg	A.BF= -∂
crop_img/data_structure_algorithm_note_45_crop_12.jpg	-2
crop_img/data_structure_algorithm_note_45_crop_13.jpg	A.tig ht. BF =-1
crop_img/data_structure_algorithm_note_45_crop_14.jpg	A
crop_img/data_structure_algorithm_note_45_crop_15.jpg	一1
crop_img/data_structure_algorithm_note_45_crop_16.jpg	B
crop_img/data_structure_algorithm_note_45_crop_17.jpg	0
crop_img/data_structure_algorithm_note_45_crop_18.jpg	C
crop_img/data_structure_algorithm_note_45_crop_19.jpg	No tia that height and BF of c
crop_img/data_structure_algorithm_note_45_crop_20.jpg	B
crop_img/data_structure_algorithm_note_45_crop_21.jpg	Q
crop_img/data_structure_algorithm_note_45_crop_22.jpg	Rotate left
crop_img/data_structure_algorithm_note_45_crop_23.jpg	doeon't change → only need to
crop_img/data_structure_algorithm_note_45_crop_24.jpg	C
crop_img/data_structure_algorithm_note_45_crop_25.jpg	A
crop_img/data_structure_algorithm_note_45_crop_26.jpg	O
crop_img/data_structure_algorithm_note_45_crop_27.jpg	update B and A
crop_img/data_structure_algorithm_note_45_crop_28.jpg	A
crop_img/data_structure_algorithm_note_45_crop_29.jpg	D
crop_img/data_structure_algorithm_note_45_crop_30.jpg	B
crop_img/data_structure_algorithm_note_45_crop_31.jpg	What ig al ready had 2 children?
crop_img/data_structure_algorithm_note_45_crop_32.jpg	ó
crop_img/data_structure_algorithm_note_45_crop_33.jpg	E
crop_img/data_structure_algorithm_note_45_crop_34.jpg	C
crop_img/data_structure_algorithm_note_45_crop_35.jpg	O
crop_img/data_structure_algorithm_note_45_crop_36.jpg	'
crop_img/data_structure_algorithm_note_45_crop_37.jpg	B
crop_img/data_structure_algorithm_note_45_crop_38.jpg	F
crop_img/data_structure_algorithm_note_45_crop_39.jpg	G
crop_img/data_structure_algorithm_note_45_crop_40.jpg	O
crop_img/data_structure_algorithm_note_45_crop_41.jpg	—→
crop_img/data_structure_algorithm_note_45_crop_42.jpg	. attach bft child to
crop_img/data_structure_algorithm_note_45_crop_43.jpg	A
crop_img/data_structure_algorithm_note_45_crop_44.jpg	old root as right child
crop_img/data_structure_algorithm_note_45_crop_45.jpg	E
crop_img/data_structure_algorithm_note_45_crop_46.jpg	D
crop_img/data_structure_algorithm_note_45_crop_47.jpg	F
crop_img/data_structure_algorithm_note_45_crop_48.jpg	tip when coding : Freeate tamp node
crop_img/data_structure_algorithm_note_45_crop_49.jpg	point to B to keep thack of what
crop_img/data_structure_algorithm_note_45_crop_50.jpg	2
crop_img/data_structure_algorithm_note_45_crop_51.jpg	Rotate rig ht :
crop_img/data_structure_algorithm_note_45_crop_52.jpg	We want to qetwin
crop_img/data_structure_algorithm_note_45_crop_53.jpg	. What node need to update? A and B
crop_img/data_structure_algorithm_note_45_crop_54.jpg	A
crop_img/data_structure_algorithm_note_45_crop_55.jpg	2
crop_img/data_structure_algorithm_note_45_crop_56.jpg	O
crop_img/data_structure_algorithm_note_45_crop_57.jpg	B
crop_img/data_structure_algorithm_note_45_crop_58.jpg	1
crop_img/data_structure_algorithm_note_45_crop_59.jpg	A，BF=α
crop_img/data_structure_algorithm_note_45_crop_60.jpg	C
crop_img/data_structure_algorithm_note_45_crop_61.jpg	A. beft .BF=1
crop_img/data_structure_algorithm_note_46_crop_0.jpg	B
crop_img/data_structure_algorithm_note_46_crop_1.jpg	Rotate nig ht
crop_img/data_structure_algorithm_note_46_crop_2.jpg	A
crop_img/data_structure_algorithm_note_46_crop_3.jpg	when B has 2 children :
crop_img/data_structure_algorithm_note_46_crop_4.jpg	B
crop_img/data_structure_algorithm_note_46_crop_5.jpg	D
crop_img/data_structure_algorithm_note_46_crop_6.jpg	C
crop_img/data_structure_algorithm_note_46_crop_7.jpg	F
crop_img/data_structure_algorithm_note_46_crop_8.jpg	6G
crop_img/data_structure_algorithm_note_46_crop_9.jpg	B
crop_img/data_structure_algorithm_note_46_crop_10.jpg	A
crop_img/data_structure_algorithm_note_46_crop_11.jpg	: attach ripht shild to old fo ot
crop_img/data_structure_algorithm_note_46_crop_12.jpg	C
crop_img/data_structure_algorithm_note_46_crop_13.jpg	E
crop_img/data_structure_algorithm_note_46_crop_14.jpg	as left hild
crop_img/data_structure_algorithm_note_46_crop_15.jpg	0
crop_img/data_structure_algorithm_note_46_crop_16.jpg	F
crop_img/data_structure_algorithm_note_46_crop_17.jpg	0
crop_img/data_structure_algorithm_note_46_crop_18.jpg	C
crop_img/data_structure_algorithm_note_46_crop_19.jpg	Rotate bft -9uight
crop_img/data_structure_algorithm_note_46_crop_20.jpg	G
crop_img/data_structure_algorithm_note_46_crop_21.jpg	2
crop_img/data_structure_algorithm_note_46_crop_22.jpg	A
crop_img/data_structure_algorithm_note_46_crop_23.jpg	A.BF =2
crop_img/data_structure_algorithm_note_46_crop_24.jpg	-1B
crop_img/data_structure_algorithm_note_46_crop_25.jpg	A. bft.BF =-1
crop_img/data_structure_algorithm_note_46_crop_26.jpg	O
crop_img/data_structure_algorithm_note_46_crop_27.jpg	E
crop_img/data_structure_algorithm_note_46_crop_28.jpg	8G
crop_img/data_structure_algorithm_note_46_crop_29.jpg	F
crop_img/data_structure_algorithm_note_46_crop_30.jpg	Rot ate left-right :
crop_img/data_structure_algorithm_note_46_crop_31.jpg	aotate left for soub tree rooted with B, then
crop_img/data_structure_algorithm_note_46_crop_32.jpg	rotate right for sub true rooted at 
crop_img/data_structure_algorithm_note_46_crop_33.jpg	A
crop_img/data_structure_algorithm_note_46_crop_34.jpg	A
crop_img/data_structure_algorithm_note_46_crop_35.jpg	A
crop_img/data_structure_algorithm_note_46_crop_36.jpg	B
crop_img/data_structure_algorithm_note_46_crop_37.jpg	0
crop_img/data_structure_algorithm_note_46_crop_38.jpg	2
crop_img/data_structure_algorithm_note_46_crop_39.jpg	B
crop_img/data_structure_algorithm_note_46_crop_40.jpg	D
crop_img/data_structure_algorithm_note_46_crop_41.jpg	0
crop_img/data_structure_algorithm_note_46_crop_42.jpg	F
crop_img/data_structure_algorithm_note_46_crop_43.jpg	→
crop_img/data_structure_algorithm_note_46_crop_44.jpg	→
crop_img/data_structure_algorithm_note_46_crop_45.jpg	E
crop_img/data_structure_algorithm_note_46_crop_46.jpg	∂
crop_img/data_structure_algorithm_note_46_crop_47.jpg	0
crop_img/data_structure_algorithm_note_46_crop_48.jpg	G
crop_img/data_structure_algorithm_note_46_crop_49.jpg	B
crop_img/data_structure_algorithm_note_46_crop_50.jpg	A
crop_img/data_structure_algorithm_note_46_crop_51.jpg	G
crop_img/data_structure_algorithm_note_46_crop_52.jpg	F
crop_img/data_structure_algorithm_note_46_crop_53.jpg	E
crop_img/data_structure_algorithm_note_46_crop_54.jpg	E
crop_img/data_structure_algorithm_note_46_crop_55.jpg	F
crop_img/data_structure_algorithm_note_46_crop_56.jpg	8G
crop_img/data_structure_algorithm_note_46_crop_57.jpg	0
crop_img/data_structure_algorithm_note_46_crop_58.jpg	©
crop_img/data_structure_algorithm_note_47_crop_0.jpg	Rotate right-eft :
crop_img/data_structure_algorithm_note_47_crop_1.jpg	A
crop_img/data_structure_algorithm_note_47_crop_2.jpg	B
crop_img/data_structure_algorithm_note_47_crop_3.jpg	C
crop_img/data_structure_algorithm_note_47_crop_4.jpg	E
crop_img/data_structure_algorithm_note_47_crop_5.jpg	F
crop_img/data_structure_algorithm_note_47_crop_6.jpg	G
crop_img/data_structure_algorithm_note_47_crop_7.jpg	8
crop_img/data_structure_algorithm_note_47_crop_8.jpg	Add( ):
crop_img/data_structure_algorithm_note_47_crop_9.jpg	?
crop_img/data_structure_algorithm_note_47_crop_10.jpg	BST.Add ()
crop_img/data_structure_algorithm_note_47_crop_11.jpg	2
crop_img/data_structure_algorithm_note_47_crop_12.jpg	Update hight ( from newly add node→ qroot))can be
crop_img/data_structure_algorithm_note_47_crop_13.jpg	grouped
crop_img/data_structure_algorithm_note_47_crop_14.jpg	Update BF
crop_img/data_structure_algorithm_note_47_crop_15.jpg	③
crop_img/data_structure_algorithm_note_47_crop_16.jpg	to gether
crop_img/data_structure_algorithm_note_47_crop_17.jpg	④
crop_img/data_structure_algorithm_note_47_crop_18.jpg	Fix unbalanced sub tre
crop_img/data_structure_algorithm_note_47_crop_19.jpg	as up dat e()
crop_img/data_structure_algorithm_note_47_crop_20.jpg	. Since the method to fix un balance soubtree ik ued
crop_img/data_structure_algorithm_note_47_crop_21.jpg	toqether with pto reinforcement, it is more convenient
crop_img/data_structure_algorithm_note_47_crop_22.jpg	to design the method to ret win the rebalanced root
crop_img/data_structure_algorithm_note_47_crop_23.jpg	Node rebalance ( Node porent)
crop_img/data_structure_algorithm_note_47_crop_24.jpg	Where to put it ? When we want to te ba lance a kubtree
crop_img/data_structure_algorithm_note_47_crop_25.jpg	nooted at parent where BF of parent = ±α
crop_img/data_structure_algorithm_note_47_crop_26.jpg	→ It makor swre that the children and ghandchildren
crop_img/data_structure_algorithm_note_47_crop_27.jpg	node te balanced
crop_img/data_structure_algorithm_note_47_crop_28.jpg	 Maker &wre that prent 's BF is alwayts ±a
crop_img/data_structure_algorithm_note_47_crop_29.jpg	Remove()
crop_img/data_structure_algorithm_note_47_crop_30.jpg	need to temove the Succersor/Predeceron
crop_img/data_structure_algorithm_note_47_crop_31.jpg	a
crop_img/data_structure_algorithm_note_47_crop_32.jpg	BST. Remove()
crop_img/data_structure_algorithm_note_47_crop_33.jpg	①
crop_img/data_structure_algorithm_note_47_crop_34.jpg	10 also need to update height/Bf here
crop_img/data_structure_algorithm_note_47_crop_35.jpg	②
crop_img/data_structure_algorithm_note_47_crop_36.jpg	Update huight (from newly add node→ root)
crop_img/data_structure_algorithm_note_47_crop_37.jpg	3
crop_img/data_structure_algorithm_note_47_crop_38.jpg	Update BF
crop_img/data_structure_algorithm_note_47_crop_39.jpg	④
crop_img/data_structure_algorithm_note_47_crop_40.jpg	Fix unbalan aed node
crop_img/data_structure_algorithm_note_47_crop_41.jpg	Runtime : all o(logn)
crop_img/data_structure_algorithm_note_48_crop_0.jpg	)a-4 tre: A tree where each node has 1,2,or3 data
crop_img/data_structure_algorithm_note_48_crop_1.jpg	# kidx =# data +1
crop_img/data_structure_algorithm_note_48_crop_2.jpg	 Shape propeorty : all baver are at the same depth
crop_img/data_structure_algorithm_note_48_crop_3.jpg	$d1<da <d$
crop_img/data_structure_algorithm_note_48_crop_4.jpg	.onder property
crop_img/data_structure_algorithm_note_48_crop_5.jpg	$d{$
crop_img/data_structure_algorithm_note_48_crop_6.jpg	da
crop_img/data_structure_algorithm_note_48_crop_7.jpg	d3
crop_img/data_structure_algorithm_note_48_crop_8.jpg	/
crop_img/data_structure_algorithm_note_48_crop_9.jpg	<d1
crop_img/data_structure_algorithm_note_48_crop_10.jpg	d<x∠d3$
crop_img/data_structure_algorithm_note_48_crop_11.jpg	$d_{2<
crop_img/data_structure_algorithm_note_48_crop_12.jpg	x
crop_img/data_structure_algorithm_note_48_crop_13.jpg	$d1<x∠d_$
crop_img/data_structure_algorithm_note_48_crop_14.jpg	2
crop_img/data_structure_algorithm_note_48_crop_15.jpg	t
crop_img/data_structure_algorithm_note_48_crop_16.jpg	九
crop_img/data_structure_algorithm_note_48_crop_17.jpg	t
crop_img/data_structure_algorithm_note_48_crop_18.jpg	. Cortains ():
crop_img/data_structure_algorithm_note_48_crop_19.jpg	if data<d,:seard t
crop_img/data_structure_algorithm_note_48_crop_20.jpg	ilre ig d1<data<d:search t
crop_img/data_structure_algorithm_note_48_crop_21.jpg	else if da <data <dy: search t3
crop_img/data_structure_algorithm_note_48_crop_22.jpg	else if d<dat a : re rch t4
crop_img/data_structure_algorithm_note_48_crop_23.jpg	.Add ():
crop_img/data_structure_algorithm_note_48_crop_24.jpg	① Ure contain () to find leaf node
crop_img/data_structure_algorithm_note_48_crop_25.jpg	Add to existing node
crop_img/data_structure_algorithm_note_48_crop_26.jpg	Cabe: leaf node i aready fule adding to it cauex aovoflow
crop_img/data_structure_algorithm_note_48_crop_27.jpg	→ still add, then push and / snd date to parent →phomotion
crop_img/data_structure_algorithm_note_48_crop_28.jpg	→ Split leaf node into 2 new noder
crop_img/data_structure_algorithm_note_48_crop_29.jpg	.What if parent is overf low? continuiny do promotion for
crop_img/data_structure_algorithm_note_48_crop_30.jpg	porent node
crop_img/data_structure_algorithm_note_48_crop_31.jpg	. Remove():
crop_img/data_structure_algorithm_note_49_crop_0.jpg	 Uoe contain () to find node containing the data
crop_img/data_structure_algorithm_note_49_crop_1.jpg	Cake I : data in beaf node with ≥ a data
crop_img/data_structure_algorithm_note_49_crop_2.jpg	→ Just qemove
crop_img/data_structure_algorithm_note_49_crop_3.jpg	Case a : data in beaf node with only 1 data
crop_img/data_structure_algorithm_note_49_crop_4.jpg	 look into sibling nodes to see if they have ≥ d data
crop_img/data_structure_algorithm_note_49_crop_5.jpg	.If yes then after removing the data in beaf node,move
crop_img/data_structure_algorithm_note_49_crop_6.jpg	pahent node to the now-empty leaf node, and push sibliny
crop_img/data_structure_algorithm_note_49_crop_7.jpg	data to the plac letovr by arenttechlton
crop_img/data_structure_algorithm_note_49_crop_8.jpg	.If no) then we encounter "underflow"
crop_img/data_structure_algorithm_note_49_crop_9.jpg	→ full data from parent down to now-empty node,then
crop_img/data_structure_algorithm_note_49_crop_10.jpg	merge with sibling → furion
crop_img/data_structure_algorithm_note_49_crop_11.jpg	What ig parent is empty 2. continuing to fwion in parent node
crop_img/data_structure_algorithm_note_49_crop_12.jpg	data have ≥ a data
crop_img/data_structure_algorithm_note_49_crop_13.jpg	 Replace data with succerotr /pre decersor
crop_img/data_structure_algorithm_note_49_crop_14.jpg	→ Remove the sucec /pred (auarentee to be in leaf node)
crop_img/data_structure_algorithm_note_49_crop_15.jpg	→ The rert is case 1
crop_img/data_structure_algorithm_note_49_crop_16.jpg	Case4: data in internal node and succ/pred of data is alone
crop_img/data_structure_algorithm_note_49_crop_17.jpg	in its node
crop_img/data_structure_algorithm_note_49_crop_18.jpg	→ Replace data W/ kucc/ poued
crop_img/data_structure_algorithm_note_49_crop_19.jpg	) Remove the suce / pred the same way in care 2
crop_img/data_structure_algorithm_note_49_crop_20.jpg	. Runtime:
crop_img/data_structure_algorithm_note_49_crop_21.jpg	lontain () : o(logn)
crop_img/data_structure_algorithm_note_49_crop_22.jpg	. Add():
crop_img/data_structure_algorithm_note_49_crop_23.jpg	oven flowy: ot mokt logn overf low → o(logn)
crop_img/data_structure_algorithm_note_51_crop_0.jpg	ALGO RITHM
crop_img/data_structure_algorithm_note_51_crop_1.jpg	 sorting : there wre 3 criteua for korting algok:
crop_img/data_structure_algorithm_note_51_crop_2.jpg	In-place: Doexn't need additional data stouctwre to sogt
crop_img/data_structure_algorithm_note_51_crop_3.jpg	Adaptability: If data is partial sont ad, then runtime improver
crop_img/data_structure_algorithm_note_51_crop_4.jpg	Stability : Itemk with the bame value will stay in the
crop_img/data_structure_algorithm_note_51_crop_5.jpg	kame relative or der ofter konting/
crop_img/data_structure_algorithm_note_51_crop_6.jpg	In-place and Adapatebility are casy to det ect
crop_img/data_structure_algorithm_note_51_crop_7.jpg	Fon Stability:i kwap only adjacent elements→probably stable
crop_img/data_structure_algorithm_note_51_crop_8.jpg	i8
crop_img/data_structure_algorithm_note_51_crop_9.jpg	fuither apart→probably not stable
crop_img/data_structure_algorithm_note_51_crop_10.jpg	) Bubble Sont: Foq each pair of adjacent itemx)if out of ordor,&wap
crop_img/data_structure_algorithm_note_51_crop_11.jpg	Aftor i-th iteration, the item in index site-i wil be conect
crop_img/data_structure_algorithm_note_51_crop_12.jpg	Optimization:
crop_img/data_structure_algorithm_note_51_crop_13.jpg	keep track of the index of the last item that got wapped→k
crop_img/data_structure_algorithm_note_51_crop_14.jpg	→Fon each following itoation,top at k(indices from k→
crop_img/data_structure_algorithm_note_51_crop_15.jpg	and ate cofrect)
crop_img/data_structure_algorithm_note_51_crop_16.jpg	If no swaprs made during an iteration→ finish
crop_img/data_structure_algorithm_note_51_crop_17.jpg	In-plac, Adapt,and Stable
crop_img/data_structure_algorithm_note_51_crop_18.jpg	Runtime : ∂(na)
crop_img/data_structure_algorithm_note_51_crop_19.jpg	. Insertion Sonrt: In i-th iteration) put i-th element into the
crop_img/data_structure_algorithm_note_51_crop_20.jpg	sonted portion of the list
crop_img/data_structure_algorithm_note_51_crop_21.jpg	30.6.5
crop_img/data_structure_algorithm_note_51_crop_22.jpg	i-th
crop_img/data_structure_algorithm_note_51_crop_23.jpg	. At i-th iteration, indices from O→i are soated
crop_img/data_structure_algorithm_note_51_crop_24.jpg	Runtime :O(n²)
crop_img/data_structure_algorithm_note_51_crop_25.jpg	Stabl , Adaptive, In-place
crop_img/data_structure_algorithm_note_52_crop_0.jpg	) Selection Sort : In i-th itoration ) put the i-th largest clement to
crop_img/data_structure_algorithm_note_52_crop_1.jpg	con ect pokition
crop_img/data_structure_algorithm_note_52_crop_2.jpg	. Actually the one that hax the fewert #rwapk
crop_img/data_structure_algorithm_note_52_crop_3.jpg	. Not stabl) Not adaptivc ) In-place
crop_img/data_structure_algorithm_note_52_crop_4.jpg	 Cocktail shaker sort: Run bubble xort from left→right then right
crop_img/data_structure_algorithm_note_52_crop_5.jpg	to left
crop_img/data_structure_algorithm_note_52_crop_6.jpg	. the next iteration of BB storts at the element right ofter
crop_img/data_structure_algorithm_note_52_crop_7.jpg	the last kwap position of eurrent BB
crop_img/data_structure_algorithm_note_52_crop_8.jpg	If no swap in one iteration → Finish
crop_img/data_structure_algorithm_note_52_crop_9.jpg	• Stable, Adaptive, In-βlae
crop_img/data_structure_algorithm_note_52_crop_10.jpg	Runtime: o(n {²)
crop_img/data_structure_algorithm_note_52_crop_11.jpg	) Best itorative sonts; Inrsertion Sont ( fewest comfarers)
crop_img/data_structure_algorithm_note_52_crop_12.jpg	) Heap Sont : Add oll data to heap, then remove item by item
crop_img/data_structure_algorithm_note_52_crop_13.jpg	Note : Uke build Heap () to add data
crop_img/data_structure_algorithm_note_52_crop_14.jpg	Not Stable) not adaptiol, not In-place
crop_img/data_structure_algorithm_note_52_crop_15.jpg	Runtime : 0( log n)
crop_img/data_structure_algorithm_note_52_crop_16.jpg	Mergesort: Re cursively sont left half, and then sught-half and then
crop_img/data_structure_algorithm_note_52_crop_17.jpg	merge left and sight halver
crop_img/data_structure_algorithm_note_52_crop_18.jpg	. Note:·left= data [o:site/∂]
crop_img/data_structure_algorithm_note_52_crop_19.jpg	(night -exclwize)
crop_img/data_structure_algorithm_note_52_crop_20.jpg	right = data [ size/a: xize]
crop_img/data_structure_algorithm_note_52_crop_21.jpg	Fon merge , create a new temp array to hold the torted
crop_img/data_structure_algorithm_note_52_crop_22.jpg	elementx then copy them into the original porction
crop_img/data_structure_algorithm_note_52_crop_23.jpg	• Stable, not adaptive, not In-place
crop_img/data_structure_algorithm_note_53_crop_0.jpg	) Fred sogt: break dat a into list of Mite n,then run inertion ot
crop_img/data_structure_algorithm_note_53_crop_1.jpg	on each list, then merge them into a kingle sorted list
crop_img/data_structure_algorithm_note_53_crop_2.jpg	. Stable ) not Adaptive, not In-place
crop_img/data_structure_algorithm_note_53_crop_3.jpg	#liktn
crop_img/data_structure_algorithm_note_53_crop_4.jpg	Runtime:·Inkention sonts: o(n)
crop_img/data_structure_algorithm_note_53_crop_5.jpg	 Add I element to temp adto need to compare with n othor
crop_img/data_structure_algorithm_note_53_crop_6.jpg	→0(n\sn)
crop_img/data_structure_algorithm_note_53_crop_7.jpg	⇒>0(n\sn)$
crop_img/data_structure_algorithm_note_53_crop_8.jpg	QuicSort: reurxivey prtition the left sub aray and ight ubarray
crop_img/data_structure_algorithm_note_53_crop_9.jpg	according to a pivot chosen at random
crop_img/data_structure_algorithm_note_53_crop_10.jpg	<pivot | pioot | > pivot
crop_img/data_structure_algorithm_note_53_crop_11.jpg	 Partition ( ):
crop_img/data_structure_algorithm_note_53_crop_12.jpg	④ Swap ( pivot,A[stort )
crop_img/data_structure_algorithm_note_53_crop_13.jpg	 leti=1，j=site-1
crop_img/data_structure_algorithm_note_53_crop_14.jpg	• Find i k.t A[i) > pivot from index 1→end
crop_img/data_structure_algorithm_note_53_crop_15.jpg	Find j x.t Aj3< pivot from index end→1
crop_img/data_structure_algorithm_note_53_crop_16.jpg	. Swap(A[i, AEj)
crop_img/data_structure_algorithm_note_53_crop_17.jpg	.Repeat until j<i j movs to the region containing
crop_img/data_structure_algorithm_note_53_crop_18.jpg	clements <pivot)
crop_img/data_structure_algorithm_note_53_crop_19.jpg	③
crop_img/data_structure_algorithm_note_53_crop_20.jpg	Swap ( pioot ) A Cj)
crop_img/data_structure_algorithm_note_53_crop_21.jpg	Not stabb , not adaptivey in-place
crop_img/data_structure_algorithm_note_53_crop_22.jpg	Runtime : average O(nlog n)
crop_img/data_structure_algorithm_note_53_crop_23.jpg	o(na) ( keep choosing pivot which is the
crop_img/data_structure_algorithm_note_53_crop_24.jpg	Worst
crop_img/data_structure_algorithm_note_53_crop_25.jpg	min /max element)
crop_img/data_structure_algorithm_note_53_crop_26.jpg	)Quick Solect: Simi lar to QuickSort,But only need to work on one side
crop_img/data_structure_algorithm_note_53_crop_27.jpg	→ o(n) runtime
crop_img/data_structure_algorithm_note_54_crop_0.jpg	) Radix Sort: Sont intege by lo placex (each place can only hold
crop_img/data_structure_algorithm_note_54_crop_1.jpg	digit from Og, except the largest place which may inchude negative
crop_img/data_structure_algorithm_note_54_crop_2.jpg	digiti )k0 digit from-g→g
crop_img/data_structure_algorithm_note_54_crop_3.jpg	•# iterations:# digits of the longest int=k
crop_img/data_structure_algorithm_note_54_crop_4.jpg	. Represant each digit by a bucket( linked Lit) containing the
crop_img/data_structure_algorithm_note_54_crop_5.jpg	integers that has that digit at the current 1o'k place.
crop_img/data_structure_algorithm_note_54_crop_6.jpg	• Runtime : o(kn)
crop_img/data_structure_algorithm_note_54_crop_7.jpg	. Stable ) not ad aptive, not in-place
crop_img/data_structure_algorithm_note_54_crop_8.jpg	fattern matching : given atring text and sting atternfind al
crop_img/data_structure_algorithm_note_54_crop_9.jpg	occurgencus of pattoin in text
crop_img/data_structure_algorithm_note_54_crop_10.jpg	Booyer Mooge:
crop_img/data_structure_algorithm_note_54_crop_11.jpg	.Last Occurnen Table : mappiny each char in th patton to th lart
crop_img/data_structure_algorithm_note_54_crop_12.jpg	index it appears in the pattein , and all sther char got mapped to
crop_img/data_structure_algorithm_note_54_crop_13.jpg	-1(Use hashmap)
crop_img/data_structure_algorithm_note_54_crop_14.jpg	• Searching algo quithm
crop_img/data_structure_algorithm_note_54_crop_15.jpg	① Starting from the end of the pattern,compare char-by-char
crop_img/data_structure_algorithm_note_54_crop_16.jpg	with the erpd portion of the text
crop_img/data_structure_algorithm_note_54_crop_17.jpg	2
crop_img/data_structure_algorithm_note_54_crop_18.jpg	Ig every char matches: add the start index of the crpd portion
crop_img/data_structure_algorithm_note_54_crop_19.jpg	of the text to result, then move start forward 1 position
crop_img/data_structure_algorithm_note_54_crop_20.jpg	3
crop_img/data_structure_algorithm_note_54_crop_21.jpg	Elre: let failtable be the failure table
crop_img/data_structure_algorithm_note_55_crop_0.jpg	let k be the index of the char of text that fails
crop_img/data_structure_algorithm_note_55_crop_1.jpg	lartId
crop_img/data_structure_algorithm_note_55_crop_2.jpg	I
crop_img/data_structure_algorithm_note_55_crop_3.jpg	If failtable.get key(text k])<k:
crop_img/data_structure_algorithm_note_55_crop_4.jpg	start += pattern. length - loast Id
crop_img/data_structure_algorithm_note_55_crop_5.jpg	Elke : start +=1
crop_img/data_structure_algorithm_note_55_crop_6.jpg	KMe: relies on prefix & suffix of the paton to determine
crop_img/data_structure_algorithm_note_55_crop_7.jpg	shifting
crop_img/data_structure_algorithm_note_55_crop_8.jpg	.Failwre table: re cord the length of the long est prefix that ik also
crop_img/data_structure_algorithm_note_55_crop_9.jpg	the xuffioc of the pattern Co…i] (right inclusive)
crop_img/data_structure_algorithm_note_55_crop_10.jpg	.Algorithm for mreating FT :
crop_img/data_structure_algorithm_note_55_crop_11.jpg	FT [O]= 0
crop_img/data_structure_algorithm_note_55_crop_12.jpg	let i:= the storting indee of pefise
crop_img/data_structure_algorithm_note_55_crop_13.jpg	suffix
crop_img/data_structure_algorithm_note_55_crop_14.jpg	j :=
crop_img/data_structure_algorithm_note_55_crop_15.jpg	i j (at both heads)
crop_img/data_structure_algorithm_note_55_crop_16.jpg	i=0)j=1 (the ubs9ring ins ca)
crop_img/data_structure_algorithm_note_55_crop_17.jpg	While j < pat. length:
crop_img/data_structure_algorithm_note_55_crop_18.jpg	length of prefix
crop_img/data_structure_algorithm_note_55_crop_19.jpg	If pat [i] == pat[j]: write i+ to j
crop_img/data_structure_algorithm_note_55_crop_20.jpg	it，j++
crop_img/data_structure_algorithm_note_55_crop_21.jpg	El&e:
crop_img/data_structure_algorithm_note_55_crop_22.jpg	I8i≠0：
crop_img/data_structure_algorithm_note_55_crop_23.jpg	i=FT [i- 1]
crop_img/data_structure_algorithm_note_55_crop_24.jpg	If i=0
crop_img/data_structure_algorithm_note_55_crop_25.jpg	FT[j]=0 ，j++
crop_img/data_structure_algorithm_note_55_crop_26.jpg	i )j now at both
crop_img/data_structure_algorithm_note_55_crop_27.jpg	headk again and
crop_img/data_structure_algorithm_note_55_crop_28.jpg	Pat Ci ] ≠ pat Cj]
crop_img/data_structure_algorithm_note_56_crop_0.jpg	 Searching algo rithm: Acts like normal brute Fore) lxcept:
crop_img/data_structure_algorithm_note_56_crop_1.jpg	Comparing go from left→ right of pattern
crop_img/data_structure_algorithm_note_56_crop_2.jpg	. When a mismatch occwr ot index k
crop_img/data_structure_algorithm_note_56_crop_3.jpg	of rattern
crop_img/data_structure_algorithm_note_56_crop_4.jpg	start +=P{-FTCk-1}
crop_img/data_structure_algorithm_note_56_crop_5.jpg	Fon next comporing iteration  start at id FT[k-1 of patten
crop_img/data_structure_algorithm_note_56_crop_6.jpg	.If all chars mat ch,taeat the next char in tet at mis match
crop_img/data_structure_algorithm_note_56_crop_7.jpg	and shiftx like normdl
crop_img/data_structure_algorithm_note_56_crop_8.jpg	Compore the whole patton with the rpd portion of text
crop_img/data_structure_algorithm_note_56_crop_9.jpg	) Rabin-Katp :
crop_img/data_structure_algorithm_note_56_crop_10.jpg	uhaing hash
crop_img/data_structure_algorithm_note_56_crop_11.jpg	. searching algorithm :
crop_img/data_structure_algorithm_note_56_crop_12.jpg	Ig hash (Lat) == hash (lon): (equal hasher doean't mean
crop_img/data_structure_algorithm_note_56_crop_13.jpg	equal objectx)
crop_img/data_structure_algorithm_note_56_crop_14.jpg	→ Compore Bat and lor chat by char
crop_img/data_structure_algorithm_note_56_crop_15.jpg	Else: shigt pat by 1,hash of new portion computed uring
crop_img/data_structure_algorithm_note_56_crop_16.jpg	rolliny hash
crop_img/data_structure_algorithm_note_56_crop_17.jpg	pattern = Cn.Cco
crop_img/data_structure_algorithm_note_56_crop_18.jpg	Coding Tipk: hash (pat) = ∑ci. baxe
crop_img/data_structure_algorithm_note_56_crop_19.jpg	i =0
crop_img/data_structure_algorithm_note_56_crop_20.jpg	①Have to compute hash of .cl where l=pat.length
crop_img/data_structure_algorithm_note_56_crop_21.jpg	mannally (can't ure rolling hash)
crop_img/data_structure_algorithm_note_56_crop_22.jpg	hash Firt( ret hashof co…c and ba nted
crop_img/data_structure_algorithm_note_56_crop_23.jpg	to ure Math, exp())
crop_img/data_structure_algorithm_note_57_crop_0.jpg	Rolling hash: let h= hash (c;… cj)
crop_img/data_structure_algorithm_note_57_crop_1.jpg	a
crop_img/data_structure_algorithm_note_57_crop_2.jpg	hash（ci+e)=（hah（）-cbase)base
crop_img/data_structure_algorithm_note_57_crop_3.jpg	+ Cj+1$
crop_img/data_structure_algorithm_note_57_crop_4.jpg	③
crop_img/data_structure_algorithm_note_57_crop_5.jpg	Stop when i== end-l+1
crop_img/data_structure_algorithm_note_57_crop_6.jpg	 Galil Rule : A nule that can optimite Bayer Moore
crop_img/data_structure_algorithm_note_57_crop_7.jpg	Ex: text = a a a a aa a …a  (lang th n)
crop_img/data_structure_algorithm_note_57_crop_8.jpg	(m<n)
crop_img/data_structure_algorithm_note_57_crop_9.jpg	pattern= aaa..a (length m)
crop_img/data_structure_algorithm_note_57_crop_10.jpg	=) Runtime = o(mn) (just like Brute Force)
crop_img/data_structure_algorithm_note_57_crop_11.jpg	. We can make pattean become gggg whore g = a.a
crop_img/data_structure_algorithm_note_57_crop_12.jpg	where g.lngth=pat.lngth-FTend]
crop_img/data_structure_algorithm_note_57_crop_13.jpg	. When we get a complete match betwen pat and teoct,treat this
crop_img/data_structure_algorithm_note_57_crop_14.jpg	li ke the way KMe does: shift by peoriod (=pat,length -FT Cend])
crop_img/data_structure_algorithm_note_57_crop_15.jpg	next chatr in text keen ar mis match and stwrt to check at id
crop_img/data_structure_algorithm_note_57_crop_16.jpg	pat.langth-peoriod (= FT [end])
crop_img/data_structure_algorithm_note_57_crop_17.jpg	ababab
crop_img/data_structure_algorithm_note_57_crop_18.jpg	日
crop_img/data_structure_algorithm_note_57_crop_19.jpg	a
crop_img/data_structure_algorithm_note_57_crop_20.jpg	3
crop_img/data_structure_algorithm_note_57_crop_21.jpg	4
crop_img/data_structure_algorithm_note_57_crop_22.jpg	5
crop_img/data_structure_algorithm_note_57_crop_23.jpg	period = ob
crop_img/data_structure_algorithm_note_57_crop_24.jpg	一
crop_img/data_structure_algorithm_note_57_crop_25.jpg	Ex
crop_img/data_structure_algorithm_note_57_crop_26.jpg	FT:
crop_img/data_structure_algorithm_note_57_crop_27.jpg	2
crop_img/data_structure_algorithm_note_57_crop_28.jpg	4
crop_img/data_structure_algorithm_note_57_crop_29.jpg	poriod.leng th =α
crop_img/data_structure_algorithm_note_57_crop_30.jpg	3
crop_img/data_structure_algorithm_note_57_crop_31.jpg	0
crop_img/data_structure_algorithm_note_57_crop_32.jpg	6
crop_img/data_structure_algorithm_note_57_crop_33.jpg	 Depth -Figst Searuch (DFs): An algorithm to travorise the graph
crop_img/data_structure_algorithm_note_57_crop_34.jpg	where the oi &ited vertices are marked to avoid lat er . The order
crop_img/data_structure_algorithm_note_57_crop_35.jpg	of visits is simi lor to the procees of build up and tear down a stack
crop_img/data_structure_algorithm_note_57_crop_36.jpg	• Runtime: o(Vl+ lE1)
crop_img/data_structure_algorithm_note_57_crop_37.jpg	Spau-complex: o(log n)
crop_img/data_structure_algorithm_note_58_crop_0.jpg	 Baead th-Finst Search (BFs): Traverse the graph layer by layor)
crop_img/data_structure_algorithm_note_58_crop_1.jpg	Where vi sited wre marked to avoid later The order of
crop_img/data_structure_algorithm_note_58_crop_2.jpg	visits is bimrlar to the pro cess of build up and tea dowon a queue.
crop_img/data_structure_algorithm_note_58_crop_3.jpg	Stop when the queue is empty·
crop_img/data_structure_algorithm_note_58_crop_4.jpg	. Run time : O(Vl+|E1)
crop_img/data_structure_algorithm_note_58_crop_5.jpg	. Space complex: o( n/2)
crop_img/data_structure_algorithm_note_58_crop_6.jpg	.) Dij kstre: Find the thortest path from a node to all other noder
crop_img/data_structure_algorithm_note_58_crop_7.jpg	in a weight graph.ure priority queue to keep track of the
crop_img/data_structure_algorithm_note_58_crop_8.jpg	shortest path. vertices ret urned by priori ty qneue's remove l hors
crop_img/data_structure_algorithm_note_58_crop_9.jpg	value of min distane to the st arting node and thus marked as
crop_img/data_structure_algorithm_note_58_crop_10.jpg	visited. Stop when the queue is empty or all vortices are visited.
crop_img/data_structure_algorithm_note_58_crop_11.jpg	·Runtime :o((v+E) log v)
crop_img/data_structure_algorithm_note_58_crop_12.jpg	 Paim: Find the MsT by uring a set of visited vertices S containing
crop_img/data_structure_algorithm_note_58_crop_13.jpg	verticer reached by the chosen edges . Use priority queue to keep track
crop_img/data_structure_algorithm_note_58_crop_14.jpg	of the shohtest edge that incident to the verticer ofs (to be added).
crop_img/data_structure_algorithm_note_58_crop_15.jpg	Stop when all edger vixited on the queue is empty
crop_img/data_structure_algorithm_note_58_crop_16.jpg	. Runtime: o(ElloglE1)
crop_img/data_structure_algorithm_note_58_crop_17.jpg	kruskal: Find the MsT by picking the shortt edges posible thronghout
crop_img/data_structure_algorithm_note_58_crop_18.jpg	the graph that don't form a cycle.Urse unron-find data staucture
crop_img/data_structure_algorithm_note_58_crop_19.jpg	to keep track of cy cles.
crop_img/data_structure_algorithm_note_58_crop_20.jpg	inv er se Ackermann func
crop_img/data_structure_algorithm_note_58_crop_21.jpg	。Runtime: union()/find()=o(α(v)) ~0(1)
crop_img/data_structure_algorithm_note_58_crop_22.jpg	O (1E1 log)E1)
crop_img/data_structure_algorithm_note_58_crop_23.jpg	7
crop_img/dialogflow_intro_113_crop_0.jpg	Intenty:
crop_img/dialogflow_intro_113_crop_1.jpg	urer's goal otr purpoke
crop_img/dialogflow_intro_113_crop_2.jpg	only containrs the logic to detect what the urer want
crop_img/dialogflow_intro_113_crop_3.jpg	Can be rewsed in multiple plaex of a converration
crop_img/dialogflow_intro_113_crop_4.jpg	.
crop_img/dialogflow_intro_113_crop_5.jpg	Lager:
crop_img/dialogflow_intro_113_crop_6.jpg	.contsrol the flow of the converkation and what to do next
crop_img/dialogflow_intro_113_crop_7.jpg	.(an alo cover ful fillment (answer)
crop_img/dialogflow_intro_113_crop_8.jpg	 Flowx : split comphex convursation → multiple sub-conversation
crop_img/dialogflow_intro_113_crop_9.jpg	) Router:
crop_img/dialogflow_intro_113_crop_10.jpg	called when an end-wser input mat ches an intent
crop_img/dialogflow_intro_113_crop_11.jpg	and /on
crop_img/dialogflow_intro_113_crop_12.jpg	kome conditionk are met
crop_img/dialogflow_intro_113_crop_13.jpg	Intent route : intent requirement needed
crop_img/dialogflow_intro_113_crop_14.jpg	.Condition noute: a route with only I cundition reg
crop_img/dialogflow_intro_113_crop_15.jpg	Grocery chat brot:
crop_img/dialogflow_intro_113_crop_16.jpg	Intents:
crop_img/dialogflow_intro_113_crop_17.jpg	①
crop_img/dialogflow_intro_113_crop_18.jpg	Ask for menu
crop_img/dialogflow_intro_113_crop_19.jpg	. Lut into onder list ( name + quantity)
crop_img/dialogflow_intro_113_crop_20.jpg	Remove from ohdor list (name + quantity)
crop_img/dialogflow_intro_113_crop_21.jpg	Make purchaser
crop_img/dialogflow_intro_113_crop_22.jpg	2
crop_img/dialogflow_intro_113_crop_23.jpg	 Reconfinm onder
crop_img/dialogflow_intro_113_crop_24.jpg	Ask for refund
crop_img/dialogflow_intro_113_crop_25.jpg	→ 0inect to employees
crop_img/dialogflow_intro_113_crop_26.jpg	③
crop_img/git_and_github_intro_110_crop_0.jpg	GIT & GIT HUB
crop_img/git_and_github_intro_110_crop_1.jpg	) git init: intiali ze git fon a projecd
crop_img/git_and_github_intro_110_crop_2.jpg	git remote add origin <link>: set up a re mote pomitory for th prjet
crop_img/git_and_github_intro_110_crop_3.jpg	origin : an alias to e parti cular rsp
crop_img/git_and_github_intro_110_crop_4.jpg	) git revert <commit's hash> : revort a commit
crop_img/git_and_github_intro_110_crop_5.jpg	(git gevort -m 1<commits haoh> if the commit in av merge)
crop_img/git_and_github_intro_110_crop_6.jpg	 git commit: Navre changer in the local eo sitory
crop_img/git_and_github_intro_110_crop_7.jpg	) git branch : a pointer to a snapshot of our changes
crop_img/git_and_github_intro_110_crop_8.jpg	-8 for moving a brand into a nothor commit
crop_img/git_and_github_intro_110_crop_9.jpg	) git chechout : checko ut A mean we mo ve to branch A
crop_img/git_and_github_intro_110_crop_10.jpg	git merge<branch A>: merge branch A to the woorent branch
crop_img/git_and_github_intro_110_crop_11.jpg	conflict: when we tory to merge 2 branches with diff contents
crop_img/git_and_github_intro_110_crop_12.jpg	pull requert: reqwst to merge a branch with the min branch
crop_img/git_and_github_intro_110_crop_13.jpg	(directory)
crop_img/git_and_github_intro_110_crop_14.jpg	what filingitignte will not be pshed to moe
crop_img/git_and_github_intro_110_crop_15.jpg	)git ignone
crop_img/git_and_github_intro_110_crop_16.jpg	Fix the remoe rexp tocompy with.git igore: git m--(chedfile
crop_img/git_and_github_intro_110_crop_17.jpg	→push
crop_img/git_and_github_intro_110_crop_18.jpg	)git chory -pick: pick commits and add it to curr ent HeAD
crop_img/git_and_github_intro_110_crop_19.jpg	the commit
crop_img/git_and_github_intro_110_crop_20.jpg	just check
crop_img/git_and_github_intro_110_crop_21.jpg	oult
crop_img/git_and_github_intro_110_crop_22.jpg	git res et : reverse changer by moving a branch ref backward in time
crop_img/git_and_github_intro_110_crop_23.jpg	(only work for local)
crop_img/git_and_github_intro_110_crop_24.jpg	git ot:ve changr for remte by ating  modfieommit
crop_img/git_and_github_intro_111_crop_0.jpg	don't create new)
crop_img/git_and_github_intro_111_crop_1.jpg	commit
crop_img/git_and_github_intro_111_crop_2.jpg	 git commit --amend: combine staged changes within the last commit
crop_img/git_and_github_intro_111_crop_3.jpg	) Trunk -based Deo : Work on main branch only and the code base ix
crop_img/git_and_github_intro_111_crop_4.jpg	always uf-to-dote and stable
crop_img/git_and_github_intro_111_crop_5.jpg	fror: early insne detection, quick feed back, reduce overhead
crop_img/git_and_github_intro_111_crop_6.jpg	.con: confhict integration ier, robust torting，hord ond
crop_img/git_and_github_intro_111_crop_7.jpg	 Feature bran ching: Creating a new branch for a specific fatwe/change,
crop_img/git_and_github_intro_111_crop_8.jpg	then merge back to main usaing pall reguest
crop_img/git_and_github_intro_111_crop_9.jpg	Po:farallel devgood managementmain stabilityencorrage short-lived
crop_img/git_and_github_intro_111_crop_10.jpg	branches osist testing pos
crop_img/git_and_github_intro_111_crop_11.jpg	Con:bigbrncr delymrging for revwconflit due tobanch
crop_img/git_and_github_intro_111_crop_12.jpg	dependencies
crop_img/git_and_github_intro_111_crop_13.jpg	comer from stakeddapplication fielddocumentn
crop_img/git_and_github_intro_111_crop_14.jpg	√
crop_img/git_and_github_intro_111_crop_15.jpg	REQUIREMENTS ENGINFERING
crop_img/git_and_github_intro_111_crop_16.jpg	)Non-f unctional qeg: oriteriw ued to judge how the system porform, f
crop_img/git_and_github_intro_111_crop_17.jpg	what it doors(ex:securiy, accura y, cot，reuability)….)
crop_img/git_and_github_intro_111_crop_18.jpg	 Completenus: what the system need to do, determining the relevance of seg
crop_img/git_and_github_intro_111_crop_19.jpg	(the software can do this
crop_img/git_and_github_intro_111_crop_20.jpg	) User reg : wniten for ous to mers, no technical details
crop_img/git_and_github_intro_111_crop_21.jpg	that)
crop_img/git_and_github_intro_111_crop_22.jpg	8ystem regi
crop_img/git_and_github_intro_111_crop_23.jpg	written for devs,incdude functional/ aonfundional regs
crop_img/git_and_github_intro_111_crop_24.jpg	 specific, dear, have technical de tails
crop_img/git_and_github_intro_111_crop_25.jpg	Ex:the user should be provided with failiti to define the type of externd file
crop_img/git_and_github_intro_111_crop_26.jpg	(customer wants?)
crop_img/git_and_github_intro_111_crop_27.jpg	Analyzing req: verification → validation → risk analysi
crop_img/git_and_github_intro_111_crop_28.jpg	(complete,portinent)
crop_img/git_and_github_intro_111_crop_29.jpg	(eror)
crop_img/git_and_github_intro_111_crop_30.jpg	) heg prioni tization:
crop_img/git_and_github_intro_111_crop_31.jpg	mandatory → nice to have → uelers
crop_img/git_intro_231_crop_0.jpg	) commit: Nare changes in the local repo sitogy
crop_img/git_intro_231_crop_1.jpg	) branch: a pointer to a snapshot of our changes
crop_img/git_intro_231_crop_2.jpg	.) checkout.
crop_img/git_intro_231_crop_3.jpg	checko ut A means we move to branch A
crop_img/git_intro_231_crop_4.jpg	)rebase : move our work
crop_img/git_intro_231_crop_5.jpg	from branch A into branch B
crop_img/git_intro_231_crop_6.jpg	in called rebasing A to B
crop_img/git_intro_231_crop_7.jpg	 command : git rebase b
crop_img/git_intro_231_crop_8.jpg	) head : the commit we just checkout
crop_img/git_intro_231_crop_9.jpg	detaching head: att ach head to a commit inrtead of a branch
crop_img/git_intro_231_crop_10.jpg	. A:move to the abovelpreviou) commit
crop_img/git_intro_231_crop_11.jpg	. 2 : move up a num ber of commits
crop_img/git_intro_231_crop_12.jpg	En :git checkout HEADN4
crop_img/git_intro_231_crop_13.jpg	.-8: re arigo a brancd to a commit
crop_img/git_intro_231_crop_14.jpg	Ex : git branch -& main HEAD8
crop_img/git_intro_231_crop_15.jpg	reset: reverses change by moving a branch ref fackwards in time
crop_img/git_intro_231_crop_16.jpg	) qit commit --amend
crop_img/git_intro_231_crop_17.jpg	:make slight modification
crop_img/git_intro_232_crop_0.jpg	 git tag :a tagged ommit cannot be changed
crop_img/git_intro_232_crop_1.jpg	Ex : git tag vi C1
crop_img/git_intro_232_crop_2.jpg	git describe : how many commits have yon done tince an tagged
crop_img/git_intro_232_crop_3.jpg	commit ( anchor)
crop_img/git_intro_232_crop_4.jpg	Ex  git describe c5
crop_img/git_intro_232_crop_5.jpg	.) ^a: di rect HEAD to another parent commit
crop_img/git_intro_232_crop_6.jpg	.A:“ first” porent commit
crop_img/git_intro_232_crop_7.jpg	Ex:git branch bng Work maina will create the bng Work
crop_img/git_intro_232_crop_8.jpg	branch at another commit
crop_img/git_intro_232_crop_9.jpg	GITHUB
crop_img/git_intro_232_crop_10.jpg	push : pubhisth to the remote gpostoy
crop_img/git_intro_232_crop_11.jpg	. How to oreale a brancdh on Git Hub?
crop_img/git_intro_232_crop_12.jpg	. Make the local branch in your computer
crop_img/git_intro_232_crop_13.jpg	Conmit
crop_img/git_intro_232_crop_14.jpg	the remote
crop_img/git_intro_232_crop_15.jpg	push it to “origin"
crop_img/git_intro_232_crop_16.jpg	7
crop_img/git_intro_232_crop_17.jpg	resp you doned
crop_img/git_intro_232_crop_18.jpg	from, usually it is the
crop_img/git_intro_232_crop_19.jpg	default
crop_img/git_intro_232_crop_20.jpg	main
crop_img/git_intro_232_crop_21.jpg	git push <remote-name><local-branc-name>:remote-branch-name>
crop_img/lecture_algorithm_160_crop_0.jpg	)Sonting
crop_img/lecture_algorithm_160_crop_1.jpg	Adaptive:i the algo rithm fater if some ementr ar already sorted
crop_img/lecture_algorithm_160_crop_2.jpg	In-place : space compbruty,how much mem at bast do youl ned
crop_img/lecture_algorithm_160_crop_3.jpg	to sort n-thingy→ n thing
crop_img/lecture_algorithm_160_crop_4.jpg	.If it wse o(1) extra memory → in -p lace
crop_img/lecture_algorithm_160_crop_5.jpg	. Stable : do itemx w/ kame vahue end up in rame relative onder
crop_img/lecture_algorithm_160_crop_6.jpg	2
crop_img/lecture_algorithm_160_crop_7.jpg	4 4 610 →table
crop_img/lecture_algorithm_160_crop_8.jpg	2
crop_img/lecture_algorithm_160_crop_9.jpg	人
crop_img/lecture_algorithm_160_crop_10.jpg	146 104
crop_img/lecture_algorithm_160_crop_11.jpg	9
crop_img/lecture_algorithm_160_crop_12.jpg	Ex
crop_img/lecture_algorithm_160_crop_13.jpg	V
crop_img/lecture_algorithm_160_crop_14.jpg	2
crop_img/lecture_algorithm_160_crop_15.jpg	1
crop_img/lecture_algorithm_160_crop_16.jpg	4610 not tabb
crop_img/lecture_algorithm_160_crop_17.jpg	/
crop_img/lecture_algorithm_160_crop_18.jpg	4
crop_img/lecture_algorithm_160_crop_19.jpg	)
crop_img/lecture_algorithm_160_crop_20.jpg	Bubb le Sogt.
crop_img/lecture_algorithm_160_crop_21.jpg	fer item: for each pait of item,if it out of order&wap
crop_img/lecture_algorithm_160_crop_22.jpg	.keef track of lart swap indn, the foMowiny iteraton only gos
crop_img/lecture_algorithm_160_crop_23.jpg	up to this pors
crop_img/lecture_algorithm_160_crop_24.jpg	. Run-tine : o(n2)
crop_img/lecture_algorithm_160_crop_25.jpg	. stabl , adagtive) and in-plac
crop_img/lecture_algorithm_160_crop_26.jpg	 Ins ortion Sott
crop_img/lecture_algorithm_160_crop_27.jpg	Sorted  NonNonted
crop_img/lecture_algorithm_160_crop_28.jpg	• At itor ation i:
crop_img/lecture_algorithm_160_crop_29.jpg	U↑
crop_img/lecture_algorithm_160_crop_30.jpg	awep swap
crop_img/lecture_algorithm_160_crop_31.jpg	·stable) Adaptivc) In-place ) 0(na)
crop_img/lecture_algorithm_161_crop_0.jpg	) Selection sogt : largest → last, 2nd-lorgest →and-to-lost)
crop_img/lecture_algorithm_161_crop_1.jpg	Stabl :X
crop_img/lecture_algorithm_161_crop_2.jpg	 Adaptive: X
crop_img/lecture_algorithm_161_crop_3.jpg	• Inplace : √
crop_img/lecture_algorithm_161_crop_4.jpg	N.te :take fewust actnal rw apr
crop_img/lecture_algorithm_161_crop_5.jpg	) Bubble sont : poortial adaptive
crop_img/lecture_algorithm_161_crop_6.jpg	worse
crop_img/lecture_algorithm_161_crop_7.jpg	√
crop_img/lecture_algorithm_161_crop_8.jpg	812 34567
crop_img/lecture_algorithm_161_crop_9.jpg	23456781
crop_img/lecture_algorithm_161_crop_10.jpg	Bubble Sort from lyft→ right
crop_img/lecture_algorithm_161_crop_11.jpg	) locktail shaker sont;
crop_img/lecture_algorithm_161_crop_12.jpg	onu
crop_img/lecture_algorithm_161_crop_13.jpg	Bubble sort from right → lyft one
crop_img/lecture_algorithm_161_crop_14.jpg	• still stopx ot no  waf
crop_img/lecture_algorithm_161_crop_15.jpg	last in diars on the lft and right ou the boundary for next
crop_img/lecture_algorithm_161_crop_16.jpg	itoration
crop_img/lecture_algorithm_161_crop_17.jpg	 Why ure Inrortion, Bubble ,ock tail Soort?
crop_img/lecture_algorithm_161_crop_18.jpg	s steble t in-place + adaptive
crop_img/lecture_algorithm_161_crop_19.jpg	.fastor for omall amounts of data
crop_img/lecture_algorithm_161_crop_20.jpg	• used innide
crop_img/lecture_algorithm_161_crop_21.jpg	of mou comglex sortk
crop_img/lecture_algorithm_161_crop_22.jpg	runtime
crop_img/lecture_algorithm_161_crop_23.jpg	Note :. Wor st is bubble sort
crop_img/lecture_algorithm_162_crop_0.jpg	selection sont does fewer swapk
crop_img/lecture_algorithm_162_crop_1.jpg	Insertion sort dor fewor comparer
crop_img/lecture_algorithm_162_crop_2.jpg	 can fix I item be faster?
crop_img/lecture_algorithm_162_crop_3.jpg	. add all itemx a heap : o(n)
crop_img/lecture_algorithm_162_crop_4.jpg	gepeated ly remove lorgert item:O(log n)
crop_img/lecture_algorithm_162_crop_5.jpg	o(n logn)
crop_img/lecture_algorithm_162_crop_6.jpg	X
crop_img/lecture_algorithm_162_crop_7.jpg	×
crop_img/lecture_algorithm_162_crop_8.jpg	Tn-Ilace , adaptive ) stable (if you swap oaly adjacent
crop_img/lecture_algorithm_162_crop_9.jpg	ldependr
crop_img/lecture_algorithm_162_crop_10.jpg	clementr:probably stable
crop_img/lecture_algorithm_162_crop_11.jpg	Awap further elements
crop_img/lecture_algorithm_162_crop_12.jpg	→prbebly urstable
crop_img/lecture_algorithm_162_crop_13.jpg	) Diside & (onquer
crop_img/lecture_algorithm_162_crop_14.jpg	) Menge Sort
crop_img/lecture_algorithm_162_crop_15.jpg	 High-bvel plan: plit data into small & lange
crop_img/lecture_algorithm_162_crop_16.jpg	How to choose pivot : many optionk
crop_img/lecture_algorithm_162_crop_17.jpg	how to dioide data (“ partition)
crop_img/lecture_algorithm_162_crop_18.jpg	——
crop_img/lecture_algorithm_162_crop_19.jpg	4- step plan
crop_img/lecture_algorithm_162_crop_20.jpg	pioot
crop_img/lecture_algorithm_162_crop_21.jpg	2
crop_img/lecture_algorithm_162_crop_22.jpg	Move pivot to index o
crop_img/lecture_algorithm_162_crop_23.jpg	3
crop_img/lecture_algorithm_162_crop_24.jpg	fartition data into (< pivot) and (>pivot)
crop_img/lecture_algorithm_162_crop_25.jpg	④
crop_img/lecture_algorithm_162_crop_26.jpg	AC→
crop_img/lecture_algorithm_162_crop_27.jpg	A[n-1]
crop_img/lecture_algorithm_162_crop_28.jpg	i
crop_img/lecture_algorithm_162_crop_29.jpg	j
crop_img/lecture_algorithm_163_crop_0.jpg	To find a num < pivot on the tüght
crop_img/lecture_algorithm_163_crop_1.jpg	and a num > pioot on the left
crop_img/lecture_algorithm_163_crop_2.jpg	 Swap them
crop_img/lecture_algorithm_163_crop_3.jpg	Stop when i> j
crop_img/lecture_algorithm_163_crop_4.jpg	5
crop_img/lecture_algorithm_163_crop_5.jpg	Retwin piool -to original 1o
crop_img/lecture_algorithm_163_crop_6.jpg	Do Quick Sont on
crop_img/lecture_algorithm_163_crop_7.jpg	left A and right A
crop_img/lecture_algorithm_163_crop_8.jpg	leg+4/piost/rightA
crop_img/lecture_algorithm_163_crop_9.jpg	Wotust runtime :O(n)→fioot = max/min
crop_img/lecture_algorithm_163_crop_10.jpg	Arg runtime : o(n logn)
crop_img/lecture_algorithm_163_crop_11.jpg	Stable
crop_img/lecture_algorithm_163_crop_12.jpg	Adaptive
crop_img/lecture_algorithm_163_crop_13.jpg	Inplace
crop_img/lecture_algorithm_163_crop_14.jpg	×
crop_img/lecture_algorithm_163_crop_15.jpg	X
crop_img/lecture_algorithm_163_crop_16.jpg	√ (don't use another
crop_img/lecture_algorithm_163_crop_17.jpg	Data stoueture)
crop_img/lecture_algorithm_163_crop_18.jpg	•pivot sthategis
crop_img/lecture_algorithm_163_crop_19.jpg	A[o]
crop_img/lecture_algorithm_163_crop_20.jpg	midde(An[0I, At2]，Ate)
crop_img/lecture_algorithm_163_crop_21.jpg	handom pivot
crop_img/lecture_algorithm_163_crop_22.jpg	Guaanteed good pioot:
crop_img/lecture_algorithm_163_crop_23.jpg	. Median-of- Mediank
crop_img/lecture_algorithm_163_crop_24.jpg	) Onick Select:
crop_img/lecture_algorithm_163_crop_25.jpg	Stable
crop_img/lecture_algorithm_163_crop_26.jpg	Adaptive
crop_img/lecture_algorithm_163_crop_27.jpg	In-place
crop_img/lecture_algorithm_163_crop_28.jpg	<
crop_img/lecture_algorithm_163_crop_29.jpg	√
crop_img/lecture_algorithm_163_crop_30.jpg	X
crop_img/lecture_algorithm_164_crop_0.jpg	) Radixsint:
crop_img/lecture_algorithm_164_crop_1.jpg	En:Sonting n digit ) sort by 1's place fisst
crop_img/lecture_algorithm_164_crop_2.jpg	1o'ks place slcond
crop_img/lecture_algorithm_164_crop_3.jpg	:
crop_img/lecture_algorithm_164_crop_4.jpg	. Sout by digit 's pox:
crop_img/lecture_algorithm_164_crop_5.jpg	.1o oftiork: o-g → geate lo queues to put 1 place numbor
crop_img/lecture_algorithm_164_crop_6.jpg	# loops=k
crop_img/lecture_algorithm_164_crop_7.jpg	. each loop put noumk into bucketr
crop_img/lecture_algorithm_164_crop_8.jpg	. get # outs from bucket o→ g
crop_img/lecture_algorithm_164_crop_9.jpg	0(kn)
crop_img/lecture_algorithm_164_crop_10.jpg	Runtime:
crop_img/lecture_algorithm_164_crop_11.jpg	Nite : given a sonrled ahr ⇒ stille o(kn)
crop_img/lecture_algorithm_164_crop_12.jpg	Apaptive ×
crop_img/lecture_algorithm_164_crop_13.jpg	Stable
crop_img/lecture_algorithm_164_crop_14.jpg	In-place X
crop_img/lecture_algorithm_164_crop_15.jpg	Tme runtime: o( kn+kB)
crop_img/lecture_algorithm_164_crop_16.jpg	C
crop_img/lecture_algorithm_164_crop_17.jpg	→.k loop
crop_img/lecture_algorithm_164_crop_18.jpg	.kloop
crop_img/lecture_algorithm_164_crop_19.jpg	.go through each bucket
crop_img/lecture_algorithm_164_crop_20.jpg	put n digits into
crop_img/lecture_algorithm_164_crop_21.jpg	to got digito out
crop_img/lecture_algorithm_164_crop_22.jpg	buckets
crop_img/lecture_algorithm_164_crop_23.jpg	fadtorn matchiny prob:
crop_img/lecture_algorithm_164_crop_24.jpg	input stfing 18 → length
crop_img/lecture_algorithm_164_crop_25.jpg	Iaput
crop_img/lecture_algorithm_164_crop_26.jpg	n
crop_img/lecture_algorithm_164_crop_27.jpg	m
crop_img/lecture_algorithm_164_crop_28.jpg	A contairkN
crop_img/lecture_algorithm_165_crop_0.jpg	false therwisl
crop_img/lecture_algorithm_165_crop_1.jpg	. Bhude fone : fon cach id in ks
crop_img/lecture_algorithm_165_crop_2.jpg	check if s is in there
crop_img/lecture_algorithm_165_crop_3.jpg	) KML: Go from lft → rig ht
crop_img/lecture_algorithm_165_crop_4.jpg	 Rabin-korp : Ue hashing to chck the whob patton at each inde
crop_img/lecture_algorithm_165_crop_5.jpg	If diffurent hash code ⇒ patt ern ir not here
crop_img/lecture_algorithm_165_crop_6.jpg	. harh (pattorun) takes o(m)
crop_img/lecture_algorithm_165_crop_7.jpg	→“soll"-able hash,i.e. given one hash code dtready
crop_img/lecture_algorithm_165_crop_8.jpg	computed, compute the Nexr one in o(1) time
crop_img/lecture_algorithm_165_crop_9.jpg	 new Harh = old hash -old Finst + new Last
crop_img/lecture_algorithm_165_crop_10.jpg	n-1
crop_img/lecture_algorithm_165_crop_11.jpg	n-2
crop_img/lecture_algorithm_165_crop_12.jpg	holling:(hash-oldfinst.)Bnw ast
crop_img/lecture_algorithm_165_crop_13.jpg	. Running time.
crop_img/lecture_algorithm_165_crop_14.jpg	o(m)
crop_img/lecture_algorithm_165_crop_15.jpg	hath of pattern
crop_img/lecture_algorithm_165_crop_16.jpg	rolling hash :o(n) times, o() ach
crop_img/lecture_algorithm_166_crop_0.jpg	compare matching-hasth patteouns (m)
crop_img/lecture_algorithm_166_crop_1.jpg	→0(m+n)
crop_img/lecture_algorithm_166_crop_2.jpg	 Wonst ase:A lot of matching-hath pattern
crop_img/lecture_algorithm_166_crop_3.jpg	Galil Rule:
crop_img/lecture_algorithm_166_crop_4.jpg	Ggaph Theotuy
crop_img/lecture_algorithm_166_crop_5.jpg	(in this clars)
crop_img/lecture_algorithm_166_crop_6.jpg	)Equal: G and a au equal if thy have the ame vrtir and edges
crop_img/lecture_algorithm_166_crop_7.jpg	,
crop_img/lecture_algorithm_166_crop_8.jpg	F. ito lated vorter
crop_img/lecture_algorithm_166_crop_9.jpg	) Isolated vortex:
crop_img/lecture_algorithm_166_crop_10.jpg	A
crop_img/lecture_algorithm_166_crop_11.jpg	①
crop_img/lecture_algorithm_166_crop_12.jpg	A。
crop_img/lecture_algorithm_166_crop_13.jpg	A
crop_img/lecture_algorithm_166_crop_14.jpg	) Undinected gnaph:
crop_img/lecture_algorithm_166_crop_15.jpg	A
crop_img/lecture_algorithm_166_crop_16.jpg	 Dinected graph:
crop_img/lecture_algorithm_166_crop_17.jpg	今。
crop_img/lecture_algorithm_166_crop_18.jpg	C
crop_img/lecture_algorithm_166_crop_19.jpg	B
crop_img/lecture_algorithm_166_crop_20.jpg	Simple ghaph: no relf loops & no repeated edges
crop_img/lecture_algorithm_166_crop_21.jpg	Simple
crop_img/lecture_algorithm_166_crop_22.jpg	not simple
crop_img/lecture_algorithm_166_crop_23.jpg	A
crop_img/lecture_algorithm_166_crop_24.jpg	B
crop_img/lecture_algorithm_166_crop_25.jpg	A
crop_img/lecture_algorithm_166_crop_26.jpg	B
crop_img/lecture_algorithm_166_crop_27.jpg	AB+BA
crop_img/lecture_algorithm_166_crop_28.jpg	→
crop_img/lecture_algorithm_166_crop_29.jpg	A
crop_img/lecture_algorithm_166_crop_30.jpg	B
crop_img/lecture_algorithm_167_crop_0.jpg	 Wigld edge:ge can havewight(tands forcxtdistance)
crop_img/lecture_algorithm_167_crop_1.jpg	a
crop_img/lecture_algorithm_167_crop_2.jpg	…
crop_img/lecture_algorithm_167_crop_3.jpg	A
crop_img/lecture_algorithm_167_crop_4.jpg	人
crop_img/lecture_algorithm_167_crop_5.jpg	3
crop_img/lecture_algorithm_167_crop_6.jpg	4
crop_img/lecture_algorithm_167_crop_7.jpg	,
crop_img/lecture_algorithm_167_crop_8.jpg	B
crop_img/lecture_algorithm_167_crop_9.jpg	C
crop_img/lecture_algorithm_167_crop_10.jpg	2
crop_img/lecture_algorithm_167_crop_11.jpg	thaph thaverkal:
crop_img/lecture_algorithm_167_crop_12.jpg	A
crop_img/lecture_algorithm_167_crop_13.jpg	B
crop_img/lecture_algorithm_167_crop_14.jpg	E
crop_img/lecture_algorithm_167_crop_15.jpg	 fath: equence of vorticer) where  vrtices next to each othr wre
crop_img/lecture_algorithm_167_crop_16.jpg	adjacent vortiwr
crop_img/lecture_algorithm_167_crop_17.jpg	. No tepeated vertices
crop_img/lecture_algorithm_167_crop_18.jpg	. No repeated eder
crop_img/lecture_algorithm_167_crop_19.jpg	Trail : can tupeat verticer but can't hefeat edges
crop_img/lecture_algorithm_167_crop_20.jpg	)Walk:
crop_img/lecture_algorithm_167_crop_21.jpg	can repeat verticer and edges
crop_img/lecture_algorithm_167_crop_22.jpg	) cycle:
crop_img/lecture_algorithm_167_crop_23.jpg	no re peated edger
crop_img/lecture_algorithm_167_crop_24.jpg	no tepead ed berticey except start =end
crop_img/lecture_algorithm_167_crop_25.jpg	 anmit:
crop_img/lecture_algorithm_167_crop_26.jpg	can au lat
crop_img/lecture_algorithm_167_crop_27.jpg	vertices
crop_img/lecture_algorithm_167_crop_28.jpg	can't repcat edges
crop_img/lecture_algorithm_167_crop_29.jpg	2 verticer are connected if Ia path that connectk them
crop_img/lecture_algorithm_167_crop_30.jpg	) Connected.
crop_img/lecture_algorithm_168_crop_0.jpg	一
crop_img/lecture_algorithm_168_crop_1.jpg	C
crop_img/lecture_algorithm_168_crop_2.jpg	&
crop_img/lecture_algorithm_168_crop_3.jpg	 Map<oorten,[adjacent verticer]>
crop_img/lecture_algorithm_168_crop_4.jpg	DFS
crop_img/lecture_algorithm_168_crop_5.jpg	0
crop_img/lecture_algorithm_168_crop_6.jpg	BFS
crop_img/lecture_algorithm_169_crop_0.jpg	) Dij kstna fail with negati ue edger
crop_img/lecture_algorithm_169_crop_1.jpg	Dist
crop_img/lecture_algorithm_169_crop_2.jpg	2
crop_img/lecture_algorithm_169_crop_3.jpg	A :0
crop_img/lecture_algorithm_169_crop_4.jpg	王
crop_img/lecture_algorithm_169_crop_5.jpg	U：13
crop_img/lecture_algorithm_169_crop_6.jpg	B
crop_img/lecture_algorithm_169_crop_7.jpg	g
crop_img/lecture_algorithm_169_crop_8.jpg	6
crop_img/lecture_algorithm_169_crop_9.jpg	B:6
crop_img/lecture_algorithm_169_crop_10.jpg	/3
crop_img/lecture_algorithm_169_crop_11.jpg	C.15
crop_img/lecture_algorithm_169_crop_12.jpg	10
crop_img/lecture_algorithm_169_crop_13.jpg	G
crop_img/lecture_algorithm_169_crop_14.jpg	4
crop_img/lecture_algorithm_169_crop_15.jpg	E :8
crop_img/lecture_algorithm_169_crop_16.jpg	A
crop_img/lecture_algorithm_169_crop_17.jpg	7
crop_img/lecture_algorithm_169_crop_18.jpg	4
crop_img/lecture_algorithm_169_crop_19.jpg	F
crop_img/lecture_algorithm_169_crop_20.jpg	C
crop_img/lecture_algorithm_169_crop_21.jpg	D:g
crop_img/lecture_algorithm_169_crop_22.jpg	2
crop_img/lecture_algorithm_169_crop_23.jpg	g
crop_img/lecture_algorithm_169_crop_24.jpg	g
crop_img/lecture_algorithm_169_crop_25.jpg	1
crop_img/lecture_algorithm_169_crop_26.jpg	G:10
crop_img/lecture_algorithm_169_crop_27.jpg	4
crop_img/lecture_algorithm_169_crop_28.jpg	D
crop_img/lecture_algorithm_169_crop_29.jpg	F：11
crop_img/lecture_algorithm_169_crop_30.jpg	1
crop_img/lecture_algorithm_169_crop_31.jpg	什
crop_img/lecture_algorithm_169_crop_32.jpg	10
crop_img/lecture_algorithm_169_crop_33.jpg	8
crop_img/lecture_algorithm_169_crop_34.jpg	15
crop_img/lecture_algorithm_169_crop_35.jpg	18
crop_img/lecture_algorithm_169_crop_36.jpg	7
crop_img/lecture_algorithm_169_crop_37.jpg	9
crop_img/lecture_algorithm_169_crop_38.jpg	14
crop_img/lecture_algorithm_169_crop_39.jpg	6
crop_img/lecture_algorithm_169_crop_40.jpg	14
crop_img/lecture_algorithm_169_crop_41.jpg	15
crop_img/lecture_algorithm_169_crop_42.jpg	13
crop_img/lecture_algorithm_169_crop_43.jpg	A
crop_img/lecture_algorithm_169_crop_44.jpg	8
crop_img/lecture_algorithm_169_crop_45.jpg	C
crop_img/lecture_algorithm_169_crop_46.jpg	8
crop_img/lecture_algorithm_169_crop_47.jpg	F
crop_img/lecture_algorithm_169_crop_48.jpg	G
crop_img/lecture_algorithm_169_crop_49.jpg	G
crop_img/lecture_algorithm_169_crop_50.jpg	E
crop_img/lecture_algorithm_169_crop_51.jpg	H
crop_img/lecture_algorithm_169_crop_52.jpg	C
crop_img/lecture_algorithm_169_crop_53.jpg	F
crop_img/lecture_algorithm_169_crop_54.jpg	H
crop_img/lecture_algorithm_169_crop_55.jpg	C
crop_img/lecture_algorithm_169_crop_56.jpg	H
crop_img/lecture_algorithm_169_crop_57.jpg	76
crop_img/lecture_algorithm_169_crop_58.jpg	2
crop_img/lecture_algorithm_169_crop_59.jpg	2
crop_img/lecture_algorithm_169_crop_60.jpg	一
crop_img/lecture_algorithm_169_crop_61.jpg	3
crop_img/lecture_algorithm_169_crop_62.jpg	5
crop_img/lecture_algorithm_169_crop_63.jpg	) Minimum Spanning Tre (MsT)
crop_img/lecture_algorithm_169_crop_64.jpg	1
crop_img/lecture_algorithm_169_crop_65.jpg	"greedyalgo:trying to graph the min cort edge whenever
crop_img/lecture_algorithm_169_crop_66.jpg	ponsible (Alno called lgim)
crop_img/lecture_algorithm_169_crop_67.jpg	goal: minimitl total edge cost
crop_img/lecture_algorithm_169_crop_68.jpg	plun: start menhee, track edge seen visited alwayk ra
crop_img/lecture_algorithm_169_crop_69.jpg	the cheapest one
crop_img/lecture_algorithm_169_crop_70.jpg	Kow do we create the nodek and edges ? Ure node and adjaont
crop_img/lecture_algorithm_169_crop_71.jpg	list
crop_img/lecture_algorithm_169_crop_72.jpg	.Blan: Use a heap ( kimi lar to Djkstha)
crop_img/lecture_algorithm_170_crop_0.jpg	Note : if an idge that con tainr 2 visited nodes
crop_img/lecture_algorithm_170_crop_1.jpg	→ pict that edge make a cycle
crop_img/lecture_algorithm_170_crop_2.jpg	 Kruskal :
crop_img/lecture_algorithm_170_crop_3.jpg	gredily choose the lig htert edge inthe entire ghaph
crop_img/lecture_algorithm_170_crop_4.jpg	that doesn't make a cycle
crop_img/lecture_algorithm_170_crop_5.jpg	.llan:
crop_img/lecture_algorithm_170_crop_6.jpg	①
crop_img/lecture_algorithm_170_crop_7.jpg	sont the edger choon the mallert ege in th yraph which
crop_img/lecture_algorithm_170_crop_8.jpg	duern't mahe a cycle
crop_img/lecture_algorithm_170_crop_9.jpg	2
crop_img/lecture_algorithm_170_crop_10.jpg	How to know when a cycle appeer?
crop_img/lecture_algorithm_170_crop_11.jpg	. Cannot wse the sthategy of frim
crop_img/lecture_algorithm_170_crop_12.jpg	.lable distinet cectad component ultid from choen
crop_img/lecture_algorithm_170_crop_13.jpg	edger with distinet namer
crop_img/lecture_algorithm_170_crop_14.jpg	Agter choose idye that connact a C component→ update
crop_img/lecture_algorithm_170_crop_15.jpg	label
crop_img/lecture_algorithm_170_crop_16.jpg	→Actually, thix can be done ong Union-Find data stucture
crop_img/lecture_algorithm_170_crop_17.jpg	.) Union -Find data struct wre :
crop_img/lecture_algorithm_170_crop_18.jpg	. find(x): ruturun the label ofx
crop_img/lecture_algorithm_170_crop_19.jpg	.union(x,y:update labels after adding (x,y)
crop_img/lecture_algorithm_170_crop_20.jpg	.runtime of find /union:
crop_img/lecture_algorithm_170_crop_21.jpg	Acker man function: a function thatgnows very fst
crop_img/lecture_algorithm_170_crop_22.jpg	.A(n) T fast
crop_img/lecture_algorithm_170_crop_23.jpg	A-^(n): invorse function of Acker mann func
crop_img/lecture_algorithm_170_crop_24.jpg	→T Mow
crop_img/lecture_data_structure_182_crop_0.jpg	)Time Complxity :# of umnlatio done based on the rize of input
crop_img/lecture_data_structure_182_crop_1.jpg	)Agorany s : A contigyowr block of memory
crop_img/lecture_data_structure_182_crop_2.jpg	no g ap
crop_img/lecture_data_structure_182_crop_3.jpg	. Drawbackr of aray:
crop_img/lecture_data_structure_182_crop_4.jpg	. size in fixed
crop_img/lecture_data_structure_182_crop_5.jpg	 lixt(AoT): An ordered o-alignd，contigon collection  data
crop_img/lecture_data_structure_182_crop_6.jpg	↓
crop_img/lecture_data_structure_182_crop_7.jpg	Astoht from
crop_img/lecture_data_structure_182_crop_8.jpg	no gaps
crop_img/lecture_data_structure_182_crop_9.jpg	0
crop_img/lecture_data_structure_182_crop_10.jpg	•Two standard
crop_img/lecture_data_structure_182_crop_11.jpg	imple mentationx f List:
crop_img/lecture_data_structure_182_crop_12.jpg	. Array List
crop_img/lecture_data_structure_182_crop_13.jpg	Linked List
crop_img/lecture_data_structure_182_crop_14.jpg	) Apray list
crop_img/lecture_data_structure_182_crop_15.jpg	Use an wrhay as an un der lying
crop_img/lecture_data_structure_182_crop_16.jpg	xtouctwe
crop_img/lecture_data_structure_182_crop_17.jpg	;
crop_img/lecture_data_structure_182_crop_18.jpg	• Add Back ()
crop_img/lecture_data_structure_182_crop_19.jpg	∴0(1)
crop_img/lecture_data_structure_182_crop_20.jpg	.If the un derlying array ir full → make the new tray with
crop_img/lecture_data_structure_182_crop_21.jpg	similar data but lorger cap aci ty:(n)
crop_img/lecture_data_structure_182_crop_22.jpg	We de note thix rituation ar o()*, where  =
crop_img/lecture_data_structure_182_crop_23.jpg	uL
crop_img/lecture_data_structure_182_crop_24.jpg	armogtized
crop_img/lecture_data_structure_182_crop_25.jpg	刀
crop_img/lecture_data_structure_182_crop_26.jpg	" average worst cose
crop_img/lecture_data_structure_182_crop_27.jpg	mostly fast, sometimer Mow
crop_img/lecture_data_structure_183_crop_0.jpg	adding back  timer amume the underying aa
crop_img/lecture_data_structure_183_crop_1.jpg	• Worst case
crop_img/lecture_data_structure_183_crop_2.jpg	of
crop_img/lecture_data_structure_183_crop_3.jpg	o(n)+(n-1)0(1)
crop_img/lecture_data_structure_183_crop_4.jpg	has hize n
crop_img/lecture_data_structure_183_crop_5.jpg	=0(1)
crop_img/lecture_data_structure_183_crop_6.jpg	n
crop_img/lecture_data_structure_183_crop_7.jpg	. Add Fhont (): O ( a)
crop_img/lecture_data_structure_183_crop_8.jpg	Add AtIndex l) : o(n) (the worst care inr that wser want
crop_img/lecture_data_structure_183_crop_9.jpg	t add front)
crop_img/lecture_data_structure_183_crop_10.jpg	.Remove Back ( : remove the item (change it to null)
crop_img/lecture_data_structure_183_crop_11.jpg	Nole : Extna work ir.kay if it ix o(1)
crop_img/lecture_data_structure_183_crop_12.jpg	 brefor Anray over Aqraylirt when!
crop_img/lecture_data_structure_183_crop_13.jpg	Data in fixed si te
crop_img/lecture_data_structure_183_crop_14.jpg	Want gaps
crop_img/lecture_data_structure_183_crop_15.jpg	save memoay
crop_img/lecture_data_structure_183_crop_16.jpg	) single linked list: each data ix ototred with a pointor to the
crop_img/lecture_data_structure_183_crop_17.jpg	next node
crop_img/lecture_data_structure_183_crop_18.jpg	Py: dar linked Node<T>
crop_img/lecture_data_structure_183_crop_19.jpg	Tdota
crop_img/lecture_data_structure_183_crop_20.jpg	Linked Node <T> neoct
crop_img/lecture_data_structure_183_crop_21.jpg	3
crop_img/lecture_data_structure_183_crop_22.jpg	das linked list <T> 
crop_img/lecture_data_structure_183_crop_23.jpg	LinkedN.de<T> head
crop_img/lecture_data_structure_183_crop_24.jpg	int nite
crop_img/lecture_data_structure_183_crop_25.jpg	3
crop_img/lecture_data_structure_184_crop_0.jpg	new Node = new linked Node (data)
crop_img/lecture_data_structure_184_crop_1.jpg	aor.next = new Node
crop_img/lecture_data_structure_184_crop_2.jpg	→0(n)
crop_img/lecture_data_structure_184_crop_3.jpg	. Add At Index (;)
crop_img/lecture_data_structure_184_crop_4.jpg	i_A
crop_img/lecture_data_structure_184_crop_5.jpg	i+
crop_img/lecture_data_structure_184_crop_6.jpg	7
crop_img/lecture_data_structure_184_crop_7.jpg	→X→
crop_img/lecture_data_structure_184_crop_8.jpg	□→□
crop_img/lecture_data_structure_184_crop_9.jpg	A.
crop_img/lecture_data_structure_184_crop_10.jpg	2,
crop_img/lecture_data_structure_184_crop_11.jpg	V
crop_img/lecture_data_structure_184_crop_12.jpg	D
crop_img/lecture_data_structure_184_crop_13.jpg	1
crop_img/lecture_data_structure_184_crop_14.jpg	. Remove Fiqust:
crop_img/lecture_data_structure_184_crop_15.jpg	head
crop_img/lecture_data_structure_184_crop_16.jpg	head
crop_img/lecture_data_structure_184_crop_17.jpg	→
crop_img/lecture_data_structure_184_crop_18.jpg	—
crop_img/lecture_data_structure_184_crop_19.jpg	口→
crop_img/lecture_data_structure_184_crop_20.jpg	D→
crop_img/lecture_data_structure_185_crop_0.jpg	↓
crop_img/lecture_data_structure_185_crop_1.jpg	wute? No if we are
crop_img/lecture_data_structure_185_crop_2.jpg	uning java
crop_img/lecture_data_structure_185_crop_3.jpg	becaue it has a garbae
crop_img/lecture_data_structure_185_crop_4.jpg	co lletor that take care
crop_img/lecture_data_structure_185_crop_5.jpg	o objeds that is no longer
crop_img/lecture_data_structure_185_crop_6.jpg	accmed by both dient & prlogrammer
crop_img/lecture_data_structure_185_crop_7.jpg	.Remove last:
crop_img/lecture_data_structure_185_crop_8.jpg	n→null
crop_img/lecture_data_structure_185_crop_9.jpg	→
crop_img/lecture_data_structure_185_crop_10.jpg	D
crop_img/lecture_data_structure_185_crop_11.jpg	→
crop_img/lecture_data_structure_185_crop_12.jpg	—
crop_img/lecture_data_structure_185_crop_13.jpg	set this to null
crop_img/lecture_data_structure_185_crop_14.jpg	→wfong
crop_img/lecture_data_structure_185_crop_15.jpg	and to last
crop_img/lecture_data_structure_185_crop_16.jpg	口
crop_img/lecture_data_structure_185_crop_17.jpg	)→ □→null
crop_img/lecture_data_structure_185_crop_18.jpg	口
crop_img/lecture_data_structure_185_crop_19.jpg	→
crop_img/lecture_data_structure_185_crop_20.jpg	□
crop_img/lecture_data_structure_185_crop_21.jpg	→
crop_img/lecture_data_structure_185_crop_22.jpg	→
crop_img/lecture_data_structure_185_crop_23.jpg	null
crop_img/lecture_data_structure_185_crop_24.jpg	How to accr the and to lart? cwr ,neet,neet ==null?
crop_img/lecture_data_structure_185_crop_25.jpg	ite =o→ Input valid ation
crop_img/lecture_data_structure_185_crop_26.jpg	·site =1→ Null l exception
crop_img/lecture_data_structure_185_crop_27.jpg	20(n)
crop_img/lecture_data_structure_185_crop_28.jpg	AddFnont temore +nont → fart
crop_img/lecture_data_structure_185_crop_29.jpg	Add Back , Remove Back  Mow
crop_img/lecture_data_structure_185_crop_30.jpg	→ We can add a “tail”
crop_img/lecture_data_structure_186_crop_0.jpg	int mze
crop_img/lecture_data_structure_186_crop_1.jpg	tai l
crop_img/lecture_data_structure_186_crop_2.jpg	□→→D
crop_img/lecture_data_structure_186_crop_3.jpg	1) Add back W toil
crop_img/lecture_data_structure_186_crop_4.jpg	tail. next = New Node(data)
crop_img/lecture_data_structure_186_crop_5.jpg	tail = tail next
crop_img/lecture_data_structure_186_crop_6.jpg	.) Removl back w/tril.
crop_img/lecture_data_structure_186_crop_7.jpg	head
crop_img/lecture_data_structure_186_crop_8.jpg	D→ □→□→. →→D→N
crop_img/lecture_data_structure_186_crop_9.jpg	need
crop_img/lecture_data_structure_186_crop_10.jpg	and
crop_img/lecture_data_structure_186_crop_11.jpg	lar Node
crop_img/lecture_data_structure_186_crop_12.jpg	 hast trarors
crop_img/lecture_data_structure_186_crop_13.jpg	the list agauh
crop_img/lecture_data_structure_186_crop_14.jpg	why don't we a pretail gointor?
crop_img/lecture_data_structure_186_crop_15.jpg	Aftor petail → null
crop_img/lecture_data_structure_186_crop_16.jpg	til → pretuil
crop_img/lecture_data_structure_186_crop_17.jpg	petuil→???
crop_img/lecture_data_structure_186_crop_18.jpg	boroken
crop_img/lecture_data_structure_186_crop_19.jpg	) Mow to step backwardt to the previows node
crop_img/lecture_data_structure_186_crop_20.jpg	) Doubly-Linked lis : each node con tainx ref ererenas to bo th
crop_img/lecture_data_structure_186_crop_21.jpg	the next and pre viows node
crop_img/lecture_data_structure_187_crop_0.jpg	.)Remove At Index:
crop_img/lecture_data_structure_187_crop_1.jpg	2
crop_img/lecture_data_structure_187_crop_2.jpg	D
crop_img/lecture_data_structure_187_crop_3.jpg	今
crop_img/lecture_data_structure_187_crop_4.jpg	K
crop_img/lecture_data_structure_187_crop_5.jpg	GC collectr
crop_img/lecture_data_structure_187_crop_6.jpg	.)Why
crop_img/lecture_data_structure_187_crop_7.jpg	prfer sll ove Dl:
crop_img/lecture_data_structure_187_crop_8.jpg	.OlL uses more memory
crop_img/lecture_data_structure_187_crop_9.jpg	. can hold more noder in cache
crop_img/lecture_data_structure_187_crop_10.jpg	. ler comg hicated code
crop_img/lecture_data_structure_187_crop_11.jpg	) Cincular slL:
crop_img/lecture_data_structure_187_crop_12.jpg	→ □→→D
crop_img/lecture_data_structure_187_crop_13.jpg	兴
crop_img/lecture_data_structure_187_crop_14.jpg	90①
crop_img/lecture_data_structure_187_crop_15.jpg	. Add Fhront:
crop_img/lecture_data_structure_187_crop_16.jpg	→0-
crop_img/lecture_data_structure_187_crop_17.jpg	→. .,→□
crop_img/lecture_data_structure_187_crop_18.jpg	2
crop_img/lecture_data_structure_188_crop_0.jpg	. Add Back:
crop_img/lecture_data_structure_188_crop_1.jpg	① add Front (data)
crop_img/lecture_data_structure_188_crop_2.jpg	 move Front To back ()
crop_img/lecture_data_structure_188_crop_3.jpg	②
crop_img/lecture_data_structure_188_crop_4.jpg	had
crop_img/lecture_data_structure_188_crop_5.jpg	had=head. next
crop_img/lecture_data_structure_188_crop_6.jpg	new
crop_img/lecture_data_structure_188_crop_7.jpg	→□→.→D
crop_img/lecture_data_structure_188_crop_8.jpg	①
crop_img/lecture_data_structure_188_crop_9.jpg	. Remo veFront:
crop_img/lecture_data_structure_188_crop_10.jpg	head
crop_img/lecture_data_structure_188_crop_11.jpg	gone
crop_img/lecture_data_structure_188_crop_12.jpg	→⑥→D→.→D
crop_img/lecture_data_structure_188_crop_13.jpg	head.data= head. next, dada
crop_img/lecture_data_structure_188_crop_14.jpg	head, nent = head, net . nut
crop_img/lecture_data_structure_188_crop_15.jpg	Not worked fon csll with I node
crop_img/lecture_data_structure_188_crop_16.jpg	→ttaate, stop at arr .next. next = had
crop_img/lecture_data_structure_189_crop_0.jpg	u
crop_img/lecture_data_structure_189_crop_1.jpg	. Reuovion:
crop_img/lecture_data_structure_189_crop_2.jpg	ptr rein forament
crop_img/lecture_data_structure_189_crop_3.jpg	- lach node deter mines whether it
crop_img/lecture_data_structure_189_crop_4.jpg	hemains in the list
crop_img/lecture_data_structure_189_crop_5.jpg	. Remove Even :
crop_img/lecture_data_structure_189_crop_6.jpg	1→2→3→4→7→g
crop_img/lecture_data_structure_189_crop_7.jpg	1→3→ →g
crop_img/lecture_data_structure_189_crop_8.jpg	a node
crop_img/lecture_data_structure_189_crop_9.jpg	pint mme where else
crop_img/lecture_data_structure_189_crop_10.jpg	E2c ef running
crop_img/lecture_data_structure_189_crop_11.jpg	1→4→7→6→2→8→3→ null
crop_img/lecture_data_structure_189_crop_12.jpg	⇒
crop_img/lecture_data_structure_189_crop_13.jpg	1→7→3
crop_img/lecture_data_structure_189_crop_14.jpg	The method Revive Helper Mhould rturn the node that a node thould
crop_img/lecture_data_structure_189_crop_15.jpg	point to
crop_img/lecture_data_structure_189_crop_16.jpg	Dioide:
crop_img/lecture_data_structure_189_crop_17.jpg	T(n)=T(n-1)
crop_img/lecture_data_structure_189_crop_18.jpg	Conquee.
crop_img/lecture_data_structure_189_crop_19.jpg	w .nπt
crop_img/lecture_data_structure_189_crop_20.jpg	) lutle:
crop_img/lecture_data_structure_189_crop_21.jpg	oney removeladd from top
crop_img/lecture_data_structure_189_crop_22.jpg	6
crop_img/lecture_data_structure_189_crop_23.jpg	60
crop_img/lecture_data_structure_189_crop_24.jpg	) Stack
crop_img/lecture_data_structure_189_crop_25.jpg	1
crop_img/lecture_data_structure_189_crop_26.jpg	0
crop_img/lecture_data_structure_189_crop_27.jpg	0
crop_img/lecture_data_structure_189_crop_28.jpg	0
crop_img/lecture_data_structure_189_crop_29.jpg	力
crop_img/lecture_data_structure_190_crop_0.jpg	Alwayx he move the most reently added "new est dat
crop_img/lecture_data_structure_190_crop_1.jpg	.The data ot the bottom stay there the longest
crop_img/lecture_data_structure_190_crop_2.jpg	_
crop_img/lecture_data_structure_190_crop_3.jpg	(Last In First Out - LIFo)
crop_img/lecture_data_structure_190_crop_4.jpg	.Ex：
crop_img/lecture_data_structure_190_crop_5.jpg	Undo/ Redo
crop_img/lecture_data_structure_190_crop_6.jpg	undo 1
crop_img/lecture_data_structure_190_crop_7.jpg	J
crop_img/lecture_data_structure_190_crop_8.jpg	e
crop_img/lecture_data_structure_190_crop_9.jpg	undoa
crop_img/lecture_data_structure_190_crop_10.jpg	@
crop_img/lecture_data_structure_190_crop_11.jpg	8
crop_img/lecture_data_structure_190_crop_12.jpg	C
crop_img/lecture_data_structure_190_crop_13.jpg	a
crop_img/lecture_data_structure_190_crop_14.jpg	し
crop_img/lecture_data_structure_190_crop_15.jpg	e
crop_img/lecture_data_structure_190_crop_16.jpg	a
crop_img/lecture_data_structure_190_crop_17.jpg	Re do
crop_img/lecture_data_structure_190_crop_18.jpg	Undo
crop_img/lecture_data_structure_190_crop_19.jpg	)Behavion:
crop_img/lecture_data_structure_190_crop_20.jpg	add Top = push ()
crop_img/lecture_data_structure_190_crop_21.jpg	No add Bttom
crop_img/lecture_data_structure_190_crop_22.jpg	removeTop=pop ()
crop_img/lecture_data_structure_190_crop_23.jpg	remove bottom
crop_img/lecture_data_structure_190_crop_24.jpg	got Top = peck ()
crop_img/lecture_data_structure_190_crop_25.jpg	. Agray Stack
crop_img/lecture_data_structure_190_crop_26.jpg	. Linked Stack
crop_img/lecture_data_structure_190_crop_27.jpg	.) Linhed Srack : uske Linkedlint
crop_img/lecture_data_structure_190_crop_28.jpg	front
crop_img/lecture_data_structure_190_crop_29.jpg	1
crop_img/lecture_data_structure_190_crop_30.jpg	. top= front
crop_img/lecture_data_structure_190_crop_31.jpg	back
crop_img/lecture_data_structure_190_crop_32.jpg	0()
crop_img/lecture_data_structure_190_crop_33.jpg	push =add Front
crop_img/lecture_data_structure_190_crop_34.jpg	pop= remauc Front o(1)
crop_img/lecture_data_structure_190_crop_35.jpg	Implmentation for linked stack i the same with Linked Lit
crop_img/lecture_data_structure_191_crop_0.jpg	bach
crop_img/lecture_data_structure_191_crop_1.jpg	.) Agaay stack: use A qaay Lirt
crop_img/lecture_data_structure_191_crop_2.jpg	push = add Back
crop_img/lecture_data_structure_191_crop_3.jpg	. top = back
crop_img/lecture_data_structure_191_crop_4.jpg	frnt
crop_img/lecture_data_structure_191_crop_5.jpg	二
crop_img/lecture_data_structure_191_crop_6.jpg	S
crop_img/lecture_data_structure_191_crop_7.jpg	removc Beck
crop_img/lecture_data_structure_191_crop_8.jpg	 rop =
crop_img/lecture_data_structure_191_crop_9.jpg	 lroblem & stack: don't have removel add AtIndex
crop_img/lecture_data_structure_191_crop_10.jpg	.If don't need thore ) then choom Stack
crop_img/lecture_data_structure_191_crop_11.jpg	A dd To back = enquene
crop_img/lecture_data_structure_191_crop_12.jpg	No ddd/remove
crop_img/lecture_data_structure_191_crop_13.jpg	) oueue
crop_img/lecture_data_structure_191_crop_14.jpg	→
crop_img/lecture_data_structure_191_crop_15.jpg	→
crop_img/lecture_data_structure_191_crop_16.jpg	Re move From Front=dequene
crop_img/lecture_data_structure_191_crop_17.jpg	：
crop_img/lecture_data_structure_191_crop_18.jpg	AtIndere
crop_img/lecture_data_structure_191_crop_19.jpg	bak
crop_img/lecture_data_structure_191_crop_20.jpg	front
crop_img/lecture_data_structure_191_crop_21.jpg	·Linked aueue: try using a hinked lirt
crop_img/lecture_data_structure_191_crop_22.jpg	inqueue = add Front
crop_img/lecture_data_structure_191_crop_23.jpg	. add To Front
crop_img/lecture_data_structure_191_crop_24.jpg	dequne = gemove Bad (hard)
crop_img/lecture_data_structure_191_crop_25.jpg	a
crop_img/lecture_data_structure_191_crop_26.jpg	Y
crop_img/lecture_data_structure_191_crop_27.jpg	0(1) →needtuil
crop_img/lecture_data_structure_191_crop_28.jpg	enquene = add bach
crop_img/lecture_data_structure_191_crop_29.jpg	add T。 Bac
crop_img/lecture_data_structure_191_crop_30.jpg	1
crop_img/lecture_data_structure_191_crop_31.jpg	dequem = remove Front o (1)
crop_img/lecture_data_structure_191_crop_32.jpg	.Apay ewme
crop_img/lecture_data_structure_191_crop_33.jpg	enquene = add To Front o(n)
crop_img/lecture_data_structure_191_crop_34.jpg	add To Front
crop_img/lecture_data_structure_191_crop_35.jpg	⇒
crop_img/lecture_data_structure_191_crop_36.jpg	deque
crop_img/lecture_data_structure_191_crop_37.jpg	= nemove From Back o(i)
crop_img/lecture_data_structure_191_crop_38.jpg	水
crop_img/lecture_data_structure_191_crop_39.jpg	. add To back ⇒)
crop_img/lecture_data_structure_191_crop_40.jpg	eng uene = add to hach 0(1)
crop_img/lecture_data_structure_191_crop_41.jpg	I dequne = re move Front o (n)
crop_img/lecture_data_structure_191_crop_42.jpg	⇒ Bad  Cannct we Aqraylist
crop_img/lecture_data_structure_192_crop_0.jpg	 Ciqular Arraycontigwodont need to be O-aligned bt
crop_img/lecture_data_structure_192_crop_1.jpg	murt keep track of index
crop_img/lecture_data_structure_192_crop_2.jpg	4
crop_img/lecture_data_structure_192_crop_3.jpg	front"
crop_img/lecture_data_structure_192_crop_4.jpg	front
crop_img/lecture_data_structure_192_crop_5.jpg	(front + id)%。 len
crop_img/lecture_data_structure_192_crop_6.jpg	1ag
crop_img/lecture_data_structure_192_crop_7.jpg	3
crop_img/lecture_data_structure_192_crop_8.jpg	4
crop_img/lecture_data_structure_192_crop_9.jpg	2
crop_img/lecture_data_structure_192_crop_10.jpg	1
crop_img/lecture_data_structure_192_crop_11.jpg	6
crop_img/lecture_data_structure_192_crop_12.jpg	q0size ()→ a|bcldlel
crop_img/lecture_data_structure_192_crop_13.jpg	.unqueue ()=addback(ront+ site)% len(backA))
crop_img/lecture_data_structure_192_crop_14.jpg	2
crop_img/lecture_data_structure_192_crop_15.jpg	ffa{
crop_img/lecture_data_structure_192_crop_16.jpg	.de queue () = remove Front ()
crop_img/lecture_data_structure_192_crop_17.jpg	|e||x|b|c|d→el(b|c|d
crop_img/lecture_data_structure_192_crop_18.jpg	 Deyues ( Donble Ended Queue)
crop_img/lecture_data_structure_192_crop_19.jpg	add faont
crop_img/lecture_data_structure_192_crop_20.jpg	add Bac
crop_img/lecture_data_structure_192_crop_21.jpg	5
crop_img/lecture_data_structure_192_crop_22.jpg	Rem back
crop_img/lecture_data_structure_192_crop_23.jpg	rem Faont
crop_img/lecture_data_structure_192_crop_24.jpg	1
crop_img/lecture_data_structure_192_crop_25.jpg	taiy
crop_img/lecture_data_structure_192_crop_26.jpg	deque
crop_img/lecture_data_structure_192_crop_27.jpg	excalatog:
crop_img/lecture_data_structure_192_crop_28.jpg	queue
crop_img/lecture_data_structure_192_crop_29.jpg	. elavator: 8tack
crop_img/lecture_data_structure_192_crop_30.jpg	) Linked peque:
crop_img/lecture_data_structure_192_crop_31.jpg	. LinhedStack: sLL
crop_img/lecture_data_structure_192_crop_32.jpg	. Linked Quue : SlL W/ tail, csLh
crop_img/lecture_data_structure_192_crop_33.jpg	. Linked De que : OLL
crop_img/lecture_data_structure_192_crop_34.jpg	↓
crop_img/lecture_data_structure_192_crop_35.jpg	make remBack() o() too
crop_img/lecture_data_structure_193_crop_0.jpg	 Linked Deque is DlL without add Index () & rem Index )
crop_img/lecture_data_structure_193_crop_1.jpg	) Agray Deque :
crop_img/lecture_data_structure_193_crop_2.jpg	. Array Stack
crop_img/lecture_data_structure_193_crop_3.jpg	aoray List
crop_img/lecture_data_structure_193_crop_4.jpg	:
crop_img/lecture_data_structure_193_crop_5.jpg	circular array
crop_img/lecture_data_structure_193_crop_6.jpg	Agtray Qnene:
crop_img/lecture_data_structure_193_crop_7.jpg	taray leque:
crop_img/lecture_data_structure_193_crop_8.jpg	circular day
crop_img/lecture_data_structure_193_crop_9.jpg	add Back ()
crop_img/lecture_data_structure_193_crop_10.jpg	from
crop_img/lecture_data_structure_193_crop_11.jpg	Lin ked Queue
crop_img/lecture_data_structure_193_crop_12.jpg	Rem Fhont ()
crop_img/lecture_data_structure_193_crop_13.jpg	add Front () :
crop_img/lecture_data_structure_193_crop_14.jpg	ff{{}
crop_img/lecture_data_structure_193_crop_15.jpg	el
crop_img/lecture_data_structure_193_crop_16.jpg	a（bcld
crop_img/lecture_data_structure_193_crop_17.jpg	l
crop_img/lecture_data_structure_193_crop_18.jpg	e
crop_img/lecture_data_structure_193_crop_19.jpg	ablcld
crop_img/lecture_data_structure_193_crop_20.jpg	2
crop_img/lecture_data_structure_193_crop_21.jpg	a
crop_img/lecture_data_structure_193_crop_22.jpg	\
crop_img/lecture_data_structure_193_crop_23.jpg	8
crop_img/lecture_data_structure_193_crop_24.jpg	.Note:
crop_img/lecture_data_structure_193_crop_25.jpg	ae|c|d|e|
crop_img/lecture_data_structure_193_crop_26.jpg	-1
crop_img/lecture_data_structure_193_crop_27.jpg	eon
crop_img/lecture_data_structure_193_crop_28.jpg	Move f to front in CAsr:
crop_img/lecture_data_structure_193_crop_29.jpg	8=(f-1)%lben(back+ππ)
crop_img/lecture_data_structure_193_crop_30.jpg	Lroblem:"l in jave ix not mod，it& gemainder
crop_img/lecture_data_structure_193_crop_31.jpg	Sol:
crop_img/lecture_data_structure_193_crop_32.jpg	f=f-1$
crop_img/lecture_data_structure_193_crop_33.jpg	i(8==-1)= len(back ta)-1
crop_img/lecture_data_structure_193_crop_34.jpg	. qembach () :
crop_img/lecture_data_structure_194_crop_0.jpg	2
crop_img/lecture_data_structure_194_crop_1.jpg	f
crop_img/lecture_data_structure_194_crop_2.jpg	f
crop_img/lecture_data_structure_194_crop_3.jpg	|el|x|b|c|d→[e|
crop_img/lecture_data_structure_194_crop_4.jpg	(blcld
crop_img/lecture_data_structure_194_crop_5.jpg	1
crop_img/lecture_data_structure_194_crop_6.jpg	f=（f+1)l0 ben(back+πn)
crop_img/lecture_data_structure_194_crop_7.jpg	V
crop_img/lecture_data_structure_194_crop_8.jpg	20→no pro blem
crop_img/lecture_data_structure_194_crop_9.jpg	Why don't use CAor instead  AraList?
crop_img/lecture_data_structure_194_crop_10.jpg	Doing mod is more ex pensive than just t/-
crop_img/lecture_data_structure_194_crop_11.jpg	)Tree: nodes conmeated by edges where
crop_img/lecture_data_structure_194_crop_12.jpg	parent
crop_img/lecture_data_structure_194_crop_13.jpg	0
crop_img/lecture_data_structure_194_crop_14.jpg	→0
crop_img/lecture_data_structure_194_crop_15.jpg	child
crop_img/lecture_data_structure_194_crop_16.jpg	A node can have any # of children
crop_img/lecture_data_structure_194_crop_17.jpg	can only have o onr I parent
crop_img/lecture_data_structure_194_crop_18.jpg	Exactly
crop_img/lecture_data_structure_194_crop_19.jpg	I node with o parent
crop_img/lecture_data_structure_194_crop_20.jpg	No cy cles
crop_img/lecture_data_structure_194_crop_21.jpg	) leag
crop_img/lecture_data_structure_194_crop_22.jpg	. Node that has o chileren
crop_img/lecture_data_structure_194_crop_23.jpg	Internal node : node that is not a bas
crop_img/lecture_data_structure_194_crop_24.jpg	g
crop_img/lecture_data_structure_194_crop_25.jpg	A
crop_img/lecture_data_structure_194_crop_26.jpg	A)B wre the anestons of C
crop_img/lecture_data_structure_194_crop_27.jpg	.
crop_img/lecture_data_structure_194_crop_28.jpg	descendants of
crop_img/lecture_data_structure_194_crop_29.jpg	B)C—
crop_img/lecture_data_structure_194_crop_30.jpg	C)0 are xi blings
crop_img/lecture_data_structure_194_crop_31.jpg	depth of c is a ) height of A ix 2
crop_img/lecture_data_structure_195_crop_0.jpg	) Subt4
crop_img/lecture_data_structure_195_crop_1.jpg	) lep th
crop_img/lecture_data_structure_195_crop_2.jpg	dep th of parrent +1
crop_img/lecture_data_structure_195_crop_3.jpg	) Height : max (height r of kids)+1
crop_img/lecture_data_structure_195_crop_4.jpg	γ
crop_img/lecture_data_structure_195_crop_5.jpg	· Full : BT ins full if each rode haas exaetly o or a kids
crop_img/lecture_data_structure_195_crop_6.jpg	0
crop_img/lecture_data_structure_195_crop_7.jpg	O
crop_img/lecture_data_structure_195_crop_8.jpg	. Complete : BT is compbte if
crop_img/lecture_data_structure_195_crop_9.jpg	lowert
crop_img/lecture_data_structure_195_crop_10.jpg	depth
crop_img/lecture_data_structure_195_crop_11.jpg	①Each depth of the tree except the lo west must have maximum
crop_img/lecture_data_structure_195_crop_12.jpg	# noder
crop_img/lecture_data_structure_195_crop_13.jpg	2
crop_img/lecture_data_structure_195_crop_14.jpg	lowert dep th must be fi lhed f aom lef t→ gight
crop_img/lecture_data_structure_195_crop_15.jpg	→For eadn thre ix exactly one shape a complete tree has
crop_img/lecture_data_structure_195_crop_16.jpg	balanced: A node is balanced if its children have huight that dif fer
crop_img/lecture_data_structure_195_crop_17.jpg	?
crop_img/lecture_data_structure_195_crop_18.jpg	by oor 1. A tre ix balanced if cvery node ir balan ed
crop_img/lecture_data_structure_195_crop_19.jpg	.The heighit of hull node is -1
crop_img/lecture_data_structure_195_crop_20.jpg	.leaf noder are dways balanced
crop_img/lecture_data_structure_195_crop_21.jpg	full but not balanced
crop_img/lecture_data_structure_195_crop_22.jpg	complete but nol fuil
crop_img/lecture_data_structure_195_crop_23.jpg	balanad but not ωmplete
crop_img/lecture_data_structure_195_crop_24.jpg	0
crop_img/lecture_data_structure_195_crop_25.jpg	80
crop_img/lecture_data_structure_195_crop_26.jpg	2
crop_img/lecture_data_structure_195_crop_27.jpg	 Heap: ca data st ruct ure that storer data in a tree-based stouct wre
crop_img/lecture_data_structure_195_crop_28.jpg	) Binory Search Tree : A binary tree where :
crop_img/lecture_data_structure_197_crop_0.jpg	. Add (): we add to leaf
crop_img/lecture_data_structure_197_crop_1.jpg	x
crop_img/lecture_data_structure_197_crop_2.jpg	goes down
crop_img/lecture_data_structure_197_crop_3.jpg	where v should be
crop_img/lecture_data_structure_197_crop_4.jpg	public void Add(T data)
crop_img/lecture_data_structure_197_crop_5.jpg	(c+n node √epccs cr
crop_img/lecture_data_structure_197_crop_6.jpg	root = addH(root, data)
crop_img/lecture_data_structure_197_crop_7.jpg	tr reinforcement
crop_img/lecture_data_structure_197_crop_8.jpg	private Node addH(Node cuir,T data):
crop_img/lecture_data_structure_197_crop_9.jpg	if curr==null:
crop_img/lecture_data_structure_197_crop_10.jpg	Node newNode =new Node(data)
crop_img/lecture_data_structure_197_crop_11.jpg	→replnle noll w nan Node
crop_img/lecture_data_structure_197_crop_12.jpg	return newNode
crop_img/lecture_data_structure_197_crop_13.jpg	if curr.data == data:
crop_img/lecture_data_structure_197_crop_14.jpg	//do nothing,data already in tree
crop_img/lecture_data_structure_197_crop_15.jpg	if curr.data< data:
crop_img/lecture_data_structure_197_crop_16.jpg	//recurse right
crop_img/lecture_data_structure_197_crop_17.jpg	curr.right=addH(curr.right,data)
crop_img/lecture_data_structure_197_crop_18.jpg	if curr.data>data:
crop_img/lecture_data_structure_197_crop_19.jpg	//recurse left
crop_img/lecture_data_structure_197_crop_20.jpg	curr.left=addH(curr.left,data)
crop_img/lecture_data_structure_197_crop_21.jpg	return curr
crop_img/lecture_data_structure_197_crop_22.jpg	. Remove () :
crop_img/lecture_data_structure_197_crop_23.jpg	• If no children : simi lar to add
crop_img/lecture_data_structure_197_crop_24.jpg	Has 1 child : remove 55
crop_img/lecture_data_structure_197_crop_25.jpg	34
crop_img/lecture_data_structure_197_crop_26.jpg	Solution : connedt 34 to 76
crop_img/lecture_data_structure_197_crop_27.jpg	7
crop_img/lecture_data_structure_197_crop_28.jpg	55
crop_img/lecture_data_structure_197_crop_29.jpg	22
crop_img/lecture_data_structure_197_crop_30.jpg	/
crop_img/lecture_data_structure_197_crop_31.jpg	18
crop_img/lecture_data_structure_197_crop_32.jpg	31
crop_img/lecture_data_structure_197_crop_33.jpg	76
crop_img/lecture_data_structure_197_crop_34.jpg	. Hox 2 child ren :
crop_img/lecture_data_structure_197_crop_35.jpg	Succersor of x ix the smellest dota item in tree>
crop_img/lecture_data_structure_197_crop_36.jpg	. Predecersor of x is the largest
crop_img/lecture_data_structure_197_crop_37.jpg	∠x
crop_img/lecture_data_structure_197_crop_38.jpg	. Finding
crop_img/lecture_data_structure_197_crop_39.jpg	Auccersor : I right  left until goes to the end
crop_img/lecture_data_structure_197_crop_40.jpg	pre decesor; 1 left → right
crop_img/lecture_data_structure_198_crop_0.jpg	When removing a node with a dhild ren, the node donn't
crop_img/lecture_data_structure_198_crop_1.jpg	go away but replaced wit pre decersor/ succor s data.
crop_img/lecture_data_structure_198_crop_2.jpg	The pre decusot/ succersor that we ured will be romoved
crop_img/lecture_data_structure_198_crop_3.jpg	(removing with 1 /o child this trme)
crop_img/lecture_data_structure_198_crop_4.jpg	.froblm with coding in Java regarding ptr reinforement
crop_img/lecture_data_structure_198_crop_5.jpg	remoue
crop_img/lecture_data_structure_198_crop_6.jpg	1.remove x
crop_img/lecture_data_structure_198_crop_7.jpg	2.what it at?
crop_img/lecture_data_structure_198_crop_8.jpg	return2
crop_img/lecture_data_structure_198_crop_9.jpg	thingr →hard to
crop_img/lecture_data_structure_198_crop_10.jpg	3. whet was removed
crop_img/lecture_data_structure_198_crop_11.jpg	do in Java
crop_img/lecture_data_structure_198_crop_12.jpg	↓
crop_img/lecture_data_structure_198_crop_13.jpg	shre in a dummy node
crop_img/lecture_data_structure_198_crop_14.jpg	) lriority oneue:each item has some asig ned priority
crop_img/lecture_data_structure_198_crop_15.jpg	enquene ()
crop_img/lecture_data_structure_198_crop_16.jpg	dequue () → removes highest prio datd
crop_img/lecture_data_structure_198_crop_17.jpg	●
crop_img/lecture_data_structure_198_crop_18.jpg	enqune(14)
crop_img/lecture_data_structure_198_crop_19.jpg	V
crop_img/lecture_data_structure_198_crop_20.jpg	H
crop_img/lecture_data_structure_198_crop_21.jpg	$7\fr1
crop_img/lecture_data_structure_198_crop_22.jpg	C5
crop_img/lecture_data_structure_198_crop_23.jpg	→
crop_img/lecture_data_structure_198_crop_24.jpg	1552
crop_img/lecture_data_structure_198_crop_25.jpg	7
crop_img/lecture_data_structure_198_crop_26.jpg	wing leap
crop_img/lecture_data_structure_198_crop_27.jpg	wing BST
crop_img/lecture_data_structure_198_crop_28.jpg	) Heap :
crop_img/lecture_data_structure_198_crop_29.jpg	d condi tons
crop_img/lecture_data_structure_199_crop_0.jpg	3
crop_img/lecture_data_structure_199_crop_1.jpg	9
crop_img/lecture_data_structure_199_crop_2.jpg	empty
crop_img/lecture_data_structure_199_crop_3.jpg	4
crop_img/lecture_data_structure_199_crop_4.jpg	9
crop_img/lecture_data_structure_199_crop_5.jpg	o
crop_img/lecture_data_structure_199_crop_6.jpg	kids
crop_img/lecture_data_structure_199_crop_7.jpg	data at indere i. 2i,dit1
crop_img/lecture_data_structure_199_crop_8.jpg	porent
crop_img/lecture_data_structure_199_crop_9.jpg	. AddC):
crop_img/lecture_data_structure_199_crop_10.jpg	• Maint ain comp liteners
crop_img/lecture_data_structure_199_crop_11.jpg	. Fix onder
crop_img/lecture_data_structure_199_crop_12.jpg	( U,Heap)
crop_img/lecture_data_structure_199_crop_13.jpg	in good relation Mip w parent
crop_img/lecture_data_structure_199_crop_14.jpg	terminating condi tion
crop_img/lecture_data_structure_199_crop_15.jpg	at root
crop_img/lecture_data_structure_199_crop_16.jpg	Runtime) :0(log (n))
crop_img/lecture_data_structure_200_crop_0.jpg	.
crop_img/lecture_data_structure_200_crop_1.jpg	Max heap
crop_img/lecture_data_structure_200_crop_2.jpg	highest order (rot)
crop_img/lecture_data_structure_200_crop_3.jpg	Clowest order in this
crop_img/lecture_data_structure_200_crop_4.jpg	(a leaf)
crop_img/lecture_data_structure_200_crop_5.jpg	) Remove( ):
crop_img/lecture_data_structure_200_crop_6.jpg	new rort
crop_img/lecture_data_structure_200_crop_7.jpg	• Re move ro ot
crop_img/lecture_data_structure_200_crop_8.jpg	Pownteap  cases for a the right most leaf whn it bomes the
crop_img/lecture_data_structure_200_crop_9.jpg	. 2 good kids → done
crop_img/lecture_data_structure_200_crop_10.jpg	1 good , lbad → swap with bad
crop_img/lecture_data_structure_200_crop_11.jpg	a bad
crop_img/lecture_data_structure_200_crop_12.jpg	→ sway with highor ordere
crop_img/lecture_data_structure_200_crop_13.jpg	. stop if
crop_img/lecture_data_structure_200_crop_14.jpg	becomes a laf (has da at indix di,di+1)
crop_img/lecture_data_structure_200_crop_15.jpg	d
crop_img/lecture_data_structure_200_crop_16.jpg	gord relcetion ship
crop_img/lecture_data_structure_200_crop_17.jpg	32
crop_img/lecture_data_structure_200_crop_18.jpg	Run qmovel):
crop_img/lecture_data_structure_200_crop_19.jpg	swap
crop_img/lecture_data_structure_200_crop_20.jpg	1
crop_img/lecture_data_structure_200_crop_21.jpg	人5
crop_img/lecture_data_structure_200_crop_22.jpg	10
crop_img/lecture_data_structure_200_crop_23.jpg	rwap
crop_img/lecture_data_structure_200_crop_24.jpg	2536
crop_img/lecture_data_structure_200_crop_25.jpg	16
crop_img/lecture_data_structure_200_crop_26.jpg	Al
crop_img/lecture_data_structure_200_crop_27.jpg	αA
crop_img/lecture_data_structure_200_crop_28.jpg	19
crop_img/lecture_data_structure_201_crop_0.jpg	10
crop_img/lecture_data_structure_201_crop_1.jpg	7
crop_img/lecture_data_structure_201_crop_2.jpg	/
crop_img/lecture_data_structure_201_crop_3.jpg	15
crop_img/lecture_data_structure_201_crop_4.jpg	M
crop_img/lecture_data_structure_201_crop_5.jpg	1
crop_img/lecture_data_structure_201_crop_6.jpg	/
crop_img/lecture_data_structure_201_crop_7.jpg	32
crop_img/lecture_data_structure_201_crop_8.jpg	2536
crop_img/lecture_data_structure_201_crop_9.jpg	16
crop_img/lecture_data_structure_201_crop_10.jpg	/
crop_img/lecture_data_structure_201_crop_11.jpg	21
crop_img/lecture_data_structure_201_crop_12.jpg	lg
crop_img/lecture_data_structure_201_crop_13.jpg	) build heap() :
crop_img/lecture_data_structure_201_crop_14.jpg	Input : det a Ago [n]
crop_img/lecture_data_structure_201_crop_15.jpg	out put: Heap with the dat a
crop_img/lecture_data_structure_201_crop_16.jpg	Methodl : add n times⇒
crop_img/lecture_data_structure_201_crop_17.jpg	0 (n log n)
crop_img/lecture_data_structure_201_crop_18.jpg	Method2:
crop_img/lecture_data_structure_201_crop_19.jpg	A
crop_img/lecture_data_structure_201_crop_20.jpg	For each intorinal node in revevse order.
crop_img/lecture_data_structure_201_crop_21.jpg	down Heap (n)
crop_img/lecture_data_structure_201_crop_22.jpg	⇒0(n)
crop_img/lecture_data_structure_201_crop_23.jpg	Binwty
crop_img/lecture_data_structure_201_crop_24.jpg	) Given af, how many swap marimum toget the binory
crop_img/lecture_data_structure_201_crop_25.jpg	heap?
crop_img/lecture_data_structure_201_crop_26.jpg	→
crop_img/lecture_data_structure_201_crop_27.jpg	∑ heigh ts()
crop_img/lecture_data_structure_201_crop_28.jpg	) Hash Map : store <kcy, value >pain8
crop_img/lecture_data_structure_201_crop_29.jpg	.Rules for key : must be unique, immutlable
crop_img/lecture_data_structure_201_crop_30.jpg	put key() add new (uy, value) to the Map
crop_img/lecture_data_structure_202_crop_0.jpg	ig abready has the key → teplace old vale with
crop_img/lecture_data_structure_202_crop_1.jpg	new value
crop_img/lecture_data_structure_202_crop_2.jpg	get key ()
crop_img/lecture_data_structure_202_crop_3.jpg	backing
crop_img/lecture_data_structure_202_crop_4.jpg	put kay() : ure aAray ( ge()of t is8 o())
crop_img/lecture_data_structure_202_crop_5.jpg	the indee dorived from the harh code of the objed
crop_img/lecture_data_structure_202_crop_6.jpg	.what if kuy in nol an int?→ une hash lode l)
crop_img/lecture_data_structure_202_crop_7.jpg	hash Code l) . d properties
crop_img/lecture_data_structure_202_crop_8.jpg	.Mandatory : a2 equals () objeet har the same hash code
crop_img/lecture_data_structure_202_crop_9.jpg	.Nice to have: a diff object har liff hash code
crop_img/lecture_data_structure_202_crop_10.jpg	·hashcode indere abx hashde %o ardength)
crop_img/lecture_data_structure_202_crop_11.jpg	collision: trying to fut hy into an inder where there is dready
crop_img/lecture_data_structure_202_crop_12.jpg	a key
crop_img/lecture_data_structure_202_crop_13.jpg	. We can gerite the back tra to reduce collision rate
crop_img/lecture_data_structure_202_crop_14.jpg	→rerite before fulel l the proportion we should orize at
crop_img/lecture_data_structure_202_crop_15.jpg	in called load fador)
crop_img/lecture_data_structure_203_crop_0.jpg	for i= 0,1,
crop_img/lecture_data_structure_203_crop_1.jpg	Increment : when node kti i ocoupy
crop_img/lecture_data_structure_203_crop_2.jpg	k+i2>ln→ index=(k+i²2)/。len
crop_img/lecture_data_structure_203_crop_3.jpg	工f
crop_img/lecture_data_structure_203_crop_4.jpg	1
crop_img/lecture_data_structure_203_crop_5.jpg	solve po of lin.probing bt hae to eiz mantmer
crop_img/lecture_data_structure_203_crop_6.jpg	Bettor plan:
crop_img/lecture_data_structure_203_crop_7.jpg	) Run Binury search on Linkedlist
crop_img/lecture_data_structure_203_crop_8.jpg	.One approach : 2 linked list st acked
crop_img/lecture_data_structure_203_crop_9.jpg	Still o(n) (no mid t for lt/right likedlist)
crop_img/lecture_data_structure_203_crop_10.jpg	Shiplint: stacing sevral linked lity on top of each other
crop_img/lecture_data_structure_203_crop_11.jpg	Each node contain ref s to: axt，re vious above,below
crop_img/lecture_data_structure_203_crop_12.jpg	0
crop_img/lecture_data_structure_203_crop_13.jpg	Node must dbrey drules:
crop_img/lecture_data_structure_203_crop_14.jpg	。
crop_img/lecture_data_structure_203_crop_15.jpg	All dat a nust be in bowest level
crop_img/lecture_data_structure_203_crop_16.jpg	If in levels, must be in all lower bvels
crop_img/lecture_data_structure_203_crop_17.jpg	(name of creatogs)
crop_img/lecture_data_structure_203_crop_18.jpg	) AVL: self-balancing BST
crop_img/lecture_data_structure_203_crop_19.jpg	 balance facton := node.left.height-node.right.height
crop_img/lecture_data_structure_203_crop_20.jpg	. lach node con tains height and bf
crop_img/lecture_data_structure_204_crop_0.jpg	· null node hars height -1
crop_img/lecture_data_structure_204_crop_1.jpg	[-1，1]: good
crop_img/lecture_data_structure_204_crop_2.jpg	-2092
crop_img/lecture_data_structure_204_crop_3.jpg	un balenced → not good → have to re balance
crop_img/lecture_data_structure_204_crop_4.jpg	)AVL(s add () : sane a bsT t fine unbalanced nodes
crop_img/lecture_data_structure_204_crop_5.jpg	0) Fixing unbalance : Rotation the un balan ced node  sub tree
crop_img/lecture_data_structure_204_crop_6.jpg	$$
crop_img/lecture_data_structure_204_crop_7.jpg	A
crop_img/lecture_data_structure_204_crop_8.jpg	B
crop_img/lecture_data_structure_204_crop_9.jpg	eft
crop_img/lecture_data_structure_204_crop_10.jpg	A
crop_img/lecture_data_structure_204_crop_11.jpg	B
crop_img/lecture_data_structure_204_crop_12.jpg	A
crop_img/lecture_data_structure_204_crop_13.jpg	C
crop_img/lecture_data_structure_204_crop_14.jpg	Do when no de. bf = -21
crop_img/lecture_data_structure_204_crop_15.jpg	node. right.bf =-1on0
crop_img/lecture_data_structure_204_crop_16.jpg	Note
crop_img/lecture_data_structure_204_crop_17.jpg	B
crop_img/lecture_data_structure_204_crop_18.jpg	:
crop_img/lecture_data_structure_204_crop_19.jpg	A
crop_img/lecture_data_structure_204_crop_20.jpg	left
crop_img/lecture_data_structure_204_crop_21.jpg	C
crop_img/lecture_data_structure_204_crop_22.jpg	→
crop_img/lecture_data_structure_204_crop_23.jpg	A
crop_img/lecture_data_structure_204_crop_24.jpg	B
crop_img/lecture_data_structure_204_crop_25.jpg	ρ
crop_img/lecture_data_structure_204_crop_26.jpg	D
crop_img/lecture_data_structure_204_crop_27.jpg	.right
crop_img/lecture_data_structure_204_crop_28.jpg	A
crop_img/lecture_data_structure_204_crop_29.jpg	B
crop_img/lecture_data_structure_204_crop_30.jpg	A
crop_img/lecture_data_structure_204_crop_31.jpg	B
crop_img/lecture_data_structure_204_crop_32.jpg	↓
crop_img/lecture_data_structure_204_crop_33.jpg	-
crop_img/lecture_data_structure_204_crop_34.jpg	C
crop_img/lecture_data_structure_204_crop_35.jpg	②
crop_img/lecture_data_structure_204_crop_36.jpg	dangerous
crop_img/lecture_data_structure_204_crop_37.jpg	4
crop_img/lecture_data_structure_204_crop_38.jpg	3
crop_img/lecture_data_structure_204_crop_39.jpg	4
crop_img/lecture_data_structure_204_crop_40.jpg	3
crop_img/lecture_data_structure_204_crop_41.jpg	node
crop_img/lecture_data_structure_204_crop_42.jpg	B
crop_img/lecture_data_structure_204_crop_43.jpg	A
crop_img/lecture_data_structure_204_crop_44.jpg	l
crop_img/lecture_data_structure_204_crop_45.jpg	·Nole
crop_img/lecture_data_structure_204_crop_46.jpg	→ get nothing
crop_img/lecture_data_structure_204_crop_47.jpg	A
crop_img/lecture_data_structure_204_crop_48.jpg	B
crop_img/lecture_data_structure_204_crop_49.jpg	C
crop_img/lecture_data_structure_204_crop_50.jpg	qigh↓
crop_img/lecture_data_structure_204_crop_51.jpg	B
crop_img/lecture_data_structure_205_crop_0.jpg	.sight -left o tation: nodl,of =-2,rode.right.bf =1
crop_img/lecture_data_structure_205_crop_1.jpg	A
crop_img/lecture_data_structure_205_crop_2.jpg	C
crop_img/lecture_data_structure_205_crop_3.jpg	A
crop_img/lecture_data_structure_205_crop_4.jpg	6
crop_img/lecture_data_structure_205_crop_5.jpg	→
crop_img/lecture_data_structure_205_crop_6.jpg	→
crop_img/lecture_data_structure_205_crop_7.jpg	A
crop_img/lecture_data_structure_205_crop_8.jpg	B
crop_img/lecture_data_structure_205_crop_9.jpg	C
crop_img/lecture_data_structure_205_crop_10.jpg	B
crop_img/lecture_data_structure_205_crop_11.jpg	B
crop_img/lecture_data_structure_205_crop_12.jpg	Q
crop_img/lecture_data_structure_205_crop_13.jpg	C
crop_img/lecture_data_structure_205_crop_14.jpg	.there may be d dang orous noder
crop_img/lecture_data_structure_205_crop_15.jpg	. left -right 9o tation : noole.bf =2
crop_img/lecture_data_structure_205_crop_16.jpg	node,left.BF =-1
crop_img/lecture_data_structure_205_crop_17.jpg	A
crop_img/lecture_data_structure_205_crop_18.jpg	A
crop_img/lecture_data_structure_205_crop_19.jpg	C
crop_img/lecture_data_structure_205_crop_20.jpg	C
crop_img/lecture_data_structure_205_crop_21.jpg	V
crop_img/lecture_data_structure_205_crop_22.jpg	B
crop_img/lecture_data_structure_205_crop_23.jpg	A
crop_img/lecture_data_structure_205_crop_24.jpg	「
crop_img/lecture_data_structure_205_crop_25.jpg	→
crop_img/lecture_data_structure_205_crop_26.jpg	B
crop_img/lecture_data_structure_205_crop_27.jpg	V
crop_img/lecture_data_structure_205_crop_28.jpg	B
crop_img/lecture_data_structure_205_crop_29.jpg	C
crop_img/lecture_data_structure_205_crop_30.jpg	) a-4 trs: tee, but each node can have 1,2, onr 3 items)sorted, and
crop_img/lecture_data_structure_205_crop_31.jpg	# kidy=$ data+1
crop_img/lecture_data_structure_205_crop_32.jpg	.Shape proporty: all leaves at the same dey th
crop_img/lecture_data_structure_205_crop_33.jpg	onder property
crop_img/lecture_data_structure_205_crop_34.jpg	y
crop_img/lecture_data_structure_205_crop_35.jpg	d3
crop_img/lecture_data_structure_205_crop_36.jpg	a
crop_img/lecture_data_structure_205_crop_37.jpg	t4(> d{3)
crop_img/lecture_data_structure_205_crop_38.jpg	入2
crop_img/lecture_data_structure_205_crop_39.jpg	*
crop_img/lecture_data_structure_205_crop_40.jpg	t3
crop_img/lecture_data_structure_205_crop_41.jpg	(<d₁）（d₁<…<d2）（d<...<d₃）
crop_img/lecture_data_structure_206_crop_0.jpg	) 2-4 add:Use 2-4 contair () to find node
crop_img/lecture_data_structure_206_crop_1.jpg	Add to it  stll
crop_img/lecture_data_structure_206_crop_2.jpg	. What if the beaf is full ( i e.3itemx)
crop_img/lecture_data_structure_206_crop_3.jpg	→stil add) temporarily overflow"→
crop_img/lecture_data_structure_206_crop_4.jpg	push and/39d
crop_img/lecture_data_structure_206_crop_5.jpg	dat a to pwrent and split the wooent node to & nodes
crop_img/lecture_data_structure_206_crop_6.jpg	What if oent is full! do the same thing and we have
crop_img/lecture_data_structure_206_crop_7.jpg	a new porent
crop_img/lecture_data_structure_206_crop_8.jpg	8
crop_img/lecture_data_structure_206_crop_9.jpg	25
crop_img/lecture_data_structure_206_crop_10.jpg	78
crop_img/lecture_data_structure_206_crop_11.jpg	8
crop_img/lecture_data_structure_206_crop_12.jpg	25
crop_img/lecture_data_structure_206_crop_13.jpg	78
crop_img/lecture_data_structure_206_crop_14.jpg	→
crop_img/lecture_data_structure_206_crop_15.jpg	80
crop_img/lecture_data_structure_206_crop_16.jpg	3
crop_img/lecture_data_structure_206_crop_17.jpg	12,14
crop_img/lecture_data_structure_206_crop_18.jpg	425566477
crop_img/lecture_data_structure_206_crop_19.jpg	3
crop_img/lecture_data_structure_206_crop_20.jpg	么2，64，77
crop_img/lecture_data_structure_206_crop_21.jpg	80
crop_img/lecture_data_structure_206_crop_22.jpg	2，14
crop_img/lecture_data_structure_206_crop_23.jpg	overflow
crop_img/lecture_data_structure_206_crop_24.jpg	↑
crop_img/lecture_data_structure_206_crop_25.jpg	56
crop_img/lecture_data_structure_206_crop_26.jpg	25
crop_img/lecture_data_structure_206_crop_27.jpg	7
crop_img/lecture_data_structure_206_crop_28.jpg	oerflow
crop_img/lecture_data_structure_206_crop_29.jpg	56 78
crop_img/lecture_data_structure_206_crop_30.jpg	8
crop_img/lecture_data_structure_206_crop_31.jpg	25
crop_img/lecture_data_structure_206_crop_32.jpg	56
crop_img/lecture_data_structure_206_crop_33.jpg	78
crop_img/lecture_data_structure_206_crop_34.jpg	8.
crop_img/lecture_data_structure_206_crop_35.jpg	→
crop_img/lecture_data_structure_206_crop_36.jpg	→
crop_img/lecture_data_structure_206_crop_37.jpg	1214 42 6477 80
crop_img/lecture_data_structure_206_crop_38.jpg	3
crop_img/lecture_data_structure_206_crop_39.jpg	80
crop_img/lecture_data_structure_206_crop_40.jpg	64,77
crop_img/lecture_data_structure_206_crop_41.jpg	12，14
crop_img/lecture_data_structure_206_crop_42.jpg	42
crop_img/lecture_data_structure_206_crop_43.jpg	3
crop_img/lecture_data_structure_206_crop_44.jpg	) a-4 remove
crop_img/lecture_data_structure_206_crop_45.jpg	c
crop_img/lecture_data_structure_206_crop_46.jpg	Case 1: remove dota from beaf with 2 or more datta
crop_img/lecture_data_structure_206_crop_47.jpg	→ Just delete
crop_img/lecture_data_structure_207_crop_0.jpg	Case a: remove from internal nodes
crop_img/lecture_data_structure_207_crop_1.jpg	→ replace data with pre deceror or sucersor
crop_img/lecture_data_structure_207_crop_2.jpg	63
crop_img/lecture_data_structure_207_crop_3.jpg	. Re/ Ppe in
crop_img/lecture_data_structure_207_crop_4.jpg	a baf with
crop_img/lecture_data_structure_207_crop_5.jpg	2
crop_img/lecture_data_structure_207_crop_6.jpg	12
crop_img/lecture_data_structure_207_crop_7.jpg	47
crop_img/lecture_data_structure_207_crop_8.jpg	51
crop_img/lecture_data_structure_207_crop_9.jpg	V
crop_img/lecture_data_structure_207_crop_10.jpg	other dat a
crop_img/lecture_data_structure_207_crop_11.jpg	6
crop_img/lecture_data_structure_207_crop_12.jpg	52
crop_img/lecture_data_structure_207_crop_13.jpg	53
crop_img/lecture_data_structure_207_crop_14.jpg	8
crop_img/lecture_data_structure_207_crop_15.jpg	33
crop_img/lecture_data_structure_207_crop_16.jpg	44
crop_img/lecture_data_structure_207_crop_17.jpg	the only data
crop_img/lecture_data_structure_207_crop_18.jpg	 Rel be ix in a laf → luse 3 and 4
crop_img/lecture_data_structure_207_crop_19.jpg	same parent
crop_img/lecture_data_structure_207_crop_20.jpg	个
crop_img/lecture_data_structure_207_crop_21.jpg	.Care3:dat is in e haonly datimmeditesiblig
crop_img/lecture_data_structure_207_crop_22.jpg	has a,3 date
crop_img/lecture_data_structure_207_crop_23.jpg	→Transfer: parent , sibling date
crop_img/lecture_data_structure_207_crop_24.jpg	empty
crop_img/lecture_data_structure_207_crop_25.jpg	↓
crop_img/lecture_data_structure_207_crop_26.jpg	closert sibling
crop_img/lecture_data_structure_207_crop_27.jpg	Remove (33)
crop_img/lecture_data_structure_207_crop_28.jpg	7
crop_img/lecture_data_structure_207_crop_29.jpg	25
crop_img/lecture_data_structure_207_crop_30.jpg	33
crop_img/lecture_data_structure_207_crop_31.jpg	/
crop_img/lecture_data_structure_207_crop_32.jpg	A
crop_img/lecture_data_structure_207_crop_33.jpg	7
crop_img/lecture_data_structure_207_crop_34.jpg	→
crop_img/lecture_data_structure_207_crop_35.jpg	74
crop_img/lecture_data_structure_207_crop_36.jpg	17
crop_img/lecture_data_structure_207_crop_37.jpg	74
crop_img/lecture_data_structure_207_crop_38.jpg	4
crop_img/lecture_data_structure_207_crop_39.jpg	/
crop_img/lecture_data_structure_207_crop_40.jpg	7
crop_img/lecture_data_structure_207_crop_41.jpg	/
crop_img/lecture_data_structure_207_crop_42.jpg	1
crop_img/lecture_data_structure_207_crop_43.jpg	86
crop_img/lecture_data_structure_207_crop_44.jpg	×
crop_img/lecture_data_structure_207_crop_45.jpg	6168
crop_img/lecture_data_structure_207_crop_46.jpg	61 68
crop_img/lecture_data_structure_207_crop_47.jpg	16 u
crop_img/lecture_data_structure_207_crop_48.jpg	25
crop_img/lecture_data_structure_207_crop_49.jpg	8 16
crop_img/lecture_data_structure_207_crop_50.jpg	25
crop_img/lecture_data_structure_207_crop_51.jpg	→
crop_img/lecture_data_structure_207_crop_52.jpg	74
crop_img/lecture_data_structure_207_crop_53.jpg	16
crop_img/lecture_data_structure_207_crop_54.jpg	/
crop_img/lecture_data_structure_207_crop_55.jpg	16
crop_img/lecture_data_structure_207_crop_56.jpg	8
crop_img/lecture_data_structure_207_crop_57.jpg	6168
crop_img/lecture_data_structure_208_crop_0.jpg	Case 4, leaf has 1data, iblings ehso have 1 data
crop_img/lecture_data_structure_208_crop_1.jpg	all have I data
crop_img/lecture_data_structure_208_crop_2.jpg	. We will trat underf low exactly lihe ovrflow,bt rvern
crop_img/lecture_data_structure_208_crop_3.jpg	2
crop_img/lecture_data_structure_208_crop_4.jpg	8
crop_img/lecture_data_structure_208_crop_5.jpg	68
crop_img/lecture_data_structure_208_crop_6.jpg	68
crop_img/lecture_data_structure_208_crop_7.jpg	qemore(t)
crop_img/lecture_data_structure_208_crop_8.jpg	→
crop_img/lecture_data_structure_208_crop_9.jpg	く
crop_img/lecture_data_structure_208_crop_10.jpg	8 α4
crop_img/lecture_data_structure_208_crop_11.jpg	100 20
crop_img/lecture_data_structure_208_crop_12.jpg	7
crop_img/lecture_data_structure_208_crop_13.jpg	24
crop_img/lecture_data_structure_208_crop_14.jpg	100 200
crop_img/lecture_data_structure_208_crop_15.jpg	-
crop_img/lecture_data_structure_208_crop_16.jpg	V
crop_img/lecture_data_structure_208_crop_17.jpg	V
crop_img/lecture_data_structure_208_crop_18.jpg	 morge
crop_img/lecture_data_structure_208_crop_19.jpg	 fuxion
crop_img/lecture_data_structure_208_crop_20.jpg	overflow: pushing to parent can make it too full
crop_img/lecture_data_structure_208_crop_21.jpg	underflow: pull out parent could make porent empty
crop_img/lecture_data_structure_208_crop_22.jpg	if porent ir eme ty
crop_img/lecture_data_structure_208_crop_23.jpg	is siblingf pcoreht has spove dataTranofer →done
crop_img/lecture_data_structure_208_crop_24.jpg	i bling o parent oll have datfuion agin
crop_img/lecture_data_structure_208_crop_25.jpg	↓
crop_img/lecture_data_structure_208_crop_26.jpg	can Mate more
crop_img/lecture_data_structure_208_crop_27.jpg	work:
crop_img/lecture_data_structure_208_crop_28.jpg	enpty root:remove it
crop_img/memory_input_output_4_crop_0.jpg	) Memory- mapped Io: Ilo devicer and memory shoare the kame addr
crop_img/memory_input_output_4_crop_1.jpg	Apace
crop_img/memory_input_output_4_crop_2.jpg	 Data hegint ous: Ued for actual thank fer of data
crop_img/memory_input_output_4_crop_3.jpg	 Statur register: Information the de vice is telling ur
crop_img/memory_input_output_4_crop_4.jpg	) Control negint er : Allows u to set change able device charatorusti
crop_img/memory_input_output_4_crop_5.jpg	( finish input a char?)
crop_img/memory_input_output_4_crop_6.jpg	Io Completion handliny Interupt-daiven & folling
crop_img/memory_input_output_4_crop_7.jpg	• Intoupt - di ven: A device mig nal the ceu when it need's attantion
crop_img/memory_input_output_4_crop_8.jpg	lolling: cLu actively checkr the status of a deva
crop_img/memory_input_output_4_crop_9.jpg	 Axynch ronous Io: allow programx to continue exewting other tasky
crop_img/memory_input_output_4_crop_10.jpg	while waiting fon Ilo
crop_img/memory_input_output_4_crop_11.jpg	Note: we will fo ous on memory -mapped, asy neh ronous I1o with
crop_img/memory_input_output_4_crop_12.jpg	polling
crop_img/memory_input_output_4_crop_13.jpg	)KBsR( Keyboard outce register) (xFEoo)
crop_img/memory_input_output_4_crop_14.jpg	. Only uke bit 15, which ins set when a chor actor in available
crop_img/memory_input_output_4_crop_15.jpg	) KBOR(keyboard data register) (×Feo2)
crop_img/memory_input_output_4_crop_16.jpg	.vxe bityo-,where the loation in adony and reading
crop_img/memory_input_output_4_crop_17.jpg	clewvs KBSR
crop_img/memory_input_output_4_crop_18.jpg	KBSR and KBoR ore used for key boad input
crop_img/memory_input_output_5_crop_0.jpg	) OsR( Destination rourice fegister) (xFeo4)
crop_img/memory_input_output_5_crop_1.jpg	Only ure bit s which is set when monitor finirh poing achar
crop_img/memory_input_output_5_crop_2.jpg	) ooR(Oestination data registon) (×Feo6)
crop_img/memory_input_output_5_crop_3.jpg	. Uke bit s o-7,thansferoring the data to this addr to out put on
crop_img/memory_input_output_5_crop_4.jpg	the moniton
crop_img/memory_input_output_5_crop_5.jpg	. Ceor DsR
crop_img/memory_input_output_5_crop_6.jpg	OSR and Dor are used fon output
crop_img/memory_input_output_5_crop_7.jpg	 fpo of os: s horing teoes and protecing ux from themelves
crop_img/memory_input_output_5_crop_8.jpg	and otherr
crop_img/memory_input_output_5_crop_9.jpg	Intoupt: An ans fipted subroutine call toigg ered by an external event
crop_img/memory_input_output_5_crop_10.jpg	(E:I1o device te porits a comp letion/ eror)
crop_img/memory_input_output_5_crop_11.jpg	Note: kBse and DsR both ure bit l4 as Interuption Enable Bit
crop_img/memory_input_output_5_crop_12.jpg	) TRAL: An instguction that call oss broutine (Ex: readiny
crop_img/memory_input_output_5_crop_13.jpg	from a file)
crop_img/memory_input_output_5_crop_14.jpg	Exception: Vnantipated thing has happened
crop_img/memory_input_output_5_crop_15.jpg	Ex：
crop_img/memory_input_output_5_crop_16.jpg	hard ware errot / program error
crop_img/memory_input_output_5_crop_17.jpg	 fhoevootr Status fegister: a register that storex information about
crop_img/memory_input_output_5_crop_18.jpg	the wrrent st ate of the pro cersor
crop_img/memory_input_output_5_crop_19.jpg	15
crop_img/memory_input_output_5_crop_20.jpg	14-11
crop_img/memory_input_output_5_crop_21.jpg	10- 8
crop_img/memory_input_output_5_crop_22.jpg	1 -3
crop_img/memory_input_output_5_crop_23.jpg	a-0
crop_img/memory_input_output_5_crop_24.jpg	priviledgel
crop_img/memory_input_output_5_crop_25.jpg	priority
crop_img/memory_input_output_5_crop_26.jpg	don't
crop_img/memory_input_output_5_crop_27.jpg	dor't
crop_img/memory_input_output_5_crop_28.jpg	condition
crop_img/memory_input_output_5_crop_29.jpg	lvdl
crop_img/memory_input_output_5_crop_30.jpg	ube
crop_img/memory_input_output_5_crop_31.jpg	coder
crop_img/memory_input_output_5_crop_32.jpg	mode
crop_img/memory_input_output_5_crop_33.jpg	uke
crop_img/micro_econ_note_60_crop_0.jpg	Intgo duction to Economics
crop_img/micro_econ_note_60_crop_1.jpg	) Scarcity : human desirer for goods & services are unhimited but
crop_img/micro_econ_note_60_crop_2.jpg	the resowcey & time are limited
crop_img/micro_econ_note_60_crop_3.jpg	) Econo micy : A so cial sciene that st ndier the choices people I organizations
crop_img/micro_econ_note_60_crop_4.jpg	make to cope with Scarcity and the ineentiver of these choices
crop_img/micro_econ_note_60_crop_5.jpg	Micro econ: The st udy of the choices that in dividuals and busineves
crop_img/micro_econ_note_60_crop_6.jpg	.
crop_img/micro_econ_note_60_crop_7.jpg	make, how they interact in the market,and goo' influence
crop_img/micro_econ_note_60_crop_8.jpg	Chap I : Por kin
crop_img/micro_econ_note_60_crop_9.jpg	(F01)
crop_img/micro_econ_note_60_crop_10.jpg	Factons & prod:
crop_img/micro_econ_note_60_crop_11.jpg	Resowrcer used to phoduce gouds & servics
crop_img/micro_econ_note_60_crop_12.jpg	· Land : natwral hesowrces
crop_img/micro_econ_note_60_crop_13.jpg	→ rent
crop_img/micro_econ_note_60_crop_14.jpg	Labor: phy sical and mental effort of people → wages
crop_img/micro_econ_note_60_crop_15.jpg	.Human capital: knowledge & skill of people wsed to produce resource
crop_img/micro_econ_note_60_crop_16.jpg	Capital: tools instrument)machinex,buildingx used to
crop_img/micro_econ_note_60_crop_17.jpg	pro duce
crop_img/micro_econ_note_60_crop_18.jpg	→
crop_img/micro_econ_note_60_crop_19.jpg	intorst (lending them)
crop_img/micro_econ_note_60_crop_20.jpg	. Not financial capital (money, stockes, bonds)
crop_img/micro_econ_note_60_crop_21.jpg	Entrepreneur ship: The proc of dicovering new ways to mbine
crop_img/micro_econ_note_60_crop_22.jpg	gurowre
crop_img/micro_econ_note_60_crop_23.jpg	890fit
crop_img/micro_econ_note_60_crop_24.jpg	→
crop_img/micro_econ_note_60_crop_25.jpg	 Efficiency: The resource ue ix efficient if it is not pomibl to
crop_img/micro_econ_note_60_crop_26.jpg	make someone ni cher without making ano ther poorer
crop_img/micro_econ_note_61_crop_0.jpg	Ex: Divride 5 apples to d people:
crop_img/micro_econ_note_61_crop_1.jpg	.0 5
crop_img/micro_econ_note_61_crop_2.jpg	4
crop_img/micro_econ_note_61_crop_3.jpg	Efficient
crop_img/micro_econ_note_61_crop_4.jpg	)
crop_img/micro_econ_note_61_crop_5.jpg	:
crop_img/micro_econ_note_61_crop_6.jpg	3，2
crop_img/micro_econ_note_61_crop_7.jpg	. 2,a and throw I away
crop_img/micro_econ_note_61_crop_8.jpg	→ one per on can have 3 apples (richer) and the othor stay
crop_img/micro_econ_note_61_crop_9.jpg	the xame (not poorer) → Inefficient
crop_img/micro_econ_note_61_crop_10.jpg	)Tradeoff: an exchange, giving up one thing to get some thing elre
crop_img/micro_econ_note_61_crop_11.jpg	. A choice is a trade off
crop_img/micro_econ_note_61_crop_12.jpg	greatest benefit
crop_img/micro_econ_note_61_crop_13.jpg	) Rationality: compare costos & benefits→ achieve
crop_img/micro_econ_note_61_crop_14.jpg	costs
crop_img/micro_econ_note_61_crop_15.jpg	.Benefit: The gain/pleaswre, determined by preference
crop_img/micro_econ_note_61_crop_16.jpg	Cost : The thing that you have to give up
crop_img/micro_econ_note_61_crop_17.jpg	(0c)
crop_img/micro_econ_note_61_crop_18.jpg	) Opportunity cost : The highert -valued aternative that is givn up
crop_img/micro_econ_note_61_crop_19.jpg	to get a thing is the opportunity cast of that thing
crop_img/micro_econ_note_61_crop_20.jpg	)lositive state ment:
crop_img/micro_econ_note_61_crop_21.jpg	fact , ean be tested scientificlly
crop_img/micro_econ_note_61_crop_22.jpg	Ex: Salary in creaser
crop_img/micro_econ_note_61_crop_23.jpg	30% compared to lart year
crop_img/micro_econ_note_61_crop_24.jpg	 Nonmativ sttement: oinionvuecat b teted centielly
crop_img/micro_econ_note_61_crop_25.jpg	Ex . Ue Mhonld be lower
crop_img/micro_econ_note_62_crop_0.jpg	Economic models:A dsoription of some aspectr of the eono mic which
crop_img/micro_econ_note_62_crop_1.jpg	is needed for a pwrpose
crop_img/micro_econ_note_62_crop_2.jpg	→Help economist conduct reearch and advise on goo and inchustry
crop_img/micro_econ_note_62_crop_3.jpg	policy
crop_img/micro_econ_note_62_crop_4.jpg	) Market cap italism : an econ system in which
crop_img/micro_econ_note_62_crop_5.jpg	Indi vidual onx rowes and are fre to bysell them (landcapal
crop_img/micro_econ_note_62_crop_6.jpg	good & servicer)
crop_img/micro_econ_note_62_crop_7.jpg	(g& s)
crop_img/micro_econ_note_62_crop_8.jpg	.Makets de termine what, how, and for whom goods & serviees re
crop_img/micro_econ_note_62_crop_9.jpg	producad
crop_img/micro_econ_note_62_crop_10.jpg	No supreme plr gudin the ue f resorr
crop_img/micro_econ_note_62_crop_11.jpg	.) centrally planned to cialism : an econ sys in which :
crop_img/micro_econ_note_62_crop_12.jpg	. Gov ouny all tesour cer, disect Workers to jo
crop_img/micro_econ_note_62_crop_13.jpg	. Gov decider what, how, and for whom to pro duc
crop_img/micro_econ_note_62_crop_14.jpg	) We oou in a mixed econ Ny stem
crop_img/micro_econ_note_62_crop_15.jpg	Chaptor a :Introduction to fF
crop_img/micro_econ_note_62_crop_16.jpg	 Production poibility frontier (F): Prouction ha tradoff8
crop_img/micro_econ_note_62_crop_17.jpg	↑appler
crop_img/micro_econ_note_62_crop_18.jpg	inat tainable
crop_img/micro_econ_note_62_crop_19.jpg	attainable
crop_img/micro_econ_note_62_crop_20.jpg	but in of ficient
crop_img/micro_econ_note_62_crop_21.jpg	biker
crop_img/micro_econ_note_63_crop_0.jpg	) Moorginal Benefit : benefit from consuming
crop_img/micro_econ_note_63_crop_1.jpg	I more unit
crop_img/micro_econ_note_63_crop_2.jpg	) Moorginal Cast : cot
crop_img/micro_econ_note_63_crop_3.jpg	from producing
crop_img/micro_econ_note_63_crop_4.jpg	I more unit
crop_img/micro_econ_note_63_crop_5.jpg	) Economie growth : Expansior of the lF
crop_img/micro_econ_note_63_crop_6.jpg	. Technological change
crop_img/micro_econ_note_63_crop_7.jpg	•Capital accumulation
crop_img/micro_econ_note_63_crop_8.jpg	) PLF shif tous:
crop_img/micro_econ_note_63_crop_9.jpg	. Technological advance
crop_img/micro_econ_note_63_crop_10.jpg	. More education/ training
crop_img/micro_econ_note_63_crop_11.jpg	 Not wral disar tor
crop_img/micro_econ_note_63_crop_12.jpg	(compre to otheus)
crop_img/micro_econ_note_63_crop_13.jpg	(fewer input, bame output)
crop_img/micro_econ_note_63_crop_14.jpg	) Absolute advantage & Comparative advan tage:
crop_img/micro_econ_note_63_crop_15.jpg	I howr
crop_img/micro_econ_note_63_crop_16.jpg	R has abso hute advantage
crop_img/micro_econ_note_63_crop_17.jpg	chi cken
crop_img/micro_econ_note_63_crop_18.jpg	waf fle
crop_img/micro_econ_note_63_crop_19.jpg	1h
crop_img/micro_econ_note_63_crop_20.jpg	P
crop_img/micro_econ_note_63_crop_21.jpg	in producing waffe
crop_img/micro_econ_note_63_crop_22.jpg	Rachel
crop_img/micro_econ_note_63_crop_23.jpg	30
crop_img/micro_econ_note_63_crop_24.jpg	30
crop_img/micro_econ_note_63_crop_25.jpg	Nick
crop_img/micro_econ_note_63_crop_26.jpg	30
crop_img/micro_econ_note_63_crop_27.jpg	6
crop_img/micro_econ_note_63_crop_28.jpg	lh
crop_img/micro_econ_note_63_crop_29.jpg	60
crop_img/micro_econ_note_63_crop_30.jpg	0
crop_img/micro_econ_note_63_crop_31.jpg	→
crop_img/micro_econ_note_63_crop_32.jpg	better
crop_img/micro_econ_note_63_crop_33.jpg	60
crop_img/micro_econ_note_63_crop_34.jpg	0
crop_img/micro_econ_note_63_crop_35.jpg	Cost
crop_img/micro_econ_note_63_crop_36.jpg	Nick has comp advantage
crop_img/micro_econ_note_63_crop_37.jpg	chicken
crop_img/micro_econ_note_63_crop_38.jpg	Waffle
crop_img/micro_econ_note_63_crop_39.jpg	7 in prod chicken over
crop_img/micro_econ_note_63_crop_40.jpg	Rachel
crop_img/micro_econ_note_63_crop_41.jpg	Ra chel
crop_img/micro_econ_note_63_crop_42.jpg	1W
crop_img/micro_econ_note_63_crop_43.jpg	1C
crop_img/micro_econ_note_63_crop_44.jpg	Nick
crop_img/micro_econ_note_63_crop_45.jpg	5
crop_img/micro_econ_note_63_crop_46.jpg	→
crop_img/micro_econ_note_63_crop_47.jpg	5C
crop_img/micro_econ_note_63_crop_48.jpg	Rachel has comp
crop_img/micro_econ_note_63_crop_49.jpg	Rachel's oc foor chicken is I waff le
crop_img/micro_econ_note_63_crop_50.jpg	waffle
crop_img/micro_econ_note_63_crop_51.jpg	Nick
crop_img/micro_econ_note_63_crop_52.jpg	Nick's oc for  waffle
crop_img/micro_econ_note_63_crop_53.jpg	B
crop_img/micro_econ_note_63_crop_54.jpg	A
crop_img/micro_econ_note_63_crop_55.jpg	3B
crop_img/micro_econ_note_63_crop_56.jpg	-13
crop_img/micro_econ_note_63_crop_57.jpg	P
crop_img/micro_econ_note_63_crop_58.jpg	.
crop_img/micro_econ_note_63_crop_59.jpg	P
crop_img/micro_econ_note_63_crop_60.jpg	15
crop_img/micro_econ_note_63_crop_61.jpg	5
crop_img/micro_econ_note_63_crop_62.jpg	→
crop_img/micro_econ_note_63_crop_63.jpg	M
crop_img/micro_econ_note_63_crop_64.jpg	10
crop_img/micro_econ_note_63_crop_65.jpg	20
crop_img/micro_econ_note_63_crop_66.jpg	-12
crop_img/micro_econ_note_63_crop_67.jpg	2B
crop_img/micro_econ_note_63_crop_68.jpg	P
crop_img/micro_econ_note_64_crop_0.jpg	DEMAND AND SUPPLY
crop_img/micro_econ_note_64_crop_1.jpg	(0&S)
crop_img/micro_econ_note_64_crop_2.jpg	(卫)
crop_img/micro_econ_note_64_crop_3.jpg	(Q)
crop_img/micro_econ_note_64_crop_4.jpg	pemand relationship bet ween price of a good and the quantity demanded
crop_img/micro_econ_note_64_crop_5.jpg	 Demand lurve :
crop_img/micro_econ_note_64_crop_6.jpg	($)
crop_img/micro_econ_note_64_crop_7.jpg	个
crop_img/micro_econ_note_64_crop_8.jpg	Demand Curve
crop_img/micro_econ_note_64_crop_9.jpg	(also margindl benefit
crop_img/micro_econ_note_64_crop_10.jpg	crve)
crop_img/micro_econ_note_64_crop_11.jpg	7
crop_img/micro_econ_note_64_crop_12.jpg	Q
crop_img/micro_econ_note_64_crop_13.jpg	) Morhet: where sellerr & buyers interat to exchunge goods & sices
crop_img/micro_econ_note_64_crop_14.jpg	) Money price : pruice in aurrenay
crop_img/micro_econ_note_64_crop_15.jpg	Relative pie.pi in toms thrgood
crop_img/micro_econ_note_64_crop_16.jpg	Used thronghout this dass
crop_img/micro_econ_note_64_crop_17.jpg	) Law of0
crop_img/micro_econ_note_64_crop_18.jpg	P个→Q√
crop_img/micro_econ_note_64_crop_19.jpg	.) Movement along the curve
crop_img/micro_econ_note_64_crop_20.jpg	Q changes becaure I changes
crop_img/micro_econ_note_64_crop_21.jpg	.) change in Demand : D wrve shifts
crop_img/micro_econ_note_65_crop_0.jpg	.) Demand Shifters:
crop_img/micro_econ_note_65_crop_1.jpg	. lref erences
crop_img/micro_econ_note_65_crop_2.jpg	 In come (t)
crop_img/micro_econ_note_65_crop_3.jpg	. Normal good : I↑ → shift right
crop_img/micro_econ_note_65_crop_4.jpg	.Inferior good : I↑ → shift left
crop_img/micro_econ_note_65_crop_5.jpg	Expectation of Futwre (E0F)
crop_img/micro_econ_note_65_crop_6.jpg	6
crop_img/micro_econ_note_65_crop_7.jpg	Fut wre price higgh  thift right
crop_img/micro_econ_note_65_crop_8.jpg	low→
crop_img/micro_econ_note_65_crop_9.jpg	left
crop_img/micro_econ_note_65_crop_10.jpg	. Substit ute & Complementr
crop_img/micro_econ_note_65_crop_11.jpg	yehue.m
crop_img/micro_econ_note_65_crop_12.jpg	I of sub ↑ → shif t right
crop_img/micro_econ_note_65_crop_13.jpg	P of Sub ↓→ shift left
crop_img/micro_econ_note_65_crop_14.jpg	Bof Com T → thift lft
crop_img/micro_econ_note_65_crop_15.jpg	fof
crop_img/micro_econ_note_65_crop_16.jpg	com ↓ → shift rig ht
crop_img/micro_econ_note_65_crop_17.jpg	.# Demandous
crop_img/micro_econ_note_65_crop_18.jpg	# Demanderr ↑ → shift right
crop_img/micro_econ_note_65_crop_19.jpg	. Net work and congestion ef fects
crop_img/micro_econ_note_66_crop_0.jpg	Net work; More peoplb use → Mhift tight
crop_img/micro_econ_note_66_crop_1.jpg	Congestion: More.
crop_img/micro_econ_note_66_crop_2.jpg	→ shift left
crop_img/micro_econ_note_66_crop_3.jpg	(S)
crop_img/micro_econ_note_66_crop_4.jpg	 Supplyreai bweepagood and the pd
crop_img/micro_econ_note_66_crop_5.jpg	) Law of S:lT→Q↑
crop_img/micro_econ_note_66_crop_6.jpg	) change & s .s cuve shifts
crop_img/micro_econ_note_66_crop_7.jpg	Supply ave also marginal cont
crop_img/micro_econ_note_66_crop_8.jpg	f($)
crop_img/micro_econ_note_66_crop_9.jpg	curve)
crop_img/micro_econ_note_66_crop_10.jpg	个
crop_img/micro_econ_note_66_crop_11.jpg	M
crop_img/micro_econ_note_66_crop_12.jpg	shift
crop_img/micro_econ_note_66_crop_13.jpg	along
crop_img/micro_econ_note_66_crop_14.jpg	3
crop_img/micro_econ_note_66_crop_15.jpg	C
crop_img/micro_econ_note_66_crop_16.jpg	higt
crop_img/micro_econ_note_66_crop_17.jpg	Q
crop_img/micro_econ_note_66_crop_18.jpg	) change in @ Supplied: M along the C
crop_img/micro_econ_note_66_crop_19.jpg	) Supply Shiftous:
crop_img/micro_econ_note_66_crop_20.jpg	①  of Fol/Input:IT→S√
crop_img/micro_econ_note_66_crop_21.jpg	② Expectations: future I ↑→s↓(rrerve for future)
crop_img/micro_econ_note_66_crop_22.jpg	③
crop_img/micro_econ_note_66_crop_23.jpg	L
crop_img/micro_econ_note_66_crop_24.jpg	of Related out puts:
crop_img/micro_econ_note_66_crop_25.jpg	Substitute in frod: thing produed with the some resources
crop_img/micro_econ_note_66_crop_26.jpg	£x: wool jac ket
crop_img/micro_econ_note_66_crop_27.jpg	V
crop_img/micro_econ_note_66_crop_28.jpg	Weater
crop_img/micro_econ_note_66_crop_29.jpg	.I of sub stit ute ↑→ s ↓
crop_img/micro_econ_note_66_crop_30.jpg	.I of snb stitute ↓→ s ↑
crop_img/micro_econ_note_68_crop_0.jpg	Chaptor4: Elasticity
crop_img/micro_econ_note_68_crop_1.jpg	 Elasticity:A measwe of the ponsivene to a hange
crop_img/micro_econ_note_68_crop_2.jpg	. Highly respon ive → elastic
crop_img/micro_econ_note_68_crop_3.jpg	. Weakly
crop_img/micro_econ_note_68_crop_4.jpg	inelartic
crop_img/micro_econ_note_68_crop_5.jpg	J
crop_img/micro_econ_note_68_crop_6.jpg	(^°)
crop_img/micro_econ_note_68_crop_7.jpg	△Q demanded
crop_img/micro_econ_note_68_crop_8.jpg	.) erice Elasticity ofD:
crop_img/micro_econ_note_68_crop_9.jpg	Qaverage
crop_img/micro_econ_note_68_crop_10.jpg	△Q demanded (l。)
crop_img/micro_econ_note_68_crop_11.jpg	△2
crop_img/micro_econ_note_68_crop_12.jpg	△2(%)
crop_img/micro_econ_note_68_crop_13.jpg	Iaverage
crop_img/micro_econ_note_68_crop_14.jpg	△QA→B/OA+OB
crop_img/micro_econ_note_68_crop_15.jpg	n
crop_img/micro_econ_note_68_crop_16.jpg	Ex :
crop_img/micro_econ_note_68_crop_17.jpg	e
crop_img/micro_econ_note_68_crop_18.jpg	a
crop_img/micro_econ_note_68_crop_19.jpg	A→B
crop_img/micro_econ_note_68_crop_20.jpg	二
crop_img/micro_econ_note_68_crop_21.jpg	△L
crop_img/micro_econ_note_68_crop_22.jpg	A→B
crop_img/micro_econ_note_68_crop_23.jpg	A+LB
crop_img/micro_econ_note_68_crop_24.jpg	a
crop_img/micro_econ_note_68_crop_25.jpg	0
crop_img/micro_econ_note_68_crop_26.jpg	Consider lel:
crop_img/micro_econ_note_68_crop_27.jpg	.1ε°1=1→unit clastic demand→%Dl=%Δa
crop_img/micro_econ_note_68_crop_28.jpg	.|ε|<1→inelastic demand(Ex:food，ga)
crop_img/micro_econ_note_68_crop_29.jpg	1ε|>1→ clastic demand (Ec: lxuies)
crop_img/micro_econ_note_68_crop_30.jpg	different sellers)
crop_img/micro_econ_note_68_crop_31.jpg	00
crop_img/micro_econ_note_69_crop_0.jpg	) Elas ticity ↓ ar Q↑ on the demand durve
crop_img/micro_econ_note_69_crop_1.jpg	f($)
crop_img/micro_econ_note_69_crop_2.jpg	个
crop_img/micro_econ_note_69_crop_3.jpg	Lefetly in elastic
crop_img/micro_econ_note_69_crop_4.jpg	eorfecly
crop_img/micro_econ_note_69_crop_5.jpg	elasti
crop_img/micro_econ_note_69_crop_6.jpg	r
crop_img/micro_econ_note_69_crop_7.jpg	E
crop_img/micro_econ_note_69_crop_8.jpg	√
crop_img/micro_econ_note_69_crop_9.jpg	V
crop_img/micro_econ_note_69_crop_10.jpg	7
crop_img/micro_econ_note_69_crop_11.jpg	Q
crop_img/micro_econ_note_69_crop_12.jpg	① Closenes of substituter:
crop_img/micro_econ_note_69_crop_13.jpg	more sub sti tutes more elas tic
crop_img/micro_econ_note_69_crop_14.jpg	α
crop_img/micro_econ_note_69_crop_15.jpg	proportion of income pnt on goods:more expeniv, mor eartic
crop_img/micro_econ_note_69_crop_16.jpg	3
crop_img/micro_econ_note_69_crop_17.jpg	Time elasped since the price change : more time, more elastic
crop_img/micro_econ_note_69_crop_18.jpg	.) Effeds of E lastic :
crop_img/micro_econ_note_69_crop_19.jpg	办
crop_img/micro_econ_note_69_crop_20.jpg	. P ut / hi ke
crop_img/micro_econ_note_69_crop_21.jpg	. Elastic :↑Total revenue /
crop_img/micro_econ_note_69_crop_22.jpg	. Ineastic : _
crop_img/micro_econ_note_69_crop_23.jpg	个
crop_img/micro_econ_note_69_crop_24.jpg	unit
crop_img/micro_econ_note_69_crop_25.jpg	ω
crop_img/micro_econ_note_69_crop_26.jpg	. Unit Elastic; Unchange
crop_img/micro_econ_note_69_crop_27.jpg	) Caons Eleesti caity of De mand :
crop_img/micro_econ_note_69_crop_28.jpg	% Da demanded
crop_img/micro_econ_note_69_crop_29.jpg	εC
crop_img/micro_econ_note_69_crop_30.jpg	% DP other good
crop_img/micro_econ_note_70_crop_0.jpg	) frice Eles ticity of Supply:
crop_img/micro_econ_note_70_crop_1.jpg	E  = %△Q supplied
crop_img/micro_econ_note_70_crop_2.jpg	中
crop_img/micro_econ_note_70_crop_3.jpg	→
crop_img/micro_econ_note_70_crop_4.jpg	Alway's Lositive
crop_img/micro_econ_note_70_crop_5.jpg	%△
crop_img/micro_econ_note_70_crop_6.jpg	V
crop_img/micro_econ_note_70_crop_7.jpg	=1 : unit elartic s
crop_img/micro_econ_note_70_crop_8.jpg	< 1: inelastic s
crop_img/micro_econ_note_70_crop_9.jpg	>1 : plastic s
crop_img/micro_econ_note_70_crop_10.jpg	flr litle bit
crop_img/micro_econ_note_70_crop_11.jpg	个
crop_img/micro_econ_note_70_crop_12.jpg	perfectly elostic suply
crop_img/micro_econ_note_70_crop_13.jpg	9
crop_img/micro_econ_note_70_crop_14.jpg	个
crop_img/micro_econ_note_70_crop_15.jpg	8
crop_img/micro_econ_note_70_crop_16.jpg	Q
crop_img/micro_econ_note_70_crop_17.jpg	&
crop_img/micro_econ_note_70_crop_18.jpg	SI V little bit
crop_img/micro_econ_note_70_crop_19.jpg	Q=0(no sale）
crop_img/micro_econ_note_70_crop_20.jpg	) Factors that inf luence Elastic of Suprly
crop_img/micro_econ_note_70_crop_21.jpg	①Resource sub stitution pori bilities: goods produced wring nesourir
crop_img/micro_econ_note_70_crop_22.jpg	that few sub stitwtions wre very in clartic
crop_img/micro_econ_note_70_crop_23.jpg	short time frame
crop_img/micro_econ_note_70_crop_24.jpg	2 Time faame :
crop_img/micro_econ_note_70_crop_25.jpg	. short gun: in elartic
crop_img/micro_econ_note_70_crop_26.jpg	' Long run . elar tic
crop_img/micro_econ_note_71_crop_0.jpg	Availabi lity of resources : If supply i dependent on rare resoue
crop_img/micro_econ_note_71_crop_1.jpg	3
crop_img/micro_econ_note_71_crop_2.jpg	 can't in ouese p oduction when e↑
crop_img/micro_econ_note_71_crop_3.jpg	4 Booious to entoy : Hord to entry the mearket → inelostic
crop_img/micro_econ_note_71_crop_4.jpg	% △Q demanded
crop_img/micro_econ_note_71_crop_5.jpg	) Income elarticity of Demand :
crop_img/micro_econ_note_71_crop_6.jpg	% ▶±
crop_img/micro_econ_note_71_crop_7.jpg	of a good
crop_img/micro_econ_note_71_crop_8.jpg	Chaptir 5:
crop_img/micro_econ_note_71_crop_9.jpg	Efficiency & Equity
crop_img/micro_econ_note_71_crop_10.jpg	Optimal conumption point:A point where marginal bnefit=mrginal
crop_img/micro_econ_note_71_crop_11.jpg	co st
crop_img/micro_econ_note_71_crop_12.jpg	.
crop_img/micro_econ_note_71_crop_13.jpg	Allo cation methods:
crop_img/micro_econ_note_71_crop_14.jpg	. Market price : s & D detormine price
crop_img/micro_econ_note_71_crop_15.jpg	 Command system : order
crop_img/micro_econ_note_71_crop_16.jpg	. Majority rule : voten (use of tax $)
crop_img/micro_econ_note_71_crop_17.jpg	Contert
crop_img/micro_econ_note_71_crop_18.jpg	First -come, finst-served
crop_img/micro_econ_note_71_crop_19.jpg	Lottery
crop_img/micro_econ_note_71_crop_20.jpg	fersonal charact ois ticr
crop_img/micro_econ_note_71_crop_21.jpg	A
crop_img/micro_econ_note_71_crop_22.jpg	.En:A socer team migh choose players with good spatial aarenr
crop_img/micro_econ_note_71_crop_23.jpg	and speed
crop_img/micro_econ_note_72_crop_0.jpg	.Fonce: Enforce contractr ) law suitN etc.
crop_img/micro_econ_note_72_crop_1.jpg	A demand curve is a marginal benefit anrve
crop_img/micro_econ_note_72_crop_2.jpg	In di vidual Demand: ralationhip btween an indivdulquantty demandd
crop_img/micro_econ_note_72_crop_3.jpg	and prics
crop_img/micro_econ_note_72_crop_4.jpg	.Individual Supply
crop_img/micro_econ_note_72_crop_5.jpg	ad of all buyer and pris
crop_img/micro_econ_note_72_crop_6.jpg	 Market Demand :
crop_img/micro_econ_note_72_crop_7.jpg	• Sum of all indivi dual demand curver
crop_img/micro_econ_note_72_crop_8.jpg	Market Supply
crop_img/micro_econ_note_72_crop_9.jpg	(MSB)
crop_img/micro_econ_note_72_crop_10.jpg	) Marginal social benefit:
crop_img/micro_econ_note_72_crop_11.jpg	market (so ciety)'x marginadl benefit
crop_img/micro_econ_note_72_crop_12.jpg	Market Demand Curve = MsB aorve
crop_img/micro_econ_note_72_crop_13.jpg	(MSC)
crop_img/micro_econ_note_72_crop_14.jpg	Market Supphy curse = Marginal scial cost urve
crop_img/micro_econ_note_72_crop_15.jpg	 Conswimer Suorphus & frodncor Swrplur :
crop_img/micro_econ_note_72_crop_16.jpg	2↑
crop_img/micro_econ_note_72_crop_17.jpg	D(MB) Curve
crop_img/micro_econ_note_72_crop_18.jpg	C sur
crop_img/micro_econ_note_72_crop_19.jpg	7
crop_img/micro_econ_note_72_crop_20.jpg	7
crop_img/micro_econ_note_72_crop_21.jpg	Market price
crop_img/micro_econ_note_72_crop_22.jpg	fsw2
crop_img/micro_econ_note_72_crop_23.jpg	R
crop_img/micro_econ_note_72_crop_24.jpg	S(MC)lwue
crop_img/micro_econ_note_72_crop_25.jpg	Q
crop_img/micro_econ_note_72_crop_26.jpg	 At equi li brium ) C sw & I ow ore maximum
crop_img/micro_econ_note_72_crop_27.jpg	→ Allo cative efficien cy
crop_img/micro_econ_note_73_crop_0.jpg	.) Markit failure: when a moorket is mt allocatire efficient
crop_img/micro_econ_note_73_crop_1.jpg	 Onderproduction / overproduction will occun
crop_img/micro_econ_note_73_crop_2.jpg	P
crop_img/micro_econ_note_73_crop_3.jpg	S
crop_img/micro_econ_note_73_crop_4.jpg	Deadweight lons := decreane of total wplus
crop_img/micro_econ_note_73_crop_5.jpg	lons by inef ficienay
crop_img/micro_econ_note_73_crop_6.jpg	C
crop_img/micro_econ_note_73_crop_7.jpg	→
crop_img/micro_econ_note_73_crop_8.jpg	6
crop_img/micro_econ_note_73_crop_9.jpg	A2
crop_img/micro_econ_note_73_crop_10.jpg	Q
crop_img/micro_econ_note_73_crop_11.jpg	Q
crop_img/micro_econ_note_73_crop_12.jpg	Q
crop_img/micro_econ_note_73_crop_13.jpg	eq
crop_img/micro_econ_note_73_crop_14.jpg	↓
crop_img/micro_econ_note_73_crop_15.jpg	↓
crop_img/micro_econ_note_73_crop_16.jpg	Undur
crop_img/micro_econ_note_73_crop_17.jpg	over
crop_img/micro_econ_note_73_crop_18.jpg	P
crop_img/micro_econ_note_73_crop_19.jpg	p
crop_img/micro_econ_note_73_crop_20.jpg	 Sowices of Market Failune:
crop_img/micro_econ_note_73_crop_21.jpg	• frice and quantity reg ulations:
crop_img/micro_econ_note_73_crop_22.jpg	Ex: price cals / oo98
crop_img/micro_econ_note_73_crop_23.jpg	limited # factories
crop_img/micro_econ_note_73_crop_24.jpg	• Taxes and Subsi dier :
crop_img/micro_econ_note_73_crop_25.jpg	.Taxs: highr pric for byers, lowr revenue for sellers
crop_img/micro_econ_note_73_crop_26.jpg	V
crop_img/micro_econ_note_73_crop_27.jpg	under produ ction
crop_img/micro_econ_note_73_crop_28.jpg	Subsidier(payment by gov to pour): lowor price for by
crop_img/micro_econ_note_73_crop_29.jpg	inouase revenue for buyers
crop_img/micro_econ_note_73_crop_30.jpg	V
crop_img/micro_econ_note_73_crop_31.jpg	overp roduction
crop_img/micro_econ_note_74_crop_0.jpg	Externalitir: Costbenefit that affed peole th are not
crop_img/micro_econ_note_74_crop_1.jpg	buger / seller
crop_img/micro_econ_note_74_crop_2.jpg	 External cost couses overrodution (doetnt care for otherr)
crop_img/micro_econ_note_74_crop_3.jpg	. External benefit
crop_img/micro_econ_note_74_crop_4.jpg	underpro duction ( care too much
crop_img/micro_econ_note_74_crop_5.jpg	. Pnblic qoods & common nesowas
crop_img/micro_econ_note_74_crop_6.jpg	Lublic good;
crop_img/micro_econ_note_74_crop_7.jpg	everyone benef it vithout having to pay
crop_img/micro_econ_note_74_crop_8.jpg	→under fro duced ) exe: public bus
crop_img/micro_econ_note_74_crop_9.jpg	Common resowce : owned by no one and nonex cludable
crop_img/micro_econ_note_74_crop_10.jpg	→ ovor produced ) ex:over fis hing
crop_img/micro_econ_note_74_crop_11.jpg	Monopoly: only one seller exsts→ they wil Tl and a
crop_img/micro_econ_note_74_crop_12.jpg	Underproduction
crop_img/micro_econ_note_74_crop_13.jpg	High transaction cost: cost of conneeting seller & buyer high
crop_img/micro_econ_note_74_crop_14.jpg	→ Underpro duction
crop_img/micro_econ_note_74_crop_15.jpg	) Competitive market's fairnes:
crop_img/micro_econ_note_74_crop_16.jpg	Oti litari anism :  it is not fair if the result ion't fair
crop_img/micro_econ_note_74_crop_17.jpg	→ Want to achiave the gratert good for the greatest numbor
crop_img/micro_econ_note_74_crop_18.jpg	. Rawl sian:
crop_img/micro_econ_note_74_crop_19.jpg	a
crop_img/micro_econ_note_74_crop_20.jpg	it's not fair if the rule & oren't fair
crop_img/micro_econ_note_75_crop_0.jpg	)Redis tri bution: Tahiny from the srich and give to the poor
crop_img/micro_econ_note_75_crop_1.jpg	. Have conseqnence.
crop_img/micro_econ_note_75_crop_2.jpg	change be havior: cause preople to work and invest levs (Tax)
crop_img/micro_econ_note_75_crop_3.jpg	② Thans fer cost
crop_img/micro_econ_note_75_crop_4.jpg	→ Caus under pnroduction
crop_img/micro_econ_note_75_crop_5.jpg	9 Trade off between equity & efficiency
crop_img/micro_econ_note_75_crop_6.jpg	) symne ty principl : people in simifar situation should be treated similaly
crop_img/micro_econ_note_75_crop_7.jpg	 Not determined by outcome / re sult
crop_img/micro_econ_note_75_crop_8.jpg	. frivate property rule :
crop_img/micro_econ_note_75_crop_9.jpg	protect private property & can only transfer
crop_img/micro_econ_note_75_crop_10.jpg	throngh voluentary exchangg
crop_img/micro_econ_note_75_crop_11.jpg	Chapten 6 : Grov Action In Mar ket
crop_img/micro_econ_note_75_crop_12.jpg	 fnice ceiling: a level whre suppliors cannot chorge higher
crop_img/micro_econ_note_75_crop_13.jpg	·Ig set below equi price → shortge → inefficiency
crop_img/micro_econ_note_75_crop_14.jpg	Howring shortage
crop_img/micro_econ_note_75_crop_15.jpg	Ex:Rent ceiling if set below equi 
crop_img/micro_econ_note_75_crop_16.jpg	Inased search activity
crop_img/micro_econ_note_75_crop_17.jpg	ceate illegad market
crop_img/micro_econ_note_75_crop_18.jpg	L
crop_img/micro_econ_note_75_crop_19.jpg	C-xu
crop_img/micro_econ_note_75_crop_20.jpg	OWL: dead weight lo
crop_img/micro_econ_note_75_crop_21.jpg	S
crop_img/micro_econ_note_75_crop_22.jpg	5
crop_img/micro_econ_note_75_crop_23.jpg	OWL
crop_img/micro_econ_note_75_crop_24.jpg	equi 
crop_img/micro_econ_note_75_crop_25.jpg	ceiling I
crop_img/micro_econ_note_75_crop_26.jpg	A
crop_img/micro_econ_note_75_crop_27.jpg	D
crop_img/micro_econ_note_75_crop_28.jpg	→Q
crop_img/micro_econ_note_75_crop_29.jpg	6_{s}$
crop_img/micro_econ_note_76_crop_0.jpg	sarching corst: maximum price willing to pay can equal ceiling
crop_img/micro_econ_note_76_crop_1.jpg	+ searching
crop_img/micro_econ_note_76_crop_2.jpg	P
crop_img/micro_econ_note_76_crop_3.jpg	max search cost be cause
crop_img/micro_econ_note_76_crop_4.jpg	L
crop_img/micro_econ_note_76_crop_5.jpg	C-s
crop_img/micro_econ_note_76_crop_6.jpg	supplier don't want to sell
crop_img/micro_econ_note_76_crop_7.jpg	S
crop_img/micro_econ_note_76_crop_8.jpg	DWL
crop_img/micro_econ_note_76_crop_9.jpg	(don't get any profit) and
crop_img/micro_econ_note_76_crop_10.jpg	equi
crop_img/micro_econ_note_76_crop_11.jpg	byer spend too much morey
crop_img/micro_econ_note_76_crop_12.jpg	mar
crop_img/micro_econ_note_76_crop_13.jpg	search
crop_img/micro_econ_note_76_crop_14.jpg	20188
crop_img/micro_econ_note_76_crop_15.jpg	ceiling
crop_img/micro_econ_note_76_crop_16.jpg	finding seller No thay
crop_img/micro_econ_note_76_crop_17.jpg	cont
crop_img/micro_econ_note_76_crop_18.jpg	froms
crop_img/micro_econ_note_76_crop_19.jpg	D
crop_img/micro_econ_note_76_crop_20.jpg	don't get any mofit to
crop_img/micro_econ_note_76_crop_21.jpg	xearch
crop_img/micro_econ_note_76_crop_22.jpg	→ Q
crop_img/micro_econ_note_76_crop_23.jpg	Qs}$
crop_img/micro_econ_note_76_crop_24.jpg	) who benefit from renting eiling: who has an aparment or lcky to
crop_img/micro_econ_note_76_crop_25.jpg	find one
crop_img/micro_econ_note_76_crop_26.jpg	 Who loser
crop_img/micro_econ_note_76_crop_27.jpg	: evoyone else
crop_img/micro_econ_note_76_crop_28.jpg	 erice floor: a level where suppliovs cannot chorge lower
crop_img/micro_econ_note_76_crop_29.jpg	If set above equi L → &urg lhus → inefficiency
crop_img/micro_econ_note_76_crop_30.jpg	.Ex: Minimum wage >equi→ too many applicants but too few job
crop_img/micro_econ_note_76_crop_31.jpg	 unemgloyment
crop_img/micro_econ_note_76_crop_32.jpg	d
crop_img/micro_econ_note_76_crop_33.jpg	Q→:feople who are unemp loyed
crop_img/micro_econ_note_76_crop_34.jpg	A
crop_img/micro_econ_note_76_crop_35.jpg	e
crop_img/micro_econ_note_76_crop_36.jpg	S
crop_img/micro_econ_note_76_crop_37.jpg	ad →ae:whe sthould have
crop_img/micro_econ_note_76_crop_38.jpg	PF
crop_img/micro_econ_note_76_crop_39.jpg	min wage
crop_img/micro_econ_note_76_crop_40.jpg	a job but don't
crop_img/micro_econ_note_76_crop_41.jpg	PE
crop_img/micro_econ_note_76_crop_42.jpg	E
crop_img/micro_econ_note_76_crop_43.jpg	. Qe→a :who want to work
crop_img/micro_econ_note_76_crop_44.jpg	at LF and can't find job
crop_img/micro_econ_note_76_crop_45.jpg	0
crop_img/micro_econ_note_76_crop_46.jpg	7
crop_img/micro_econ_note_76_crop_47.jpg	ae
crop_img/micro_econ_note_76_crop_48.jpg	Q
crop_img/micro_econ_note_76_crop_49.jpg	6
crop_img/micro_econ_note_76_crop_50.jpg	Q
crop_img/micro_econ_note_76_crop_51.jpg	Q
crop_img/micro_econ_note_76_crop_52.jpg	winnors:feople who employed at low wage and now earn min wage
crop_img/micro_econ_note_76_crop_53.jpg	peopk who get a job at this min wage
crop_img/micro_econ_note_77_crop_0.jpg	people employed at low wage and now love thir job cuz min wage
crop_img/micro_econ_note_77_crop_1.jpg	Loseur
crop_img/micro_econ_note_77_crop_2.jpg	E
crop_img/micro_econ_note_77_crop_3.jpg	-people who tshould have the job if p =p
crop_img/micro_econ_note_77_crop_4.jpg	) Iroduction quota : upper limit to  poduced, only has effed if set
crop_img/micro_econ_note_77_crop_5.jpg	below aE
crop_img/micro_econ_note_77_crop_6.jpg	Tax in cident : the division of the burden of a ta botween buyors& sellers
crop_img/micro_econ_note_77_crop_7.jpg	.Note :. The law doesn't decide tau incident, the market doer
crop_img/micro_econ_note_77_crop_8.jpg	Lut the tax on buyorr or sellers has the same effedx
crop_img/micro_econ_note_77_crop_9.jpg	S+tax
crop_img/micro_econ_note_77_crop_10.jpg	S
crop_img/micro_econ_note_77_crop_11.jpg	buyer
crop_img/micro_econ_note_77_crop_12.jpg	tax buyer
crop_img/micro_econ_note_77_crop_13.jpg	pay
crop_img/micro_econ_note_77_crop_14.jpg	pauy
crop_img/micro_econ_note_77_crop_15.jpg	--
crop_img/micro_econ_note_77_crop_16.jpg	seller
crop_img/micro_econ_note_77_crop_17.jpg	tan seller
crop_img/micro_econ_note_77_crop_18.jpg	recive
crop_img/micro_econ_note_77_crop_19.jpg	pay
crop_img/micro_econ_note_77_crop_20.jpg	0
crop_img/micro_econ_note_77_crop_21.jpg	Bayers paid lors taxe if the demand is mogre elastic
crop_img/micro_econ_note_77_crop_22.jpg	Sellers paid leus
crop_img/micro_econ_note_77_crop_23.jpg	supply is more elasic
crop_img/micro_econ_note_77_crop_24.jpg	I bugers se
crop_img/micro_econ_note_77_crop_25.jpg	s (elas tic)
crop_img/micro_econ_note_77_crop_26.jpg	S(inelastic)
crop_img/micro_econ_note_77_crop_27.jpg	→
crop_img/micro_econ_note_77_crop_28.jpg	Q
crop_img/micro_econ_note_78_crop_0.jpg	Bugerx say all taxes if S ix per feetly clastic
crop_img/micro_econ_note_78_crop_1.jpg	Sellers
crop_img/micro_econ_note_78_crop_2.jpg	S is perf ect lyy
crop_img/micro_econ_note_78_crop_3.jpg	inelastic
crop_img/micro_econ_note_78_crop_4.jpg	P
crop_img/micro_econ_note_78_crop_5.jpg	s+ tax
crop_img/micro_econ_note_78_crop_6.jpg	个
crop_img/micro_econ_note_78_crop_7.jpg	Buyon pay all
crop_img/micro_econ_note_78_crop_8.jpg	个
crop_img/micro_econ_note_78_crop_9.jpg	S
crop_img/micro_econ_note_78_crop_10.jpg	tar
crop_img/micro_econ_note_78_crop_11.jpg	price
crop_img/micro_econ_note_78_crop_12.jpg	70
crop_img/micro_econ_note_78_crop_13.jpg	Transfor effct:Som sorphu i trnfred from cu or prod→gov
crop_img/micro_econ_note_78_crop_14.jpg	sttax
crop_img/micro_econ_note_78_crop_15.jpg	S
crop_img/micro_econ_note_78_crop_16.jpg	CS
crop_img/micro_econ_note_78_crop_17.jpg	Iwr 8
crop_img/micro_econ_note_78_crop_18.jpg	10WL
crop_img/micro_econ_note_78_crop_19.jpg	actyal L
crop_img/micro_econ_note_78_crop_20.jpg	gov
crop_img/micro_econ_note_78_crop_21.jpg	p
crop_img/micro_econ_note_78_crop_22.jpg	Ves
crop_img/micro_econ_note_78_crop_23.jpg	Note: For prfedtly inelar tic demand or frfed ly elastic supply
crop_img/micro_econ_note_78_crop_24.jpg	DWL doesn't occur becau se Q stays the same
crop_img/micro_econ_note_78_crop_25.jpg	) Sub ri dier : pay ment made by gov to a producrr
crop_img/micro_econ_note_78_crop_26.jpg	→ Encowrage produceus to produce more than equi
crop_img/micro_econ_note_78_crop_27.jpg	→S shift right but couse DWl (inefficient)
crop_img/micro_econ_note_79_crop_0.jpg	Chaptor 7:
crop_img/micro_econ_note_79_crop_1.jpg	International Trade
crop_img/micro_econ_note_79_crop_2.jpg	lomparative advantage: A har comarative advantage to B when A produer
crop_img/micro_econ_note_79_crop_3.jpg	one thing with lower opportunity ust than b
crop_img/micro_econ_note_79_crop_4.jpg	.National Comp ad : A and B ore nations
crop_img/micro_econ_note_79_crop_5.jpg	0)Impogt & Expont
crop_img/micro_econ_note_79_crop_6.jpg	goodr
crop_img/micro_econ_note_79_crop_7.jpg	Free Trade w/ Tariff
crop_img/micro_econ_note_79_crop_8.jpg	Free Trade
crop_img/micro_econ_note_79_crop_9.jpg	P
crop_img/micro_econ_note_79_crop_10.jpg	L
crop_img/micro_econ_note_79_crop_11.jpg	S
crop_img/micro_econ_note_79_crop_12.jpg	S
crop_img/micro_econ_note_79_crop_13.jpg	D
crop_img/micro_econ_note_79_crop_14.jpg	D
crop_img/micro_econ_note_79_crop_15.jpg	C sur
crop_img/micro_econ_note_79_crop_16.jpg	π
crop_img/micro_econ_note_79_crop_17.jpg	→
crop_img/micro_econ_note_79_crop_18.jpg	World P +ta)
crop_img/micro_econ_note_79_crop_19.jpg	World
crop_img/micro_econ_note_79_crop_20.jpg	2
crop_img/micro_econ_note_79_crop_21.jpg	OWL
crop_img/micro_econ_note_79_crop_22.jpg	wosld 
crop_img/micro_econ_note_79_crop_23.jpg	Import
crop_img/micro_econ_note_79_crop_24.jpg	8
crop_img/micro_econ_note_79_crop_25.jpg	tar revi
crop_img/micro_econ_note_79_crop_26.jpg	Import
crop_img/micro_econ_note_79_crop_27.jpg	Q bought
crop_img/micro_econ_note_79_crop_28.jpg	Q
crop_img/micro_econ_note_79_crop_29.jpg	Qsold
crop_img/micro_econ_note_79_crop_30.jpg	sold bought
crop_img/micro_econ_note_79_crop_31.jpg	Q
crop_img/micro_econ_note_79_crop_32.jpg	by us
crop_img/micro_econ_note_79_crop_33.jpg	by us con
crop_img/micro_econ_note_79_crop_34.jpg	Import ↓ lro
crop_img/micro_econ_note_79_crop_35.jpg	. Tariff sevenve earned by gov
crop_img/micro_econ_note_79_crop_36.jpg	) Impoat ouota : limits the Q of goods that can be impost ed in a
crop_img/micro_econ_note_79_crop_37.jpg	given poriod
crop_img/micro_econ_note_79_crop_38.jpg	. Same eff as tariff except toriff rev i now importorsprofit
crop_img/micro_econ_note_79_crop_39.jpg	)Trade wor : Asituation where one (ountry incheases its tariff
crop_img/micro_econ_note_79_crop_40.jpg	on another
crop_img/micro_econ_note_79_crop_41.jpg	countay,and the countoy that suffo th  tariff do the same thing
crop_img/micro_econ_note_79_crop_42.jpg	1
crop_img/micro_econ_note_79_crop_43.jpg	Chaptor l7 :
crop_img/micro_econ_note_79_crop_44.jpg	Extonalities
crop_img/micro_econ_note_80_crop_0.jpg	) Extonality : A market exchange affects a 3rd party
crop_img/micro_econ_note_80_crop_1.jpg	. Negative Enter nality: create a cost
crop_img/micro_econ_note_80_crop_2.jpg	.froduction : comes from production ( burning coal)
crop_img/micro_econ_note_80_crop_3.jpg	consumption (smoking)
crop_img/micro_econ_note_80_crop_4.jpg	Consumption;
crop_img/micro_econ_note_80_crop_5.jpg	Lsitive Externality:create a benefit
crop_img/micro_econ_note_80_crop_6.jpg	、
crop_img/micro_econ_note_80_crop_7.jpg	. Broduction : new technologies
crop_img/micro_econ_note_80_crop_8.jpg	. Consumption : plant trr
crop_img/micro_econ_note_80_crop_9.jpg	(MLC)
crop_img/micro_econ_note_80_crop_10.jpg	 Marginal private cst: the cost of an additional unit that i tken by
crop_img/micro_econ_note_80_crop_11.jpg	the producer
crop_img/micro_econ_note_80_crop_12.jpg	(MEC)
crop_img/micro_econ_note_80_crop_13.jpg	 Marginal external cost:
crop_img/micro_econ_note_80_crop_14.jpg	by other except the producrs
crop_img/micro_econ_note_80_crop_15.jpg	Without externalitier, Mec = 0
crop_img/micro_econ_note_80_crop_16.jpg	(MSC)
crop_img/micro_econ_note_80_crop_17.jpg	 Marginal social corst : the marginal cont caused by everyone
crop_img/micro_econ_note_80_crop_18.jpg	.MSC = MC + MEC
crop_img/micro_econ_note_80_crop_19.jpg	MSC
crop_img/micro_econ_note_80_crop_20.jpg	MEC
crop_img/micro_econ_note_80_crop_21.jpg	MC (S)
crop_img/micro_econ_note_80_crop_22.jpg	eff
crop_img/micro_econ_note_80_crop_23.jpg	equi(not efint bcaus th extal 
crop_img/micro_econ_note_80_crop_24.jpg	producr's cauise they dont lount
crop_img/micro_econ_note_80_crop_25.jpg	Approaches to reeduciny ineffiency from () ex tornalities
crop_img/micro_econ_note_80_crop_26.jpg	)
crop_img/micro_econ_note_80_crop_27.jpg	① Exta blish pro perty sight
crop_img/micro_econ_note_80_crop_28.jpg	.Ex :prodncorvs cause dmg to houses→ get suld→ has to count
crop_img/micro_econ_note_80_crop_29.jpg	this penalty fee into the privatl cost of l
crop_img/micro_econ_note_81_crop_0.jpg	2 Extablish Gov mandater
crop_img/micro_econ_note_81_crop_1.jpg	When proporty right w too hard to enf ore public choicer are
crop_img/micro_econ_note_81_crop_2.jpg	made
crop_img/micro_econ_note_81_crop_3.jpg	③Tax ofr cap the price the exter nality
crop_img/micro_econ_note_81_crop_4.jpg	(Not in exam)
crop_img/micro_econ_note_81_crop_5.jpg	. Ligouvian Tares: Taxes on (-) externality
crop_img/micro_econ_note_81_crop_6.jpg	MSC
crop_img/micro_econ_note_81_crop_7.jpg	MC+Tax
crop_img/micro_econ_note_81_crop_8.jpg	eff
crop_img/micro_econ_note_81_crop_9.jpg	MC(S)
crop_img/micro_econ_note_81_crop_10.jpg	equi
crop_img/micro_econ_note_81_crop_11.jpg	MSB
crop_img/micro_econ_note_81_crop_12.jpg	→
crop_img/micro_econ_note_81_crop_13.jpg	. cap  quota - a podltion qu ta
crop_img/micro_econ_note_81_crop_14.jpg	• Cap at Msc= Mse
crop_img/micro_econ_note_81_crop_15.jpg	Marginal abate ment cost: cost of reducing one addition pollution
crop_img/micro_econ_note_81_crop_16.jpg	unit
crop_img/micro_econ_note_81_crop_17.jpg	) Coase Theorem: if property rigut exist,and tranraction cost of
crop_img/micro_econ_note_81_crop_18.jpg	enforcing them are low,then private thansaction are efficient and
crop_img/micro_econ_note_81_crop_19.jpg	it
crop_img/micro_econ_note_81_crop_20.jpg	doeon't matte who has pro perty sights
crop_img/micro_econ_note_81_crop_21.jpg	Polluter gt property righefficint (thy have to deal with it)
crop_img/micro_econ_note_81_crop_22.jpg	Jf
crop_img/micro_econ_note_81_crop_23.jpg	leople expt Lolluter get proporty rightx efficient if only
crop_img/micro_econ_note_81_crop_24.jpg	low tranaction cost of enf orcing them (lawyor corts)
crop_img/micro_econ_note_81_crop_25.jpg	clavsig ication of goodx:
crop_img/micro_econ_note_81_crop_26.jpg	. Exdudabl :
crop_img/micro_econ_note_81_crop_27.jpg	ponsible to prevent someone from enjoying its benefitr
crop_img/micro_econ_note_81_crop_28.jpg	。 Nonexdudable
crop_img/micro_econ_note_81_crop_29.jpg	. Rival
crop_img/micro_econ_note_81_crop_30.jpg	: one person's wse ↓ a available for others
crop_img/micro_econ_note_82_crop_0.jpg	• Non rival
crop_img/micro_econ_note_82_crop_1.jpg	Exludable + Rival : Food
crop_img/micro_econ_note_82_crop_2.jpg	(lrivate good)
crop_img/micro_econ_note_82_crop_3.jpg	Ex dudable t Nonrival; Internet ( cub yood)
crop_img/micro_econ_note_82_crop_4.jpg	Nonexchudable t Rival : Fish in oceans (Common nesove)
crop_img/micro_econ_note_82_crop_5.jpg	Nonec ludable + Nonnival: Notional defense (Lublic good)
crop_img/micro_econ_note_82_crop_6.jpg	) Freerider problem : feople benefit from goodx/services without paying
crop_img/micro_econ_note_82_crop_7.jpg	for them → Market failure
crop_img/micro_econ_note_82_crop_8.jpg	DWL from overfishing
crop_img/micro_econ_note_82_crop_9.jpg	MSC
crop_img/micro_econ_note_82_crop_10.jpg	Price
crop_img/micro_econ_note_82_crop_11.jpg	the lauge izsh catd, the larger the ast(horder
crop_img/micro_econ_note_82_crop_12.jpg	(tuna)
crop_img/micro_econ_note_82_crop_13.jpg	for other to catch fith)
crop_img/micro_econ_note_82_crop_14.jpg	MC=S
crop_img/micro_econ_note_82_crop_15.jpg	efficient
crop_img/micro_econ_note_82_crop_16.jpg	P
crop_img/micro_econ_note_82_crop_17.jpg	-----DWL
crop_img/micro_econ_note_82_crop_18.jpg	actual
crop_img/micro_econ_note_82_crop_19.jpg	p
crop_img/micro_econ_note_82_crop_20.jpg	I
crop_img/micro_econ_note_82_crop_21.jpg	1
crop_img/micro_econ_note_82_crop_22.jpg	1
crop_img/micro_econ_note_82_crop_23.jpg	MSB=D
crop_img/micro_econ_note_82_crop_24.jpg	|
crop_img/micro_econ_note_82_crop_25.jpg	1
crop_img/micro_econ_note_82_crop_26.jpg	efficient
crop_img/micro_econ_note_82_crop_27.jpg	actual
crop_img/micro_econ_note_82_crop_28.jpg	Quantity
crop_img/micro_econ_note_82_crop_29.jpg	Q
crop_img/micro_econ_note_82_crop_30.jpg	Q
crop_img/micro_econ_note_82_crop_31.jpg	Ctona)
crop_img/micro_econ_note_82_crop_32.jpg	Overfishing
crop_img/micro_econ_note_82_crop_33.jpg	(MB)
crop_img/micro_econ_note_82_crop_34.jpg	 Marginal private benefit
crop_img/micro_econ_note_82_crop_35.jpg	: the benefit that the consumor of a good
crop_img/micro_econ_note_82_crop_36.jpg	on service receives from an additional unit
crop_img/micro_econ_note_82_crop_37.jpg	(MEB)
crop_img/micro_econ_note_82_crop_38.jpg	) Marginal extornal benefit : the benefit that people except cons umers
crop_img/micro_econ_note_82_crop_39.jpg	receivers from an additional unit of a good /rervicer
crop_img/micro_econ_note_82_crop_40.jpg	(MSB)
crop_img/micro_econ_note_82_crop_41.jpg	0) Marginal rocial bene fit:
crop_img/micro_econ_note_82_crop_42.jpg	the marginal ben efit that every one receives
crop_img/micro_econ_note_83_crop_0.jpg	P
crop_img/micro_econ_note_83_crop_1.jpg	MSC(S)
crop_img/micro_econ_note_83_crop_2.jpg	MEB
crop_img/micro_econ_note_83_crop_3.jpg	DWL
crop_img/micro_econ_note_83_crop_4.jpg	7
crop_img/micro_econ_note_83_crop_5.jpg	e88
crop_img/micro_econ_note_83_crop_6.jpg	because at this point people alo
crop_img/micro_econ_note_83_crop_7.jpg	equi
crop_img/micro_econ_note_83_crop_8.jpg	create benefits for otherr, not
crop_img/micro_econ_note_83_crop_9.jpg	only them selves
crop_img/micro_econ_note_83_crop_10.jpg	MSB
crop_img/micro_econ_note_83_crop_11.jpg	MB(0)
crop_img/micro_econ_note_83_crop_12.jpg	→
crop_img/micro_econ_note_83_crop_13.jpg	Q
crop_img/micro_econ_note_83_crop_14.jpg	(ETN)
crop_img/micro_econ_note_83_crop_15.jpg	Approacher to increase eff uing (t) externliies:
crop_img/micro_econ_note_83_crop_16.jpg	① Lublic production : public authority given revenue by gov to produe
crop_img/micro_econ_note_83_crop_17.jpg	ayood/sevie
crop_img/micro_econ_note_83_crop_18.jpg	Subridies: py ment to private producens by gow
crop_img/micro_econ_note_83_crop_19.jpg	③
crop_img/micro_econ_note_83_crop_20.jpg	Voucherx : a to ken gov giver howseholdk to buy a specific
crop_img/micro_econ_note_83_crop_21.jpg	good/rervice
crop_img/micro_econ_note_83_crop_22.jpg	Note: All of there cost money (gov uer taxer),but if done right
crop_img/micro_econ_note_83_crop_23.jpg	can achieve an efficient out come
crop_img/micro_econ_note_83_crop_24.jpg	)The tragey of commony : A person ue too much of a common resource 8.t
crop_img/micro_econ_note_83_crop_25.jpg	they cause others in the sity to suffer
crop_img/micro_econ_note_83_crop_26.jpg	Chap11
crop_img/micro_econ_note_83_crop_27.jpg	) Shont quun: Capital, land, entrepeneurship fixed
crop_img/micro_econ_note_83_crop_28.jpg	Labog is viable
crop_img/micro_econ_note_83_crop_29.jpg	) Long qun : all factor of production can be voried
crop_img/micro_econ_note_84_crop_0.jpg	 Marginal pro duct of labor: D total output rexults from an additional
crop_img/micro_econ_note_84_crop_1.jpg	anit of labor
crop_img/micro_econ_note_84_crop_2.jpg	 Diminishing marginal retun : occur when the marginal pdut of
crop_img/micro_econ_note_84_crop_3.jpg	an additional worker is lers than that of the previow's worker
crop_img/micro_econ_note_84_crop_4.jpg	Output
crop_img/micro_econ_note_84_crop_5.jpg	个
crop_img/micro_econ_note_84_crop_6.jpg	V
crop_img/micro_econ_note_84_crop_7.jpg	Labon
crop_img/micro_econ_note_84_crop_8.jpg	) short-run cost:
crop_img/micro_econ_note_84_crop_9.jpg	(TFC)
crop_img/micro_econ_note_84_crop_10.jpg	.Total fisced cost: the corst of the firm fixed factor
crop_img/micro_econ_note_84_crop_11.jpg	(TVC)
crop_img/micro_econ_note_84_crop_12.jpg	. Total
crop_img/micro_econ_note_84_crop_13.jpg	variable cost : the cost of the firms voriable facto
crop_img/micro_econ_note_84_crop_14.jpg	(TC)
crop_img/micro_econ_note_84_crop_15.jpg	·Total cst ; TC=TFC+TYC
crop_img/micro_econ_note_84_crop_16.jpg	(AFC)
crop_img/micro_econ_note_84_crop_17.jpg	TFC
crop_img/micro_econ_note_84_crop_18.jpg	• Average fined cort
crop_img/micro_econ_note_84_crop_19.jpg	…
crop_img/micro_econ_note_84_crop_20.jpg	Q
crop_img/micro_econ_note_84_crop_21.jpg	(AVC)
crop_img/micro_econ_note_84_crop_22.jpg	TVC
crop_img/micro_econ_note_84_crop_23.jpg	 Average voriable cst:
crop_img/micro_econ_note_84_crop_24.jpg	Q
crop_img/micro_econ_note_84_crop_25.jpg	(ATC)
crop_img/micro_econ_note_84_crop_26.jpg	Average total conrt : ATC= AFC +AVC
crop_img/micro_econ_note_84_crop_27.jpg	 Marginal Cont: The in crease in to tal cost from a one -unit incease
crop_img/micro_econ_note_84_crop_28.jpg	in out put
crop_img/micro_econ_note_84_crop_29.jpg	ΔTC
crop_img/micro_econ_note_84_crop_30.jpg	.MC
crop_img/micro_econ_note_84_crop_31.jpg	△Q
crop_img/micro_econ_note_85_crop_0.jpg	corst
crop_img/micro_econ_note_85_crop_1.jpg	ATC
crop_img/micro_econ_note_85_crop_2.jpg	个
crop_img/micro_econ_note_85_crop_3.jpg	MC
crop_img/micro_econ_note_85_crop_4.jpg	AVC ( variable cost keep
crop_img/micro_econ_note_85_crop_5.jpg	lowest
crop_img/micro_econ_note_85_crop_6.jpg	increaring)
crop_img/micro_econ_note_85_crop_7.jpg	lowest
crop_img/micro_econ_note_85_crop_8.jpg	AFC
crop_img/micro_econ_note_85_crop_9.jpg	output (Q)
crop_img/micro_econ_note_85_crop_10.jpg	) Shoat-qrun cost8:
crop_img/micro_econ_note_85_crop_11.jpg	colst
crop_img/micro_econ_note_85_crop_12.jpg	个
crop_img/micro_econ_note_85_crop_13.jpg	(I machine)
crop_img/micro_econ_note_85_crop_14.jpg	(2ma)
crop_img/micro_econ_note_85_crop_15.jpg	(3ma)
crop_img/micro_econ_note_85_crop_16.jpg	(4 ma
crop_img/micro_econ_note_85_crop_17.jpg	ATC2
crop_img/micro_econ_note_85_crop_18.jpg	ATCH
crop_img/micro_econ_note_85_crop_19.jpg	ATC,
crop_img/micro_econ_note_85_crop_20.jpg	ATC
crop_img/micro_econ_note_85_crop_21.jpg	3
crop_img/micro_econ_note_85_crop_22.jpg	output (Q)
crop_img/micro_econ_note_85_crop_23.jpg	. ↑capital→↑out put
crop_img/micro_econ_note_85_crop_24.jpg	(LRAC)
crop_img/micro_econ_note_85_crop_25.jpg	 Long-Run Avorage lost Curve: a firm oferates on its LRAc when it
crop_img/micro_econ_note_85_crop_26.jpg	pro ducer a given output t the least porsible cost
crop_img/micro_econ_note_85_crop_27.jpg	corst
crop_img/micro_econ_note_85_crop_28.jpg	(I machine)
crop_img/micro_econ_note_85_crop_29.jpg	(2ma> (3ma)
crop_img/micro_econ_note_85_crop_30.jpg	(4ma
crop_img/micro_econ_note_85_crop_31.jpg	ATCN
crop_img/micro_econ_note_85_crop_32.jpg	ATC,
crop_img/micro_econ_note_85_crop_33.jpg	ATC
crop_img/micro_econ_note_85_crop_34.jpg	LRAC
crop_img/micro_econ_note_85_crop_35.jpg	3
crop_img/micro_econ_note_85_crop_36.jpg	output()
crop_img/micro_econ_note_86_crop_0.jpg	Economies of scale: feeatwes of a firmx techno logy that makes
crop_img/micro_econ_note_86_crop_1.jpg	ATc fall as O inoeases
crop_img/micro_econ_note_86_crop_2.jpg	. Whore LRAC falld
crop_img/micro_econ_note_86_crop_3.jpg	maker
crop_img/micro_econ_note_86_crop_4.jpg	) Diseconomies of scale:
crop_img/micro_econ_note_86_crop_5.jpg	Atc quise
crop_img/micro_econ_note_86_crop_6.jpg	. Where LRAC inoveases
crop_img/micro_econ_note_86_crop_7.jpg	) Constant greturn to rcale :
crop_img/micro_econ_note_86_crop_8.jpg	maker
crop_img/micro_econ_note_86_crop_9.jpg	ATC conxtant
crop_img/micro_econ_note_86_crop_10.jpg	. Where LRAC is horitontal
crop_img/micro_econ_note_86_crop_11.jpg	Minimum Efficient Scale: the smallest output at which long-run
crop_img/micro_econ_note_86_crop_12.jpg	.
crop_img/micro_econ_note_86_crop_13.jpg	average cost reaches minimum
crop_img/micro_econ_note_86_crop_14.jpg	colst
crop_img/micro_econ_note_86_crop_15.jpg	( I machine)
crop_img/micro_econ_note_86_crop_16.jpg	(2ma) (3ma)
crop_img/micro_econ_note_86_crop_17.jpg	(4ma
crop_img/micro_econ_note_86_crop_18.jpg	ATCA
crop_img/micro_econ_note_86_crop_19.jpg	ATC
crop_img/micro_econ_note_86_crop_20.jpg	ATC
crop_img/micro_econ_note_86_crop_21.jpg	ATC
crop_img/micro_econ_note_86_crop_22.jpg	2
crop_img/micro_econ_note_86_crop_23.jpg	LRAC
crop_img/micro_econ_note_86_crop_24.jpg	3
crop_img/micro_econ_note_86_crop_25.jpg	output (Q)
crop_img/micro_econ_note_86_crop_26.jpg	min efficient
crop_img/micro_econ_note_86_crop_27.jpg	scale
crop_img/micro_econ_note_86_crop_28.jpg	Chap 1o:
crop_img/micro_econ_note_86_crop_29.jpg	Intho to Firmn
crop_img/micro_econ_note_86_crop_30.jpg	Bwsiner onganizaton
crop_img/micro_econ_note_86_crop_31.jpg	4market type:perfct m mono polistic compmonoply gopoly
crop_img/micro_econ_note_86_crop_32.jpg	) lorfect coml:
crop_img/micro_econ_note_86_crop_33.jpg	. Many buyers and sellers with an identical product
crop_img/micro_econ_note_87_crop_0.jpg	. No in dividual buyer or seller can affect price (price-taker)
crop_img/micro_econ_note_87_crop_1.jpg	. No baoier to entay of new firms
crop_img/micro_econ_note_87_crop_2.jpg	Ex: wheat,cotin ) price
crop_img/micro_econ_note_87_crop_3.jpg	.)
crop_img/micro_econ_note_87_crop_4.jpg	Monopolistic comp:
crop_img/micro_econ_note_87_crop_5.jpg	A large numbou of firm compete by mahing similor but sighly
crop_img/micro_econ_note_87_crop_6.jpg	digf fro dot (frduct diff erentiation)
crop_img/micro_econ_note_87_crop_7.jpg	)Monopoly:
crop_img/micro_econ_note_87_crop_8.jpg	One firm
crop_img/micro_econ_note_87_crop_9.jpg	. froduce good I sor vice with no close substitute
crop_img/micro_econ_note_87_crop_10.jpg	. a baoiers to entay
crop_img/micro_econ_note_87_crop_11.jpg	Can be lo cal or ylobal
crop_img/micro_econ_note_87_crop_12.jpg	Ex of local monopoly : water supp liers
crop_img/micro_econ_note_87_crop_13.jpg	) oligopo ly
crop_img/micro_econ_note_87_crop_14.jpg	. A &mall # firmy compete
crop_img/micro_econ_note_87_crop_15.jpg	. Might produc diff erentiated pro ducts
crop_img/micro_econ_note_87_crop_16.jpg	.Firms act strate gically by an ticipating actionn of other player
crop_img/micro_econ_note_87_crop_17.jpg	-) comp le vel of the 4 market ty pes:
crop_img/micro_econ_note_87_crop_18.jpg	perfect comp
crop_img/micro_econ_note_87_crop_19.jpg	>mono comp>
crop_img/micro_econ_note_87_crop_20.jpg	oli gopoly
crop_img/micro_econ_note_87_crop_21.jpg	>mono
crop_img/micro_econ_note_87_crop_22.jpg	4-firm%
crop_img/micro_econ_note_87_crop_23.jpg	↑
crop_img/micro_econ_note_87_crop_24.jpg	) Four-firm concentration ratio: % of total value of sales accounted
crop_img/micro_econ_note_87_crop_25.jpg	for by the 4 lorgest firmn in an industry
crop_img/micro_econ_note_87_crop_26.jpg	.o for perufect comp
crop_img/micro_econ_note_88_crop_0.jpg	1o0o for monopoly
crop_img/micro_econ_note_88_crop_1.jpg	.>6o : hig hly concentrated and dominated by a few firmk
crop_img/micro_econ_note_88_crop_2.jpg	 <60% : indicate a comp market
crop_img/micro_econ_note_88_crop_3.jpg	(UH inden)
crop_img/micro_econ_note_88_crop_4.jpg	Herfin dahl- nirsch man Index:
crop_img/micro_econ_note_88_crop_5.jpg	squared per centage mar ket share
crop_img/micro_econ_note_88_crop_6.jpg	of cach firm summed over the largest 5o firmy in the mrket
crop_img/micro_econ_note_88_crop_7.jpg	 HHI is mall in perfect compe tition
crop_img/micro_econ_note_88_crop_8.jpg	. Monopoly HHI = 100 = 10000
crop_img/micro_econ_note_88_crop_9.jpg	. A market where HHI > a5oo ix uncompetitive
crop_img/micro_econ_note_88_crop_10.jpg	) Limitations of concen tration mearwre: fail to account for
crop_img/micro_econ_note_88_crop_11.jpg	① Greographical scope of the market: because it taker on the whole
crop_img/micro_econ_note_88_crop_12.jpg	nation
crop_img/micro_econ_note_88_crop_13.jpg	Ex: concentration measwe for new spaper is low, but in cities it is
crop_img/micro_econ_note_88_crop_14.jpg	highly
crop_img/micro_econ_note_88_crop_15.jpg	concentnated
crop_img/micro_econ_note_88_crop_16.jpg	2
crop_img/micro_econ_note_88_crop_17.jpg	Barriers to entry and firm turinovor :
crop_img/micro_econ_note_88_crop_18.jpg	. Some market wre highly concentrated but entry ix easy and tunover
crop_img/micro_econ_note_88_crop_19.jpg	large
crop_img/micro_econ_note_88_crop_20.jpg	.A marhet with few firms might be eompetitive because of potential
crop_img/micro_econ_note_88_crop_21.jpg	entry
crop_img/micro_econ_note_88_crop_22.jpg	③
crop_img/micro_econ_note_88_crop_23.jpg	Market doesn't equate to industry
crop_img/micro_econ_note_88_crop_24.jpg	. Concentration ratio bared on indus tay,but market ir wually maller
crop_img/micro_econ_note_88_crop_25.jpg	than industgies
crop_img/micro_econ_note_89_crop_0.jpg	Ex: Phar mace tical indus tay has a low concentration ratio but
crop_img/micro_econ_note_89_crop_1.jpg	the measler vaccine and AIos fighting drug dont ompee
crop_img/micro_econ_note_89_crop_2.jpg	With each otheor ( many mono polies)
crop_img/micro_econ_note_89_crop_3.jpg	.Firms aussigned to one industoy even if oporate in many mar ketr
crop_img/micro_econ_note_89_crop_4.jpg	. Firmy switch from one market to ano thr fon opportunitier
crop_img/micro_econ_note_89_crop_5.jpg	 Economies of Scope: when a fiam user speci alized (of ten expensive)
crop_img/micro_econ_note_89_crop_6.jpg	re sovaer to pro due a range of goods and services
crop_img/micro_econ_note_89_crop_7.jpg	Chap 2:
crop_img/micro_econ_note_89_crop_8.jpg	Perfect Competi tion
crop_img/micro_econ_note_89_crop_9.jpg	) Ierfect Compe tition : a market w/
crop_img/micro_econ_note_89_crop_10.jpg	• Many buyers and sellers
crop_img/micro_econ_note_89_crop_11.jpg	Identical fro duct
crop_img/micro_econ_note_89_crop_12.jpg	a No qertrictions on entoy to the market
crop_img/micro_econ_note_89_crop_13.jpg	) Price takers: firms that cannot inf huence the market price because
crop_img/micro_econ_note_89_crop_14.jpg	its production ix an in rignificant part of the total market
crop_img/micro_econ_note_89_crop_15.jpg	In perfect comp market, all firms are pice tiakers,f= market P
crop_img/micro_econ_note_89_crop_16.jpg	(choorge higher → no one wilel buy)
crop_img/micro_econ_note_89_crop_17.jpg	(TR)
crop_img/micro_econ_note_89_crop_18.jpg	-) Total Revenue =  ×Q
crop_img/micro_econ_note_89_crop_19.jpg	(TC)
crop_img/micro_econ_note_89_crop_20.jpg	) to tal cost
crop_img/micro_econ_note_89_crop_21.jpg	=+VC+TFC
crop_img/micro_econ_note_89_crop_22.jpg	(EL)
crop_img/micro_econ_note_89_crop_23.jpg	IfTR-TC<0
crop_img/micro_econ_note_89_crop_24.jpg	 Economic profit = TR-Tc when TR-TC>0
crop_img/micro_econ_note_89_crop_25.jpg	→
crop_img/micro_econ_note_89_crop_26.jpg	(MR)
crop_img/micro_econ_note_89_crop_27.jpg	△TR
crop_img/micro_econ_note_89_crop_28.jpg	.) Marginal Revenue
crop_img/micro_econ_note_89_crop_29.jpg	=
crop_img/micro_econ_note_89_crop_30.jpg	△Q
crop_img/micro_econ_note_90_crop_0.jpg	Market for Corn
crop_img/micro_econ_note_90_crop_1.jpg	P
crop_img/micro_econ_note_90_crop_2.jpg	S
crop_img/micro_econ_note_90_crop_3.jpg	D
crop_img/micro_econ_note_90_crop_4.jpg	I=Imarket
crop_img/micro_econ_note_90_crop_5.jpg	(fon all
crop_img/micro_econ_note_90_crop_6.jpg	firm)
crop_img/micro_econ_note_90_crop_7.jpg	→
crop_img/micro_econ_note_90_crop_8.jpg	Q
crop_img/micro_econ_note_90_crop_9.jpg	TR
crop_img/micro_econ_note_90_crop_10.jpg	(I =I market = const)
crop_img/micro_econ_note_90_crop_11.jpg	TR
crop_img/micro_econ_note_90_crop_12.jpg	Q
crop_img/micro_econ_note_90_crop_13.jpg	MR = morket
crop_img/micro_econ_note_90_crop_14.jpg	(slope of TR os.a)
crop_img/micro_econ_note_90_crop_15.jpg	→
crop_img/micro_econ_note_90_crop_16.jpg	Q
crop_img/micro_econ_note_90_crop_17.jpg	 Illurtrating econ frofit and los:
crop_img/micro_econ_note_91_crop_0.jpg	→
crop_img/micro_econ_note_91_crop_1.jpg	Q
crop_img/micro_econ_note_91_crop_2.jpg	J
crop_img/micro_econ_note_91_crop_3.jpg	firm should
crop_img/micro_econ_note_91_crop_4.jpg	produce at
crop_img/micro_econ_note_91_crop_5.jpg	this Q
crop_img/micro_econ_note_91_crop_6.jpg	0) Illurthating MR,MC:
crop_img/micro_econ_note_91_crop_7.jpg	MR, MC
crop_img/micro_econ_note_91_crop_8.jpg	MC
crop_img/micro_econ_note_91_crop_9.jpg	MR
crop_img/micro_econ_note_91_crop_10.jpg	→
crop_img/micro_econ_note_91_crop_11.jpg	Q
crop_img/micro_econ_note_91_crop_12.jpg	) Shutdown Pecision: When I< ATc → eccon lors. Consider;
crop_img/micro_econ_note_91_crop_13.jpg	.If l>Avc : can necovo in a long prun
crop_img/micro_econ_note_91_crop_14.jpg	→ No shut down
crop_img/micro_econ_note_91_crop_15.jpg	.Is l< Avc : the longer operating, the more losing
crop_img/micro_econ_note_91_crop_16.jpg	→ Shuit down
crop_img/micro_econ_note_92_crop_0.jpg	)Breakeven:
crop_img/micro_econ_note_92_crop_1.jpg	where I=ATC
crop_img/micro_econ_note_92_crop_2.jpg	MC
crop_img/micro_econ_note_92_crop_3.jpg	P
crop_img/micro_econ_note_92_crop_4.jpg	ATC
crop_img/micro_econ_note_92_crop_5.jpg	个
crop_img/micro_econ_note_92_crop_6.jpg	/AVC
crop_img/micro_econ_note_92_crop_7.jpg	breakeven
crop_img/micro_econ_note_92_crop_8.jpg	shut down
crop_img/micro_econ_note_92_crop_9.jpg	→
crop_img/micro_econ_note_92_crop_10.jpg	Q
crop_img/micro_econ_note_92_crop_11.jpg	When fiam decides to shut down:
crop_img/micro_econ_note_92_crop_12.jpg	MC
crop_img/micro_econ_note_92_crop_13.jpg	f
crop_img/micro_econ_note_92_crop_14.jpg	shortrun
crop_img/micro_econ_note_92_crop_15.jpg	个
crop_img/micro_econ_note_92_crop_16.jpg	supoly curve
crop_img/micro_econ_note_92_crop_17.jpg	AVC
crop_img/micro_econ_note_92_crop_18.jpg	→
crop_img/micro_econ_note_92_crop_19.jpg	Q
crop_img/micro_econ_note_92_crop_20.jpg	In the short qun, firm's carital  # finmn stay the tame)
crop_img/micro_econ_note_92_crop_21.jpg	and I stays the same (at Imarket)
crop_img/micro_econ_note_92_crop_22.jpg	 Short-qun Market Supply curve : showr the quantity supp hed y
crop_img/micro_econ_note_92_crop_23.jpg	all firms at cach price in the short rus
crop_img/micro_econ_note_92_crop_24.jpg	.) Losri ble Short-qun outcomer :
crop_img/micro_econ_note_93_crop_0.jpg	Q
crop_img/micro_econ_note_93_crop_1.jpg	efficient
crop_img/micro_econ_note_93_crop_2.jpg	• Econ frofit:
crop_img/micro_econ_note_93_crop_3.jpg	P>ATC
crop_img/micro_econ_note_93_crop_4.jpg	↑P
crop_img/micro_econ_note_93_crop_5.jpg	econ paofit
crop_img/micro_econ_note_93_crop_6.jpg	MC
crop_img/micro_econ_note_93_crop_7.jpg	MR( Revenne/ unit)
crop_img/micro_econ_note_93_crop_8.jpg	V
crop_img/micro_econ_note_93_crop_9.jpg	ATC
crop_img/micro_econ_note_93_crop_10.jpg	(cost/unit)
crop_img/micro_econ_note_93_crop_11.jpg	Q
crop_img/micro_econ_note_93_crop_12.jpg	efficient
crop_img/micro_econ_note_93_crop_13.jpg	. Econ LoN: L<ATC
crop_img/micro_econ_note_93_crop_14.jpg	↑p
crop_img/micro_econ_note_93_crop_15.jpg	MC
crop_img/micro_econ_note_93_crop_16.jpg	ATC
crop_img/micro_econ_note_93_crop_17.jpg	econ lo
crop_img/micro_econ_note_93_crop_18.jpg	(cost/unit)
crop_img/micro_econ_note_93_crop_19.jpg	MR
crop_img/micro_econ_note_93_crop_20.jpg	Q
crop_img/micro_econ_note_93_crop_21.jpg	efficient
crop_img/micro_econ_note_94_crop_0.jpg	 Note: In the mort -qun , a firm can make an econ los,
crop_img/micro_econ_note_94_crop_1.jpg	econ porofit, on break even
crop_img/micro_econ_note_94_crop_2.jpg	In the long-qun, a perfect ly competitive firm con only
crop_img/micro_econ_note_94_crop_3.jpg	make zoro econ profit dne to entry and exit into the market
crop_img/micro_econ_note_94_crop_4.jpg	) Entor: when figrmx make econ gfrofit (e>Atc),new firmx
crop_img/micro_econ_note_94_crop_5.jpg	will entor the mar ket
crop_img/micro_econ_note_94_crop_6.jpg	→ Imorket ↓ and econ grof ↓
crop_img/micro_econ_note_94_crop_7.jpg	 Exit: when fisms have econ loss (e<Arc))firmn exit market
crop_img/micro_econ_note_94_crop_8.jpg	→ I morket T and econ prof t
crop_img/micro_econ_note_94_crop_9.jpg	 Note: At equi (no econ prof or los) )enter and exit stop
crop_img/micro_econ_note_94_crop_10.jpg	. In the long aun ,I=ATC
crop_img/micro_econ_note_94_crop_11.jpg	)Demand T:
crop_img/micro_econ_note_94_crop_12.jpg	Short 9un
crop_img/micro_econ_note_94_crop_13.jpg	Long run
crop_img/micro_econ_note_94_crop_14.jpg	P
crop_img/micro_econ_note_94_crop_15.jpg	S
crop_img/micro_econ_note_94_crop_16.jpg	P
crop_img/micro_econ_note_94_crop_17.jpg	S
crop_img/micro_econ_note_94_crop_18.jpg	S1
crop_img/micro_econ_note_94_crop_19.jpg	fP_{1 } ATC
crop_img/micro_econ_note_94_crop_20.jpg	B
crop_img/micro_econ_note_94_crop_21.jpg	$f_1}$
crop_img/micro_econ_note_94_crop_22.jpg	B
crop_img/micro_econ_note_94_crop_23.jpg	$_{1}$
crop_img/micro_econ_note_94_crop_24.jpg	L。
crop_img/micro_econ_note_94_crop_25.jpg	=ATC
crop_img/micro_econ_note_94_crop_26.jpg	\_}$
crop_img/micro_econ_note_94_crop_27.jpg	P_}$
crop_img/micro_econ_note_94_crop_28.jpg	A
crop_img/micro_econ_note_94_crop_29.jpg	A
crop_img/micro_econ_note_94_crop_30.jpg	(
crop_img/micro_econ_note_94_crop_31.jpg	2
crop_img/micro_econ_note_94_crop_32.jpg	1
crop_img/micro_econ_note_94_crop_33.jpg	D}$
crop_img/micro_econ_note_94_crop_34.jpg	D
crop_img/micro_econ_note_94_crop_35.jpg	4
crop_img/micro_econ_note_94_crop_36.jpg	1
crop_img/micro_econ_note_94_crop_37.jpg	→
crop_img/micro_econ_note_94_crop_38.jpg	0
crop_img/micro_econ_note_94_crop_39.jpg	Q
crop_img/micro_econ_note_94_crop_40.jpg	Q
crop_img/micro_econ_note_94_crop_41.jpg	.Shont run .0T→eT,Q个，econ profit occuus
crop_img/micro_econ_note_95_crop_0.jpg	Long sun: new firms entor →S shift8 sight,pv, OT, tero
crop_img/micro_econ_note_95_crop_1.jpg	econ pro fit,# firmx
crop_img/micro_econ_note_95_crop_2.jpg	)Demandv:
crop_img/micro_econ_note_95_crop_3.jpg	Shont run
crop_img/micro_econ_note_95_crop_4.jpg	Long un
crop_img/micro_econ_note_95_crop_5.jpg	P
crop_img/micro_econ_note_95_crop_6.jpg	P
crop_img/micro_econ_note_95_crop_7.jpg	S0
crop_img/micro_econ_note_95_crop_8.jpg	个
crop_img/micro_econ_note_95_crop_9.jpg	B
crop_img/micro_econ_note_95_crop_10.jpg	$_1$
crop_img/micro_econ_note_95_crop_11.jpg	P
crop_img/micro_econ_note_95_crop_12.jpg	A
crop_img/micro_econ_note_95_crop_13.jpg	P
crop_img/micro_econ_note_95_crop_14.jpg	A
crop_img/micro_econ_note_95_crop_15.jpg	6
crop_img/micro_econ_note_95_crop_16.jpg	B
crop_img/micro_econ_note_95_crop_17.jpg	1
crop_img/micro_econ_note_95_crop_18.jpg	D{}$
crop_img/micro_econ_note_95_crop_19.jpg	$P_1}$
crop_img/micro_econ_note_95_crop_20.jpg	D_{1$
crop_img/micro_econ_note_95_crop_21.jpg	0o
crop_img/micro_econ_note_95_crop_22.jpg	Do
crop_img/micro_econ_note_95_crop_23.jpg	→
crop_img/micro_econ_note_95_crop_24.jpg	>
crop_img/micro_econ_note_95_crop_25.jpg	a_{，Q。
crop_img/micro_econ_note_95_crop_26.jpg	Q
crop_img/micro_econ_note_95_crop_27.jpg	Q
crop_img/micro_econ_note_95_crop_28.jpg	Chey 13:
crop_img/micro_econ_note_95_crop_29.jpg	Mono poly
crop_img/micro_econ_note_95_crop_30.jpg	 3 typer of barrier to entay:
crop_img/micro_econ_note_95_crop_31.jpg	① Natmal : economies of scale enable one firm to supgty the entire
crop_img/micro_econ_note_95_crop_32.jpg	market
crop_img/micro_econ_note_95_crop_33.jpg	2
crop_img/micro_econ_note_95_crop_34.jpg	ownership : one firm owns a xigni ficant portion of key rusouce
crop_img/micro_econ_note_95_crop_35.jpg	③
crop_img/micro_econ_note_95_crop_36.jpg	begal.cometition and enty are tted by granting of
crop_img/micro_econ_note_95_crop_37.jpg	public franchise: exchusive rght to supply a god/service (uses
crop_img/micro_econ_note_95_crop_38.jpg	gov license: controlr entry into occupations/industries (med,law)
crop_img/micro_econ_note_95_crop_39.jpg	patent : right for invention
crop_img/micro_econ_note_95_crop_40.jpg	copyright:right granted to an athor/compoer for some
crop_img/micro_econ_note_96_crop_0.jpg	artistic wok
crop_img/micro_econ_note_96_crop_1.jpg	。)
crop_img/micro_econ_note_96_crop_2.jpg	Monopoly Brice -Setting Strategies:
crop_img/micro_econ_note_96_crop_3.jpg	. single frice monopoly : all units have the same I
crop_img/micro_econ_note_96_crop_4.jpg	unity
crop_img/micro_econ_note_96_crop_5.jpg	diff
crop_img/micro_econ_note_96_crop_6.jpg	P
crop_img/micro_econ_note_96_crop_7.jpg	Fon Single I mono :
crop_img/micro_econ_note_96_crop_8.jpg	) Marginal Revenue urve:
crop_img/micro_econ_note_96_crop_9.jpg	alwayx less than price
crop_img/micro_econ_note_96_crop_10.jpg	P
crop_img/micro_econ_note_96_crop_11.jpg	个
crop_img/micro_econ_note_96_crop_12.jpg	D
crop_img/micro_econ_note_96_crop_13.jpg	MR
crop_img/micro_econ_note_96_crop_14.jpg	Q
crop_img/micro_econ_note_96_crop_15.jpg	 Marginal Revenue and Elartiaity: monopoly nevor produes on ineastic
crop_img/micro_econ_note_96_crop_16.jpg	portion of D because at inelastic
crop_img/micro_econ_note_96_crop_17.jpg	P
crop_img/micro_econ_note_96_crop_18.jpg	portion,T→&maller T@puichared
crop_img/micro_econ_note_96_crop_19.jpg	个
crop_img/micro_econ_note_96_crop_20.jpg	Ed>1$
crop_img/micro_econ_note_96_crop_21.jpg	 eroduction happens
crop_img/micro_econ_note_96_crop_22.jpg	ea<1
crop_img/micro_econ_note_96_crop_23.jpg	MR
crop_img/micro_econ_note_96_crop_24.jpg	D
crop_img/micro_econ_note_96_crop_25.jpg	Q
crop_img/micro_econ_note_96_crop_26.jpg	Monopoly can dereare a and T I to T proffit
crop_img/micro_econ_note_97_crop_0.jpg	Vprofit =tR-tc
crop_img/micro_econ_note_97_crop_1.jpg	Qmonopoly
crop_img/micro_econ_note_97_crop_2.jpg	Q
crop_img/micro_econ_note_97_crop_3.jpg	.) man profit occws at MR= MC
crop_img/micro_econ_note_97_crop_4.jpg	P
crop_img/micro_econ_note_97_crop_5.jpg	个
crop_img/micro_econ_note_97_crop_6.jpg	MC
crop_img/micro_econ_note_97_crop_7.jpg	90s
crop_img/micro_econ_note_97_crop_8.jpg	p*
crop_img/micro_econ_note_97_crop_9.jpg	ATC
crop_img/micro_econ_note_97_crop_10.jpg	1
crop_img/micro_econ_note_97_crop_11.jpg	MC=MR
crop_img/micro_econ_note_97_crop_12.jpg	0
crop_img/micro_econ_note_97_crop_13.jpg	MR
crop_img/micro_econ_note_97_crop_14.jpg	7
crop_img/micro_econ_note_97_crop_15.jpg	efficient
crop_img/micro_econ_note_97_crop_16.jpg	. p* doern't have to →l。 beecause no firms can enteoru
crop_img/micro_econ_note_97_crop_17.jpg	→make profit even in the long run
crop_img/micro_econ_note_97_crop_18.jpg	A single-price monopoly produce a &maller output and charges
crop_img/micro_econ_note_97_crop_19.jpg	highor I than perfect comp market
crop_img/micro_econ_note_97_crop_20.jpg	) Lerfect comp surplus: just like the simple market prototyre)
crop_img/micro_econ_note_97_crop_21.jpg	except s can shyt down
crop_img/micro_econ_note_98_crop_0.jpg	Q
crop_img/micro_econ_note_98_crop_1.jpg	) Monopoly
crop_img/micro_econ_note_98_crop_2.jpg	S
crop_img/micro_econ_note_98_crop_3.jpg	*
crop_img/micro_econ_note_98_crop_4.jpg	*
crop_img/micro_econ_note_98_crop_5.jpg	f
crop_img/micro_econ_note_98_crop_6.jpg	L
crop_img/micro_econ_note_98_crop_7.jpg	N
crop_img/micro_econ_note_98_crop_8.jpg	DWL
crop_img/micro_econ_note_98_crop_9.jpg	D
crop_img/micro_econ_note_98_crop_10.jpg	Q*
crop_img/micro_econ_note_98_crop_11.jpg	For frice dix orimination monopoly
crop_img/micro_econ_note_98_crop_12.jpg	)& kinds of I disc:
crop_img/micro_econ_note_98_crop_13.jpg	Digf l for diff buyerr
crop_img/micro_econ_note_98_crop_14.jpg	.Digg s for diff units of goods
crop_img/micro_econ_note_98_crop_15.jpg	0
crop_img/micro_econ_note_98_crop_16.jpg	Baopertier
crop_img/micro_econ_note_98_crop_17.jpg	By getting buyor to pay I dsert to the man willingness
crop_img/micro_econ_note_98_crop_18.jpg	→ Cap tue some Cs into fs
crop_img/micro_econ_note_98_crop_19.jpg	→T ls and eion pro fit
crop_img/micro_econ_note_99_crop_0.jpg	ferfect I disc : an eetreme case whore each unit ins sold at mae
crop_img/micro_econ_note_99_crop_1.jpg	)
crop_img/micro_econ_note_99_crop_2.jpg	willingnewr
crop_img/micro_econ_note_99_crop_3.jpg	→ No Cs, all become LS
crop_img/micro_econ_note_99_crop_4.jpg	.No OL → ef ficient
crop_img/micro_econ_note_99_crop_5.jpg	.The more per fedt ly the mo nogoly can I disc) the more efficient
crop_img/micro_econ_note_99_crop_6.jpg	) Regulating mono po lies:
crop_img/micro_econ_note_99_crop_7.jpg	. MC ericing : L=MC → econ loN
crop_img/micro_econ_note_99_crop_8.jpg	. AVC friciny:L=AVC→ breakeven
crop_img/micro_econ_note_99_crop_9.jpg	. a methods to implement Avc pricing :
crop_img/micro_econ_note_99_crop_10.jpg	① Rate of etuun segulation: A finm must jus tify it I by
crop_img/micro_econ_note_99_crop_11.jpg	justify its rate of ret urn
crop_img/micro_econ_note_99_crop_12.jpg	f cap regulation : I ceiling
crop_img/micro_econ_note_99_crop_13.jpg	2
crop_img/micro_econ_note_99_crop_14.jpg	Chap 14:
crop_img/micro_econ_note_99_crop_15.jpg	Monopo lirtic Competition
crop_img/micro_econ_note_99_crop_16.jpg	) Mono comp :
crop_img/micro_econ_note_99_crop_17.jpg	. A large # firms
crop_img/micro_econ_note_99_crop_18.jpg	 froducing a dif ferentiated product
crop_img/micro_econ_note_99_crop_19.jpg	. No bariervs to entry
crop_img/micro_econ_note_99_crop_20.jpg	)and a decisionl:
crop_img/micro_econ_note_99_crop_21.jpg	 A firm in mono po comp produce like a bingle-price mono
crop_img/micro_econ_note_99_crop_22.jpg	. In a short run, may earn econ ppo fit /los/breakever
crop_img/micro_econ_note_99_crop_23.jpg	. In a long run) only earn breakeven (due to entor/ leave)
crop_img/micro_econ_note_100_crop_0.jpg	.) Markup = s- MC
crop_img/micro_econ_note_100_crop_1.jpg	For perfect comp , Markup =0
crop_img/micro_econ_note_100_crop_2.jpg	 For mono com)
crop_img/micro_econ_note_100_crop_3.jpg	Markup >0
crop_img/micro_econ_note_100_crop_4.jpg	) Excev capacity
crop_img/micro_econ_note_100_crop_5.jpg	Qesf
crop_img/micro_econ_note_100_crop_6.jpg	-Qprod ( es when I=ATC)
crop_img/micro_econ_note_100_crop_7.jpg	=1
crop_img/micro_econ_note_100_crop_8.jpg	=Qprod
crop_img/micro_econ_note_100_crop_9.jpg	 Fon mono comp)
crop_img/micro_econ_note_100_crop_10.jpg	Qeff
crop_img/micro_econ_note_100_crop_11.jpg	∠Q
crop_img/micro_econ_note_100_crop_12.jpg	prod
crop_img/micro_econ_note_100_crop_13.jpg	P
crop_img/micro_econ_note_100_crop_14.jpg	MC
crop_img/micro_econ_note_100_crop_15.jpg	p
crop_img/micro_econ_note_100_crop_16.jpg	MC
crop_img/micro_econ_note_100_crop_17.jpg	ATC
crop_img/micro_econ_note_100_crop_18.jpg	个
crop_img/micro_econ_note_100_crop_19.jpg	ATC
crop_img/micro_econ_note_100_crop_20.jpg	fsell
crop_img/micro_econ_note_100_crop_21.jpg	lsll
crop_img/micro_econ_note_100_crop_22.jpg	D=MR
crop_img/micro_econ_note_100_crop_23.jpg	I moikup
crop_img/micro_econ_note_100_crop_24.jpg	大
crop_img/micro_econ_note_100_crop_25.jpg	=be88
crop_img/micro_econ_note_100_crop_26.jpg	lest
crop_img/micro_econ_note_100_crop_27.jpg	MRi
crop_img/micro_econ_note_100_crop_28.jpg	D
crop_img/micro_econ_note_100_crop_29.jpg	>
crop_img/micro_econ_note_100_crop_30.jpg	aeff
crop_img/micro_econ_note_100_crop_31.jpg	Q
crop_img/micro_econ_note_100_crop_32.jpg	aprod
crop_img/micro_econ_note_100_crop_33.jpg	Q
crop_img/micro_econ_note_100_crop_34.jpg	aprod
crop_img/micro_econ_note_100_crop_35.jpg	=aegs
crop_img/micro_econ_note_100_crop_36.jpg	) Efficiency :
crop_img/micro_econ_note_100_crop_37.jpg	when MSB=MSC
crop_img/micro_econ_note_100_crop_38.jpg	MSB =L
crop_img/micro_econ_note_100_crop_39.jpg	. MSC = MC
crop_img/micro_econ_note_100_crop_40.jpg	.And 2>MC
crop_img/micro_econ_note_100_crop_41.jpg	But product voriety comer w/a cast→ Cvar
crop_img/micro_econ_note_100_crop_42.jpg	⇒Igl=MC+CorEf
crop_img/micro_econ_note_100_crop_43.jpg	o therwise not eff
crop_img/micro_econ_note_101_crop_0.jpg	Oli go poly
crop_img/micro_econ_note_101_crop_1.jpg	Chap 15:
crop_img/micro_econ_note_101_crop_2.jpg	) Oligopoly:
crop_img/micro_econ_note_101_crop_3.jpg	. A mall # finm&
crop_img/micro_econ_note_101_crop_4.jpg	 Natural or bgal barierr to entry
crop_img/micro_econ_note_101_crop_5.jpg	. Identical / differentiated product
crop_img/micro_econ_note_101_crop_6.jpg	. Compete on I,a, and mar heting
crop_img/micro_econ_note_101_crop_7.jpg	 Duopoly: market w/ only 2 firm
crop_img/micro_econ_note_101_crop_8.jpg	)2ro pertiey:
crop_img/micro_econ_note_101_crop_9.jpg	.Interdependence : I and de cision of firms affect the rert
crop_img/micro_econ_note_101_crop_10.jpg	.Temptation to woperate ; firmr can to gether cooperate → form
crop_img/micro_econ_note_101_crop_11.jpg	a cortel, act like monopoly
crop_img/micro_econ_note_101_crop_12.jpg	corteb
crop_img/micro_econ_note_101_crop_13.jpg	a group of firmy colluding to limit output and Te
crop_img/micro_econ_note_101_crop_14.jpg	v
crop_img/micro_econ_note_101_crop_15.jpg	to beate econ pro fit
crop_img/micro_econ_note_101_crop_16.jpg	 tame theory : a set of toolt for studying &trategic behavior
crop_img/micro_econ_note_101_crop_17.jpg	) tame : have rules) strategios, pay offs, and out come
crop_img/micro_econ_note_101_crop_18.jpg	) the frisonorux Dilemma : d prisones committed a oime and are
crop_img/micro_econ_note_101_crop_19.jpg	put into d separate rooms for questioning
crop_img/micro_econ_note_101_crop_20.jpg	 Rules:
crop_img/micro_econ_note_101_crop_21.jpg	If both confers, each receivex 5-years rentence
crop_img/micro_econ_note_101_crop_22.jpg	If one confers and one doesn't, the conf ersed receives 1 -year
crop_img/micro_econ_note_101_crop_23.jpg	sentenc, and the other receives lo-ycar tentence
crop_img/micro_econ_note_101_crop_24.jpg	If both deny , each receives d-yeearr sentence
crop_img/micro_econ_note_102_crop_0.jpg	strategies: confe/ dery
crop_img/micro_econ_note_102_crop_1.jpg	. outcomer
crop_img/micro_econ_note_102_crop_2.jpg	. Both confus : 5-years each
crop_img/micro_econ_note_102_crop_3.jpg	deny : d-years
crop_img/micro_econ_note_102_crop_4.jpg	。
crop_img/micro_econ_note_102_crop_5.jpg	A anfuses，b denies : A→ lyear,b→lo years
crop_img/micro_econ_note_102_crop_6.jpg	A denies，B confervses : A→1oyears,B year
crop_img/micro_econ_note_102_crop_7.jpg	.lay off matrix: show the outeome for every po mible action done
crop_img/micro_econ_note_102_crop_8.jpg	by a player wat the action of the other
crop_img/micro_econ_note_102_crop_9.jpg	As strategy
crop_img/micro_econ_note_102_crop_10.jpg	C
crop_img/micro_econ_note_102_crop_11.jpg	D
crop_img/micro_econ_note_102_crop_12.jpg	C
crop_img/micro_econ_note_102_crop_13.jpg	A
crop_img/micro_econ_note_102_crop_14.jpg	A.
crop_img/micro_econ_note_102_crop_15.jpg	1o
crop_img/micro_econ_note_102_crop_16.jpg	5
crop_img/micro_econ_note_102_crop_17.jpg	B's strategy
crop_img/micro_econ_note_102_crop_18.jpg	B：
crop_img/micro_econ_note_102_crop_19.jpg	B: 1
crop_img/micro_econ_note_102_crop_20.jpg	6
crop_img/micro_econ_note_102_crop_21.jpg	A：1
crop_img/micro_econ_note_102_crop_22.jpg	A： 2
crop_img/micro_econ_note_102_crop_23.jpg	D
crop_img/micro_econ_note_102_crop_24.jpg	B：10
crop_img/micro_econ_note_102_crop_25.jpg	B ：2
crop_img/micro_econ_note_102_crop_26.jpg	 Nash equilibrium : each player takes the bert porsible action
crop_img/micro_econ_note_102_crop_27.jpg	given the actio of the other play er
crop_img/micro_econ_note_102_crop_28.jpg	) collusive agreement: agreement bet ween fiorms to form a cartel
crop_img/micro_econ_note_102_crop_29.jpg	) cheat: one Ta,↓ to ↓ ppofit of other seller and ↑profi't
crop_img/micro_econ_note_102_crop_30.jpg	of their own
crop_img/micro_econ_note_102_crop_31.jpg	Note: If game repeated, cooperative equi can ocour
crop_img/micro_econ_note_102_crop_32.jpg	) Mindsets:
crop_img/micro_econ_note_102_crop_33.jpg	①Tit-for-tat: cooperat if the other cooperated lst time
crop_img/showcase_website_prepare_105_crop_0.jpg	Roler & Contributionk
crop_img/showcase_website_prepare_105_crop_1.jpg	Duc Minho - Scrum Marter
crop_img/showcase_website_prepare_105_crop_2.jpg	. Divide Taskr t anign deadline
crop_img/showcase_website_prepare_105_crop_3.jpg	Imp lement data base model wsing
crop_img/showcase_website_prepare_105_crop_4.jpg	Implement resit parsword
crop_img/showcase_website_prepare_105_crop_5.jpg	Adjust ad min page
crop_img/showcase_website_prepare_105_crop_6.jpg	Helped making the show case Webrsite
crop_img/showcase_website_prepare_105_crop_7.jpg	John thai - Back-End
crop_img/showcase_website_prepare_105_crop_8.jpg	Implemntuer auttictiocing account agign 
crop_img/showcase_website_prepare_105_crop_9.jpg	login page) log out functionality)
crop_img/showcase_website_prepare_105_crop_10.jpg	Implement the puichase functonality
crop_img/showcase_website_prepare_105_crop_11.jpg	the onders page
crop_img/showcase_website_prepare_105_crop_12.jpg	Imple ment
crop_img/showcase_website_prepare_105_crop_13.jpg	Helped makiny the thowcase website
crop_img/showcase_website_prepare_105_crop_14.jpg	Sunny Lin - Front -End
crop_img/showcase_website_prepare_105_crop_15.jpg	operationy of
crop_img/showcase_website_prepare_105_crop_16.jpg	. Implement the base template
crop_img/showcase_website_prepare_105_crop_17.jpg	Implement the Cuating,Reading,pdating,Dleting(uD)
crop_img/showcase_website_prepare_105_crop_18.jpg	movie
crop_img/showcase_website_prepare_105_crop_19.jpg	review model
crop_img/showcase_website_prepare_105_crop_20.jpg	. Make the showcare video for the show case webnite
crop_img/showcase_website_prepare_105_crop_21.jpg	Ierac Kwook - Full-Stack
crop_img/showcase_website_prepare_105_crop_22.jpg	 Implement the cart app
crop_img/showcase_website_prepare_105_crop_23.jpg	Implement the cRun
crop_img/showcase_website_prepare_105_crop_24.jpg	of movie cart
crop_img/showcase_website_prepare_105_crop_25.jpg	Implment the on der and item model
crop_img/showcase_website_prepare_105_crop_26.jpg	Helped make the show case webnite
crop_img/showcase_website_prepare_106_crop_0.jpg	Thinh Ngayen - Full-stack
crop_img/showcase_website_prepare_106_crop_1.jpg	.Implement the movies app( lisoting mobies)enable user to dick and
crop_img/showcase_website_prepare_106_crop_2.jpg	see their data
crop_img/showcase_website_prepare_106_crop_3.jpg	Update
crop_img/showcase_website_prepare_106_crop_4.jpg	the mooie lis tiny page and indioi dual move pages
crop_img/showcase_website_prepare_106_crop_5.jpg	with data f rom database
crop_img/showcase_website_prepare_106_crop_6.jpg	Implement aa slarch funectionality
crop_img/showcase_website_prepare_106_crop_7.jpg	Helped make the show case website
crop_img/showcase_website_prepare_106_crop_8.jpg	Des oip tion :
crop_img/showcase_website_prepare_106_crop_9.jpg	How your tram follow sorum and the dexign decimion behind your
crop_img/showcase_website_prepare_106_crop_10.jpg	so lutions ( prinaipler ) pat tornx, etc.).Use diagram as toolr to
crop_img/showcase_website_prepare_106_crop_11.jpg	com municate your ration ale
crop_img/showcase_website_prepare_106_crop_12.jpg	• Discusion
crop_img/showcase_website_prepare_106_crop_13.jpg	. We disaus and finalite what our movie store thould look like
crop_img/showcase_website_prepare_106_crop_14.jpg	Lages
crop_img/showcase_website_prepare_106_crop_15.jpg	●
crop_img/showcase_website_prepare_106_crop_16.jpg	Models
crop_img/showcase_website_prepare_106_crop_17.jpg	Functionalities
crop_img/showcase_website_prepare_106_crop_18.jpg	etc.
crop_img/showcase_website_prepare_106_crop_19.jpg	●
crop_img/showcase_website_prepare_106_crop_20.jpg	. flan out macho stages of the projeet:
crop_img/showcase_website_prepare_106_crop_21.jpg	. Lut small tasks on serum board and arr ign deadlines every week
crop_img/showcase_website_prepare_106_crop_22.jpg	When we stnch at some point ,we say it out during meeting)
crop_img/showcase_website_prepare_106_crop_23.jpg	then toge thor we f ind a way to esolve it.Usually, the
crop_img/showcase_website_prepare_106_crop_24.jpg	ro lution comes f rom the teat book and You tube.
crop_img/software_description_214_crop_0.jpg	Usen storiers for a GrT Blog Web rite
crop_img/software_description_214_crop_1.jpg	①Aa uI want to  the info mation about the G Blg
crop_img/software_description_214_crop_2.jpg	b0 I can under stand the app 'k μurpoer
crop_img/software_description_214_crop_3.jpg	2
crop_img/software_description_214_crop_4.jpg	As a uren, I want to rugistan an account uxing my GT
crop_img/software_description_214_crop_5.jpg	use4name
crop_img/software_description_214_crop_6.jpg	3
crop_img/software_description_214_crop_7.jpg	Ak a uro ,I want to log in o that I can acces my account 's data
crop_img/software_description_214_crop_8.jpg	4
crop_img/software_description_214_crop_9.jpg	Ak a user I want to see the list of blog other students
crop_img/software_description_214_crop_10.jpg	made with cotegortton ywords ch aunel,nch"
crop_img/software_description_214_crop_11.jpg	4CULC”，…
crop_img/software_description_214_crop_12.jpg	5
crop_img/software_description_214_crop_13.jpg	An a ures ,I want to searich blogs bared on categoritation
crop_img/software_description_214_crop_14.jpg	key word, author name, blog title) date
crop_img/software_description_214_crop_15.jpg	An a uer, I want to teset my pas ward so that I cun regain
crop_img/software_description_214_crop_16.jpg	⑥
crop_img/software_description_214_crop_17.jpg	accear to my acount if I fongeti
crop_img/software_description_214_crop_18.jpg	Ar a usen,I want to nead what other comments on a blog
crop_img/software_description_214_crop_19.jpg	An a ser,I want to make comment on otherx blogs
crop_img/software_description_214_crop_20.jpg	8
crop_img/software_description_214_crop_21.jpg	9
crop_img/software_description_214_crop_22.jpg	A a uren,I want to make my blogk private  only myelt
crop_img/software_description_214_crop_23.jpg	can read them
crop_img/software_description_214_crop_24.jpg	 Ak a uk,I want to ingt images into my blg
crop_img/software_description_214_crop_25.jpg	11
crop_img/software_description_214_crop_26.jpg	As a uren, I want to change my poo file pictwre
crop_img/software_design_cheatsheet_219_crop_0.jpg	SOLID:
crop_img/software_design_cheatsheet_219_crop_1.jpg	Derign frineip: quideli for digning oftware baed on oo
crop_img/software_design_cheatsheet_219_crop_2.jpg	.Aimx: understandability, extendabi lity, maintainance
crop_img/software_design_cheatsheet_219_crop_3.jpg	.Avoidk: qigidity fhagilityimmobility and vikcority
crop_img/software_design_cheatsheet_219_crop_4.jpg	 Singl Rexpom bility (s): Each da only hars 1 job
crop_img/software_design_cheatsheet_219_crop_5.jpg	 open/dosed (o): open for extensaon,closed fon modification
crop_img/software_design_cheatsheet_219_crop_6.jpg	. Meaning We ean add new functionality without ltering old code
crop_img/software_design_cheatsheet_219_crop_7.jpg	 Likor Sub frin (2:objet of a upera can be uplaced by it
crop_img/software_design_cheatsheet_219_crop_8.jpg	subclares objects without damaging the progaam
crop_img/software_design_cheatsheet_219_crop_9.jpg	Interface Seg (I): Dornt fore the clients to dep on thingx they dontuse
crop_img/software_design_cheatsheet_219_crop_10.jpg	）
crop_img/software_design_cheatsheet_219_crop_11.jpg	 Pependency Inv (p): High-level dars doexn't depend on fow-bevel one
crop_img/software_design_cheatsheet_219_crop_12.jpg	GRASL : g phiciples
crop_img/software_design_cheatsheet_219_crop_13.jpg	fou on amigning rponbilitir to das and jetino
crop_img/software_design_cheatsheet_219_crop_14.jpg	 Creatoh (lattern): objet reated by the da that has the most info to ouate it
crop_img/software_design_cheatsheet_219_crop_15.jpg	.When? aggreg ation on containment  tracking  cloe uxe initialization
crop_img/software_design_cheatsheet_219_crop_16.jpg	80
crop_img/software_design_cheatsheet_219_crop_17.jpg	data
crop_img/software_design_cheatsheet_219_crop_18.jpg	Info Expert : arg fxp to the dar that has the eential info to ouate it
crop_img/software_design_cheatsheet_219_crop_19.jpg	.Note: conxider the type of surp and whot info are needed
crop_img/software_design_cheatsheet_219_crop_20.jpg	 Low Couplind
crop_img/software_design_cheatsheet_219_crop_21.jpg	: reduce dep bet wen clansur ar much ar pomible
crop_img/software_design_cheatsheet_219_crop_22.jpg	.How? ue intorfacex absthact lass, dep injection, compo > inheritance,
crop_img/software_design_cheatsheet_219_crop_23.jpg	behavion encap snlation, avoid bi dired relationship
crop_img/software_design_cheatsheet_220_crop_0.jpg	 High Co herion : Similar to S in SoLID
crop_img/software_design_cheatsheet_220_crop_1.jpg	,
crop_img/software_design_cheatsheet_220_crop_2.jpg	Controllier : Keep the UI re parate from the Model
crop_img/software_design_cheatsheet_220_crop_3.jpg	.How? when handling a sys eventag it to a non-UI cloly that
crop_img/software_design_cheatsheet_220_crop_4.jpg	hepre the whole xyr /a use care senario the xy& respond
crop_img/software_design_cheatsheet_220_crop_5.jpg	Iolymonphixm : Flexible and dy namic behavior in an application
crop_img/software_design_cheatsheet_220_crop_6.jpg	.Evrential for low coupling
crop_img/software_design_cheatsheet_220_crop_7.jpg	Iure Fabrication: atg resp to darser that dont gepre a concept
crop_img/software_design_cheatsheet_220_crop_8.jpg	When ? when we cannot find a xol within the pa blem domain
crop_img/software_design_cheatsheet_220_crop_9.jpg	middle party
crop_img/software_design_cheatsheet_220_crop_10.jpg	) Indirection : Intso an inter me diate clas or dbject to mediate between darrer
crop_img/software_design_cheatsheet_220_crop_11.jpg	.When 2 when coupling is high
crop_img/software_design_cheatsheet_220_crop_12.jpg	. Similor to "Don't talk to sthanger
crop_img/software_design_cheatsheet_220_crop_13.jpg	 frotected Variation: Photecting clementx from the change of otherk
crop_img/software_design_cheatsheet_220_crop_14.jpg	.How? one element's change doekn't make others change
crop_img/software_design_cheatsheet_220_crop_15.jpg	Refactoning:mallindtechniqutoeprga radabeundrstand
crop_img/software_design_cheatsheet_220_crop_16.jpg	maintain , improving design without changing functionality
crop_img/software_design_cheatsheet_220_crop_17.jpg	. Key feature : enlowre prog ram wonks at every detailed step
crop_img/software_design_cheatsheet_220_crop_18.jpg	why? Reg change, deign improvementprogrammerk toppiner
crop_img/software_design_cheatsheet_220_crop_19.jpg	Outcome : make prog more flexible
crop_img/software_design_cheatsheet_220_crop_20.jpg	Ex:renaming,collarpe hietrarchy,nolidcte/ decompose cond&
crop_img/software_design_cheatsheet_220_crop_21.jpg	(ex:mrge)
crop_img/software_design_cheatsheet_220_crop_22.jpg	(ex:. combine condk that → game gesult
crop_img/software_design_cheatsheet_220_crop_23.jpg	· faplace complex conds by method)
crop_img/software_design_cheatsheet_220_crop_24.jpg	extradt cluvs/ method
crop_img/software_design_cheatsheet_220_crop_25.jpg	(ex:replace code fgment by amthod)
crop_img/software_design_cheatsheet_220_crop_26.jpg	(et: a dars doing≥a work→ make a new clars
crop_img/software_design_cheatsheet_221_crop_0.jpg	.When?whn adinga new featur/review code/fixingbug
crop_img/software_design_cheatsheet_221_crop_1.jpg	.When not? broken code / close dead line / no need to
crop_img/software_design_cheatsheet_221_crop_2.jpg	code Smell: A sur face indi tion that uually crpd to a duper prob in &ys
crop_img/software_design_cheatsheet_221_crop_3.jpg	.Usually found when refactozing /examining code
crop_img/software_design_cheatsheet_221_crop_4.jpg	.How come? qus hed design/ techinical debt (lazy Ist→ mork work
crop_img/software_design_cheatsheet_221_crop_5.jpg	disreg ard
crop_img/software_design_cheatsheet_221_crop_6.jpg	later)
crop_img/software_design_cheatsheet_221_crop_7.jpg	Right way : use bost practicer + deve lop a design that can teale
crop_img/software_design_cheatsheet_221_crop_8.jpg	Fart way:
crop_img/software_design_cheatsheet_221_crop_9.jpg	"hacked tog etherdesign) farter
crop_img/software_design_cheatsheet_221_crop_10.jpg	identical
crop_img/software_design_cheatsheet_221_crop_11.jpg	(group of υo)
crop_img/software_design_cheatsheet_221_crop_12.jpg	Bloaterus: Aomething T so lorge and out of control
crop_img/software_design_cheatsheet_221_crop_13.jpg	(>10lines)
crop_img/software_design_cheatsheet_221_crop_14.jpg	.sign: contain long I duplicat ed code ilong darmethodj data clump;
crop_img/software_design_cheatsheet_221_crop_15.jpg	long para list
crop_img/software_design_cheatsheet_221_crop_16.jpg	. How come? devs
crop_img/software_design_cheatsheet_221_crop_17.jpg	may be tempted to put new feat wre into an
crop_img/software_design_cheatsheet_221_crop_18.jpg	existi ng clarr
crop_img/software_design_cheatsheet_221_crop_19.jpg	.talat ment: extract dlars/nb-class/method ;tay deleting a num
crop_img/software_design_cheatsheet_221_crop_20.jpg	to see if code still makes sense,extract daur ; baeakup algo)
crop_img/software_design_cheatsheet_221_crop_21.jpg	wse methodr ) paus the whole object as data (lre serve whole
crop_img/software_design_cheatsheet_221_crop_22.jpg	object)
crop_img/software_design_cheatsheet_221_crop_23.jpg	. o0 Abusorux: sol dolan't fully exploit oo derignx
crop_img/software_design_cheatsheet_221_crop_24.jpg	.Sign:complexsith sequn i;refured bequst
crop_img/software_design_cheatsheet_221_crop_25.jpg	subdars fef ured to woe all porent ' methodr)
crop_img/software_design_cheatsheet_221_crop_26.jpg	.why? For refuxed bequert, deuk ore tempted to ue inheritance
crop_img/software_design_cheatsheet_221_crop_27.jpg	toT rewsability
crop_img/software_design_cheatsheet_221_crop_28.jpg	.Theat ment : Exthact method) polymorp hism j push down method
crop_img/software_design_cheatsheet_221_crop_29.jpg	use inten face , eliminate in he hitance
crop_img/software_design_cheatsheet_222_crop_0.jpg	change Bueventrr:st that hinders changing /upgading
crop_img/software_design_cheatsheet_222_crop_1.jpg	(Shortgun surgery)
crop_img/software_design_cheatsheet_222_crop_2.jpg	.sign: make modifi regs makl &mall changer to many other j
crop_img/software_design_cheatsheet_222_crop_3.jpg	many changes made to only one cas(Divongent change)
crop_img/software_design_cheatsheet_222_crop_4.jpg	.Why?Foientage:oostcpy psto
crop_img/software_design_cheatsheet_222_crop_5.jpg	.Tuatment : Com bine to a single dars ; Extract dark/method
crop_img/software_design_cheatsheet_222_crop_6.jpg	Dispenku blek
crop_img/software_design_cheatsheet_222_crop_7.jpg	:unneces awry things
crop_img/software_design_cheatsheet_222_crop_8.jpg	• Sign: duplicat ed codes ; laty da j data daw
crop_img/software_design_cheatsheet_222_crop_9.jpg	.Why2For lazy dlar,a clalr may become very mall after reveral
crop_img/software_design_cheatsheet_222_crop_10.jpg	nefactoring,og it 's designed for fut wte dev that is never done
crop_img/software_design_cheatsheet_222_crop_11.jpg	. Tratment: Extract method ; Inlion clars ; Mo ve/Extnact method,
crop_img/software_design_cheatsheet_222_crop_12.jpg	encapsnlation
crop_img/software_design_cheatsheet_222_crop_13.jpg	Couplerr : closely connect ed routiner /moduler
crop_img/software_design_cheatsheet_222_crop_14.jpg	(Feature envy)
crop_img/software_design_cheatsheet_222_crop_15.jpg	.sign: a method kemk more interested in a dous than the one itls in)
crop_img/software_design_cheatsheet_222_crop_16.jpg	canrus know too much about each other; clau only do one action and
crop_img/software_design_cheatsheet_222_crop_17.jpg	1
crop_img/software_design_cheatsheet_222_crop_18.jpg	J
crop_img/software_design_cheatsheet_222_crop_19.jpg	delegate work to ther clarser
crop_img/software_design_cheatsheet_222_crop_20.jpg	middle
crop_img/software_design_cheatsheet_222_crop_21.jpg	Inapporiate intimacy
crop_img/software_design_cheatsheet_222_crop_22.jpg	man
crop_img/software_design_cheatsheet_222_crop_23.jpg	Why2. For middle man, moving to much from a dlas resulting in
crop_img/software_design_cheatsheet_222_crop_24.jpg	it can only de leg ate work
crop_img/software_design_cheatsheet_222_crop_25.jpg	.Teat ment :move method j move method/gieldchange "aociation
crop_img/software_design_cheatsheet_222_crop_26.jpg	to"onc=;inline clan
crop_img/software_design_cheatsheet_222_crop_27.jpg	Design batten. tyfical solutions to common probs in koftwae design
crop_img/software_design_cheatsheet_222_crop_28.jpg	(like a blue psint if algo is like a recipe)
crop_img/software_design_cheatsheet_223_crop_0.jpg	Cate gory of Lat
crop_img/software_design_cheatsheet_223_crop_1.jpg	-Geational fat:try to reate Muitable object→Tflexibility and ode reuse
crop_img/software_design_cheatsheet_223_crop_2.jpg	 Struct wral lat : exeplain how to avemble & carrer  lorger strnctwre
crop_img/software_design_cheatsheet_223_crop_3.jpg	Lstill flexible and
crop_img/software_design_cheatsheet_223_crop_4.jpg	efficient)
crop_img/software_design_cheatsheet_223_crop_5.jpg	Behavioral bat: algorithmk & asgn of resp of bect
crop_img/software_design_cheatsheet_223_crop_6.jpg	Sing leton lat: E Cra,ens we only one instan of a dors ever gels
crop_img/software_design_cheatsheet_223_crop_7.jpg	created and al one global way to acces it
crop_img/software_design_cheatsheet_223_crop_8.jpg	.Componentx: private constauctor public static method, private static inktane
crop_img/software_design_cheatsheet_223_crop_9.jpg	(to accers)
crop_img/software_design_cheatsheet_223_crop_10.jpg	(store one
crop_img/software_design_cheatsheet_223_crop_11.jpg	variable
crop_img/software_design_cheatsheet_223_crop_12.jpg	inktance
crop_img/software_design_cheatsheet_223_crop_13.jpg	only sate an instane
crop_img/software_design_cheatsheet_223_crop_14.jpg	if null
crop_img/software_design_cheatsheet_223_crop_15.jpg	Strategy Lat:  Beh define a fam of algo by putting them in sarate
crop_img/software_design_cheatsheet_223_crop_16.jpg	davs and making their objects inter changeabe
crop_img/software_design_cheatsheet_223_crop_17.jpg	. T maintain & grow
crop_img/software_design_cheatsheet_223_crop_18.jpg	(omponentx :A sthategy interface includer # con crete strategiox)
crop_img/software_design_cheatsheet_223_crop_19.jpg	to use
crop_img/software_design_cheatsheet_223_crop_20.jpg	Factory Method lat: E oaa, uing a factory method to ouate instancer of
crop_img/software_design_cheatsheet_223_crop_21.jpg	a dan instead of directly create them
crop_img/software_design_cheatsheet_223_crop_22.jpg	.Why? changing the type of object ured can be challenging.We can
crop_img/software_design_cheatsheet_223_crop_23.jpg	decouple instance seation wriny factory method
crop_img/software_design_cheatsheet_223_crop_24.jpg	.Components: Inter fau lroduct incuder # ondrete productsa creator
crop_img/software_design_cheatsheet_223_crop_25.jpg	class that in inherited by conorete reat otr clar orpd to each congrete
crop_img/software_design_cheatsheet_223_crop_26.jpg	productn
crop_img/software_design_cheatsheet_223_crop_27.jpg	Observe lat: E bch, define a subs viption mechanim to have multiple
crop_img/software_design_cheatsheet_223_crop_28.jpg	eventk issued by the “lublisher" and multiple "obslrver"notified
crop_img/software_design_cheatsheet_223_crop_29.jpg	.Why? Sometimer a change to y needed to be notified to all
crop_img/software_design_cheatsheet_223_crop_30.jpg	other wruus
crop_img/software_design_cheatsheet_224_crop_0.jpg	Component: pubblisher clarr that holds a list of sub orifou, and
crop_img/software_design_cheatsheet_224_crop_1.jpg	concrete sub criber dlasser (ionplaments the interface Subcriber)
crop_img/software_design_cheatsheet_224_crop_2.jpg	Componite lat: E stauct, all about guating true-lihe stoucturer of objects.
crop_img/software_design_cheatsheet_224_crop_3.jpg	Theat individucal objedtx aned comporitions uni formly
crop_img/software_design_cheatsheet_224_crop_4.jpg	lom po nent's : delegate
crop_img/software_design_cheatsheet_224_crop_5.jpg	T all wonk to leaf
crop_img/software_design_cheatsheet_224_crop_6.jpg	. Components: interface Compo nent,extended by
crop_img/software_design_cheatsheet_224_crop_7.jpg	V leaf: do all the work
crop_img/software_design_cheatsheet_224_crop_8.jpg	Visiton lat : E Beh, helpk add operationy to objectr without dltezing
crop_img/software_design_cheatsheet_224_crop_9.jpg	thorse object them se lver (use an exteral clarr for this)
crop_img/software_design_cheatsheet_224_crop_10.jpg	• Component: Inter face visiton,# son crete vixitor clarsex imple Visitor
crop_img/software_design_cheatsheet_224_crop_11.jpg	# Concrete element oupd to each viritosr dass impe interface Element
crop_img/software_design_cheatsheet_224_crop_12.jpg	Decorator fat: E strudt , helps add featurer or bchaviorr to objectx
crop_img/software_design_cheatsheet_224_crop_13.jpg	withont changing the object's original clas
crop_img/software_design_cheatsheet_224_crop_14.jpg	• Componentx : a Notifier da
crop_img/software_design_cheatsheet_224_crop_15.jpg	Base lecorator (where we will add feat wres)
crop_img/software_design_cheatsheet_224_crop_16.jpg	Conoete Notifiovs in herited from Bosse Pe corator
crop_img/software_design_cheatsheet_224_crop_17.jpg	Whyixavod aExionignOped
crop_img/software_design_cheatsheet_224_crop_18.jpg	lnin
crop_img/software_design_cheatsheet_224_crop_19.jpg	'
crop_img/software_design_cheatsheet_224_crop_20.jpg	Client
crop_img/software_design_cheatsheet_224_crop_21.jpg	einterface
crop_img/software_design_cheatsheet_224_crop_22.jpg	DataSource
crop_img/software_design_cheatsheet_224_crop_23.jpg	+writeData(data)
crop_img/software_design_cheatsheet_224_crop_24.jpg	+readData0
crop_img/software_design_cheatsheet_224_crop_25.jpg	4
crop_img/software_design_cheatsheet_224_crop_26.jpg	FileDataSource
crop_img/software_design_cheatsheet_224_crop_27.jpg	DataSourceDecorator
crop_img/software_design_cheatsheet_224_crop_28.jpg	-filename
crop_img/software_design_cheatsheet_224_crop_29.jpg	-wrappee: DataSource
crop_img/software_design_cheatsheet_224_crop_30.jpg	+FileDataSource(filename)
crop_img/software_design_cheatsheet_224_crop_31.jpg	+DataSourceDecorator(s:DataSource）
crop_img/software_design_cheatsheet_224_crop_32.jpg	+writeData(data)
crop_img/software_design_cheatsheet_224_crop_33.jpg	+writeData(data)
crop_img/software_design_cheatsheet_224_crop_34.jpg	readData0
crop_img/software_design_cheatsheet_224_crop_35.jpg	+readData(
crop_img/software_design_cheatsheet_224_crop_36.jpg	4
crop_img/software_design_cheatsheet_224_crop_37.jpg	Encryption
crop_img/software_design_cheatsheet_224_crop_38.jpg	Compression
crop_img/software_design_cheatsheet_224_crop_39.jpg	Decorator
crop_img/software_design_cheatsheet_224_crop_40.jpg	Decorator
crop_img/software_design_cheatsheet_224_crop_41.jpg	.
crop_img/software_design_cheatsheet_224_crop_42.jpg	writeData(data)
crop_img/software_design_cheatsheet_224_crop_43.jpg	+writeData(data）
crop_img/software_design_cheatsheet_224_crop_44.jpg	+readData0
crop_img/software_design_cheatsheet_224_crop_45.jpg	+readData0
crop_img/software_design_cheatsheet_225_crop_0.jpg	Soft ware Anre ment & Terting :
crop_img/software_design_cheatsheet_225_crop_1.jpg	) Dynamic Vuri fication: tert sys until it fail (executing code in a
crop_img/software_design_cheatsheet_225_crop_2.jpg	tuntim env), inchude vorious levels
crop_img/software_design_cheatsheet_225_crop_3.jpg	static verification : examining code wl out executing it. Uke thol to
crop_img/software_design_cheatsheet_225_crop_4.jpg	analyte code,Can be performed very early on. Doen't fag runtime env
crop_img/software_design_cheatsheet_225_crop_5.jpg	on compiled code
crop_img/software_design_cheatsheet_225_crop_6.jpg	)Inxpedtion/heview/walk though:
crop_img/software_design_cheatsheet_225_crop_7.jpg	Human activity) group -bared + manual
crop_img/software_design_cheatsheet_225_crop_8.jpg	Inspection: for mal checkhirt + moderaton
crop_img/software_design_cheatsheet_225_crop_9.jpg	Review : lers for mal + pers
crop_img/software_design_cheatsheet_225_crop_10.jpg	Walk through:
crop_img/software_design_cheatsheet_225_crop_11.jpg	informal + autho
crop_img/software_design_cheatsheet_225_crop_12.jpg	 Fotmal verification : Math -ex haustive can be time -consuming + expeniv
crop_img/software_design_cheatsheet_225_crop_13.jpg	ousideonga
crop_img/software_design_cheatsheet_225_crop_14.jpg	ovdsideonga
crop_img/software_design_cheatsheet_225_crop_15.jpg	within orga
crop_img/software_design_cheatsheet_225_crop_16.jpg	mithin onga
crop_img/software_design_cheatsheet_225_crop_17.jpg	) Testing stages:
crop_img/software_design_cheatsheet_225_crop_18.jpg	Dev Test  α Tert β Tert  lroduct Release
crop_img/software_design_cheatsheet_225_crop_19.jpg	(open box)
crop_img/software_design_cheatsheet_225_crop_20.jpg	(black bore)
crop_img/software_design_cheatsheet_225_crop_21.jpg	) Terting tech nique
crop_img/software_design_cheatsheet_225_crop_22.jpg	o faque bor Tert
crop_img/software_design_cheatsheet_225_crop_23.jpg	Cear Box Test
crop_img/software_design_cheatsheet_225_crop_24.jpg	) Test Driven Development ( Too): Tert written before code ) and ~ dl
crop_img/software_design_cheatsheet_225_crop_25.jpg	phoduction code have tut unit
crop_img/software_design_cheatsheet_225_crop_26.jpg	. huler: ma ke it fail
crop_img/software_design_cheatsheet_225_crop_27.jpg	make it work (ar xinply ar po mible)
crop_img/software_design_cheatsheet_225_crop_28.jpg	make it better (re facton)
crop_img/software_design_cheatsheet_225_crop_29.jpg	 Run Turt → New aeq → Wtrite new tert → Run Tert
crop_img/software_design_cheatsheet_225_crop_30.jpg	) Tert Cycb:
crop_img/software_design_cheatsheet_225_crop_31.jpg	wgite new
crop_img/software_design_cheatsheet_225_crop_32.jpg	refactor t qun tert 
crop_img/software_design_cheatsheet_225_crop_33.jpg	wde
crop_img/software_design_cheatsheet_225_crop_34.jpg	AT dev disciplines
crop_img/software_design_cheatsheet_225_crop_35.jpg	a pnovide inoument al sfecgication
crop_img/software_design_cheatsheet_225_crop_36.jpg	) Why Too?
crop_img/software_design_cheatsheet_225_crop_37.jpg	④个 con fidence while changing
crop_img/software_design_cheatsheet_225_crop_38.jpg	Avoid regrewin
crop_img/software_design_cheatsheet_225_crop_39.jpg	3
crop_img/software_design_cheatsheet_225_crop_40.jpg	e2ok
crop_img/software_design_principles_cheatsheet_172_crop_0.jpg	SOLID:
crop_img/software_design_principles_cheatsheet_172_crop_1.jpg	Derign lririp: quideli for digning oftwoe based on oo
crop_img/software_design_principles_cheatsheet_172_crop_2.jpg	.Aimn: understand ability, extendabi lity, maintainance
crop_img/software_design_principles_cheatsheet_172_crop_3.jpg	.Avoidk: qigidity fhagility immobility and vikcority
crop_img/software_design_principles_cheatsheet_172_crop_4.jpg	 Singl Repon bi lity (s): Each dam only has 1 job
crop_img/software_design_principles_cheatsheet_172_crop_5.jpg	 open/dosed(o): open for extensaon,closed fon modification
crop_img/software_design_principles_cheatsheet_172_crop_6.jpg	.Meaning we can add new functionality without atering old code
crop_img/software_design_principles_cheatsheet_172_crop_7.jpg	Likov Sb frin (2:objec of a uperdo can b uplacd by it
crop_img/software_design_principles_cheatsheet_172_crop_8.jpg	subclaes objects without damaging the progaam
crop_img/software_design_principles_cheatsheet_172_crop_9.jpg	Intorface Seg (I): Don't fore the dients to dep on thingx they dontuse
crop_img/software_design_principles_cheatsheet_172_crop_10.jpg	,
crop_img/software_design_principles_cheatsheet_172_crop_11.jpg	 Pependency Inv (o); High-level dors doean't depend on low-bevel one
crop_img/software_design_principles_cheatsheet_172_crop_12.jpg	GRASP : g phiciples
crop_img/software_design_principles_cheatsheet_172_crop_13.jpg	focur on amigig reponbi litir to lass and e in o
crop_img/software_design_principles_cheatsheet_172_crop_14.jpg	Creator (lattorn): objet mated by the da that has the most info to vate it
crop_img/software_design_principles_cheatsheet_172_crop_15.jpg	.When? agg reg ation on containment  tracking  cloe uxe initialization
crop_img/software_design_principles_cheatsheet_172_crop_16.jpg	80
crop_img/software_design_principles_cheatsheet_172_crop_17.jpg	data
crop_img/software_design_principles_cheatsheet_172_crop_18.jpg	Ingo Expert: arg qep to the dar that has the erential info to ouate it
crop_img/software_design_principles_cheatsheet_172_crop_19.jpg	. Note: conxider the type of rerp and what info are needed
crop_img/software_design_principles_cheatsheet_172_crop_20.jpg	 Low Couplind
crop_img/software_design_principles_cheatsheet_172_crop_21.jpg	: reduce dep bet ween clanses ar much ar pomible
crop_img/software_design_principles_cheatsheet_172_crop_22.jpg	.How? use intorfacex absthact lassuk, dep injection, compo  inheritance,
crop_img/software_design_principles_cheatsheet_172_crop_23.jpg	behavior encap nlation avoid bi dired relationship
crop_img/software_design_principles_cheatsheet_173_crop_0.jpg	 High Co herion : Similar to S in SoLID
crop_img/software_design_principles_cheatsheet_173_crop_1.jpg	,
crop_img/software_design_principles_cheatsheet_173_crop_2.jpg	Controller : Keep the vI re parate from the Model
crop_img/software_design_principles_cheatsheet_173_crop_3.jpg	.How? When handling a sys eventag it to a non-UI covs that
crop_img/software_design_principles_cheatsheet_173_crop_4.jpg	hepre the whole xyr /a use care senorio the xy& respond
crop_img/software_design_principles_cheatsheet_173_crop_5.jpg	Iolymonphism : Flexible and dy namic behavior in an application
crop_img/software_design_principles_cheatsheet_173_crop_6.jpg	.Evential fon low coupling
crop_img/software_design_principles_cheatsheet_173_crop_7.jpg	Iure Fabrication: atg resp to clarser that don't pepre a concept
crop_img/software_design_principles_cheatsheet_173_crop_8.jpg	.When? when we cannot find a sol within the psoblem domain
crop_img/software_design_principles_cheatsheet_173_crop_9.jpg	middfe party
crop_img/software_design_principles_cheatsheet_173_crop_10.jpg	) Indirection : Intsno an inter me diate clar or dbject to mediate between daroer
crop_img/software_design_principles_cheatsheet_173_crop_11.jpg	.When? when coupling is high
crop_img/software_design_principles_cheatsheet_173_crop_12.jpg	.Similor to "Don't talk to sthanger
crop_img/software_design_principles_cheatsheet_173_crop_13.jpg	 frotected Variation: Photecting clementx from the change of otherk
crop_img/software_design_principles_cheatsheet_173_crop_14.jpg	.How? one element's change doekn't make others change
crop_img/software_design_principles_cheatsheet_173_crop_15.jpg	Refactoning:mallinde techniqurto keepprgamradableunderstand,
crop_img/software_design_principles_cheatsheet_173_crop_16.jpg	maintain, improving dekign without changing functionality
crop_img/software_design_principles_cheatsheet_173_crop_17.jpg	. Key feature : enowre prog sam works at every detailed step
crop_img/software_design_principles_cheatsheet_173_crop_18.jpg	why? Reg change, design improve mentxprogrammrk oppiner
crop_img/software_design_principles_cheatsheet_173_crop_19.jpg	outcome : make prog more flexible
crop_img/software_design_principles_cheatsheet_173_crop_20.jpg	Ex:renaming,collarpe ierarchy,nolidcte/ decompose cond&
crop_img/software_design_principles_cheatsheet_173_crop_21.jpg	(ex:merge)
crop_img/software_design_principles_cheatsheet_173_crop_22.jpg	(ex:, combine condk that → grame geenlt
crop_img/software_design_principles_cheatsheet_173_crop_23.jpg	· taplace complex conds by method)
crop_img/software_design_principles_cheatsheet_173_crop_24.jpg	extract cluvs/ method
crop_img/software_design_principles_cheatsheet_173_crop_25.jpg	(ex:replace code fgmnt y mehod)
crop_img/software_design_principles_cheatsheet_173_crop_26.jpg	(ex:a clars doing≥a work→ make a new clars
crop_img/software_design_principles_cheatsheet_174_crop_0.jpg	When? Whn adinga nw featur/reviewcode/fixingg
crop_img/software_design_principles_cheatsheet_174_crop_1.jpg	.When not? broken code / close dead line / no need to
crop_img/software_design_principles_cheatsheet_174_crop_2.jpg	code Smell: A sur face indi tion that uually crpd to a duper prob in &ys
crop_img/software_design_principles_cheatsheet_174_crop_3.jpg	.Usually found when refactozing /examiing code
crop_img/software_design_principles_cheatsheet_174_crop_4.jpg	How come? rushed derign/ techinical debt (lazy Ist→ mork work
crop_img/software_design_principles_cheatsheet_174_crop_5.jpg	disreg ard
crop_img/software_design_principles_cheatsheet_174_crop_6.jpg	later)
crop_img/software_design_principles_cheatsheet_174_crop_7.jpg	Right way : ure best practicer + deve lop a design that can tcale
crop_img/software_design_principles_cheatsheet_174_crop_8.jpg	“hacked togatherdesign) fartor
crop_img/software_design_principles_cheatsheet_174_crop_9.jpg	Fart way:
crop_img/software_design_principles_cheatsheet_174_crop_10.jpg	Iidentical
crop_img/software_design_principles_cheatsheet_174_crop_11.jpg	groupi of va
crop_img/software_design_principles_cheatsheet_174_crop_12.jpg	Bloaters: Aomething T so lorge and out of contaol
crop_img/software_design_principles_cheatsheet_174_crop_13.jpg	(>10lines)
crop_img/software_design_principles_cheatsheet_174_crop_14.jpg	sign: contain long  duplicated code ilong damethoddata cump;
crop_img/software_design_principles_cheatsheet_174_crop_15.jpg	long para list
crop_img/software_design_principles_cheatsheet_174_crop_16.jpg	. How come?. devs
crop_img/software_design_principles_cheatsheet_174_crop_17.jpg	may be tempted to put new feat wre into an
crop_img/software_design_principles_cheatsheet_174_crop_18.jpg	existi ng clar
crop_img/software_design_principles_cheatsheet_174_crop_19.jpg	thlat nent:
crop_img/software_design_principles_cheatsheet_174_crop_20.jpg	extract dar/Mnb-cdlass/method j +ry deleting a num
crop_img/software_design_principles_cheatsheet_174_crop_21.jpg	to see ig code still makes snseextra dar  bakup algo)
crop_img/software_design_principles_cheatsheet_174_crop_22.jpg	wsh methodr) paus the whode object ar data (fre serve whole
crop_img/software_design_principles_cheatsheet_174_crop_23.jpg	object)
crop_img/software_design_principles_cheatsheet_174_crop_24.jpg	. o0 Aburerx: sol dolan't fully exploit oo derigs
crop_img/software_design_principles_cheatsheet_174_crop_25.jpg	.Sign:complexswitch sequena of if; refured bequest
crop_img/software_design_principles_cheatsheet_174_crop_26.jpg	subdars fef used to wse ull parent ' methods)
crop_img/software_design_principles_cheatsheet_174_crop_27.jpg	.Why? For refuxed bequert, deuk are tempted to ue inheritance
crop_img/software_design_principles_cheatsheet_174_crop_28.jpg	toT rewsability
crop_img/software_design_principles_cheatsheet_174_crop_29.jpg	.Treat ment: Exthact method) polymorphism i push down method
crop_img/software_design_principles_cheatsheet_174_crop_30.jpg	use inten face , eliminate in he hitance
crop_img/software_design_principles_cheatsheet_175_crop_0.jpg	change Bre ventrr:st that hinderr changing/upgrading
crop_img/software_design_principles_cheatsheet_175_crop_1.jpg	(Shortgun surgery)
crop_img/software_design_principles_cheatsheet_175_crop_2.jpg	.sign: make modifi regs makl &mall changer to many sther j
crop_img/software_design_principles_cheatsheet_175_crop_3.jpg	many changes made to only one cla(ivngent change)
crop_img/software_design_principles_cheatsheet_175_crop_4.jpg	. Why? Fon divengent change:poo stocture /copy paste too much
crop_img/software_design_principles_cheatsheet_175_crop_5.jpg	.Thuatment : Combine to a single dars ; Extract cla/method
crop_img/software_design_principles_cheatsheet_175_crop_6.jpg	Dispenkublek
crop_img/software_design_principles_cheatsheet_175_crop_7.jpg	:unneces awry things
crop_img/software_design_principles_cheatsheet_175_crop_8.jpg	• Sign: duplicat ed code ; lazy darr j data claw
crop_img/software_design_principles_cheatsheet_175_crop_9.jpg	. WhyFor lazy clar,a clals my become very &mall after veveral
crop_img/software_design_principles_cheatsheet_175_crop_10.jpg	gefactoring,og it's designed for fut wte dev that is nover done
crop_img/software_design_principles_cheatsheet_175_crop_11.jpg	. Truatment: Extract method; Inlin dlar ; Mo ve/Extract method,
crop_img/software_design_principles_cheatsheet_175_crop_12.jpg	encapsnlation
crop_img/software_design_principles_cheatsheet_175_crop_13.jpg	Couplers : closely connect ed routiner/ moduler
crop_img/software_design_principles_cheatsheet_175_crop_14.jpg	(Feature envy)
crop_img/software_design_principles_cheatsheet_175_crop_15.jpg	.sign: a method kumk more interested in a clas than the one itls in
crop_img/software_design_principles_cheatsheet_175_crop_16.jpg	caurus know too much about each other ; claus only do one action and
crop_img/software_design_principles_cheatsheet_175_crop_17.jpg	1
crop_img/software_design_principles_cheatsheet_175_crop_18.jpg	)
crop_img/software_design_principles_cheatsheet_175_crop_19.jpg	delegate work to ther classer
crop_img/software_design_principles_cheatsheet_175_crop_20.jpg	Inapponiate intimacy
crop_img/software_design_principles_cheatsheet_175_crop_21.jpg	midd le
crop_img/software_design_principles_cheatsheet_175_crop_22.jpg	man
crop_img/software_design_principles_cheatsheet_175_crop_23.jpg	Why2. For middle man, moving to much from a dlols resulting in
crop_img/software_design_principles_cheatsheet_175_crop_24.jpg	it can onhy de leg ate work
crop_img/software_design_principles_cheatsheet_175_crop_25.jpg	.Teat ment :move method j move method/gieldchange"aociation
crop_img/software_design_principles_cheatsheet_175_crop_26.jpg	to"onc=； inline cdan
crop_img/software_design_principles_cheatsheet_175_crop_27.jpg	Dexign battern . tyfical solutions to common pobs in software design
crop_img/software_design_principles_cheatsheet_175_crop_28.jpg	(like a blue print if dlgo is like a recipe)
crop_img/software_design_principles_cheatsheet_176_crop_0.jpg	Cate gory of Lat
crop_img/software_design_principles_cheatsheet_176_crop_1.jpg	Guational lat:try to reate Muitable objects flexibility and de reuse
crop_img/software_design_principles_cheatsheet_176_crop_2.jpg	) Structwral fat : exeplain how to avremble & darrer  lorger strndt wre
crop_img/software_design_principles_cheatsheet_176_crop_3.jpg	Lstill flexible and
crop_img/software_design_principles_cheatsheet_176_crop_4.jpg	efficient)
crop_img/software_design_principles_cheatsheet_176_crop_5.jpg	Behavioral Lat: algorithmk & asgn of resy of objecds
crop_img/software_design_principles_cheatsheet_176_crop_6.jpg	)
crop_img/software_design_principles_cheatsheet_176_crop_7.jpg	Sing leton lat: E Coua,ens wre only one instan of a do evergeis
crop_img/software_design_principles_cheatsheet_176_crop_8.jpg	crlated and a! one global way to acces it
crop_img/software_design_principles_cheatsheet_176_crop_9.jpg	.Componentx : private constauctor, public static method private static inktance
crop_img/software_design_principles_cheatsheet_176_crop_10.jpg	(to accers)
crop_img/software_design_principles_cheatsheet_176_crop_11.jpg	(store one
crop_img/software_design_principles_cheatsheet_176_crop_12.jpg	variable
crop_img/software_design_principles_cheatsheet_176_crop_13.jpg	instance
crop_img/software_design_principles_cheatsheet_176_crop_14.jpg	only suate an instane
crop_img/software_design_principles_cheatsheet_176_crop_15.jpg	is null
crop_img/software_design_principles_cheatsheet_176_crop_16.jpg	Strategy Lat:  Beh define a fam of algo by putting them in sanate
crop_img/software_design_principles_cheatsheet_176_crop_17.jpg	davs and making their objects inter changeable
crop_img/software_design_principles_cheatsheet_176_crop_18.jpg	. T maintain & grow
crop_img/software_design_principles_cheatsheet_176_crop_19.jpg	Componentx: A thategy interface includer # con crete strategiex
crop_img/software_design_principles_cheatsheet_176_crop_20.jpg	to use
crop_img/software_design_principles_cheatsheet_176_crop_21.jpg	Factory Method lat: E oea, uhing a factory method to oeate instancek of
crop_img/software_design_principles_cheatsheet_176_crop_22.jpg	a car instead of directly reate them
crop_img/software_design_principles_cheatsheet_176_crop_23.jpg	.Why? changing the type of object ued can te challenging.We can
crop_img/software_design_principles_cheatsheet_176_crop_24.jpg	decouple instance sreation wriny factory method
crop_img/software_design_principles_cheatsheet_176_crop_25.jpg	.Components: Intor fac Prrodyct induder # concrete products) a creator
crop_img/software_design_principles_cheatsheet_176_crop_26.jpg	clars that in inherited by conorete reat or clar rpd to each concrete
crop_img/software_design_principles_cheatsheet_176_crop_27.jpg	productn
crop_img/software_design_principles_cheatsheet_176_crop_28.jpg	Observe lat: E bch, define a ubs miption mechanim to have multiple
crop_img/software_design_principles_cheatsheet_176_crop_29.jpg	eventk issued by the “lublisher" and multiple "obslrver notified
crop_img/software_design_principles_cheatsheet_176_crop_30.jpg	.Why? Sometime a change to y needed to be notified to all
crop_img/software_design_principles_cheatsheet_176_crop_31.jpg	other wruuy
crop_img/software_design_principles_cheatsheet_177_crop_0.jpg	Component: pubblis her clars that holds a list of sub oribous) and
crop_img/software_design_principles_cheatsheet_177_crop_1.jpg	Concrete sub riber dlarser (ionplaments the interface Subriber)
crop_img/software_design_principles_cheatsheet_177_crop_2.jpg	Componite lat: E struct all about guating tr-lihe structurer of beect.
crop_img/software_design_principles_cheatsheet_177_crop_3.jpg	Theat indivi ducal objedtx aned comporitions uni formly
crop_img/software_design_principles_cheatsheet_177_crop_4.jpg	lomponent's: delegate
crop_img/software_design_principles_cheatsheet_177_crop_5.jpg	Vleaf: do all the work
crop_img/software_design_principles_cheatsheet_177_crop_6.jpg	Visiton lat :E Beh, helpk add operationy to objectr withont altering
crop_img/software_design_principles_cheatsheet_177_crop_7.jpg	thorse object them se lver (use an exteral clary for this)
crop_img/software_design_principles_cheatsheet_177_crop_8.jpg	• Component: Inter face visitor,# son crete vixitor clarsex imple isitor
crop_img/software_design_principles_cheatsheet_177_crop_9.jpg	# Concrete dlement oupd to each viritosr dass impe interface Elment
crop_img/software_design_principles_cheatsheet_177_crop_10.jpg	Decorator lat: E strudt, helps add featurer or bchaviorr to objectx
crop_img/software_design_principles_cheatsheet_177_crop_11.jpg	withont changing the object's original clars
crop_img/software_design_principles_cheatsheet_177_crop_12.jpg	• Componentx : a Notifier dars
crop_img/software_design_principles_cheatsheet_177_crop_13.jpg	base Decorator (whrere we will add feat wres)
crop_img/software_design_principles_cheatsheet_177_crop_14.jpg	Conorete Notifiovs in herited from Basse Pe corator
crop_img/software_design_principles_cheatsheet_177_crop_15.jpg	Wyoxg
crop_img/software_design_principles_cheatsheet_177_crop_16.jpg	lnin
crop_img/software_design_principles_cheatsheet_177_crop_17.jpg	Client
crop_img/software_design_principles_cheatsheet_177_crop_18.jpg	winterface
crop_img/software_design_principles_cheatsheet_177_crop_19.jpg	DataSource
crop_img/software_design_principles_cheatsheet_177_crop_20.jpg	+writeData(data)
crop_img/software_design_principles_cheatsheet_177_crop_21.jpg	+readData0
crop_img/software_design_principles_cheatsheet_177_crop_22.jpg	4
crop_img/software_design_principles_cheatsheet_177_crop_23.jpg	FileDataSource
crop_img/software_design_principles_cheatsheet_177_crop_24.jpg	DataSourceDecorator
crop_img/software_design_principles_cheatsheet_177_crop_25.jpg	-filename
crop_img/software_design_principles_cheatsheet_177_crop_26.jpg	-wrappee: DataSource
crop_img/software_design_principles_cheatsheet_177_crop_27.jpg	+FileDataSource(filename）
crop_img/software_design_principles_cheatsheet_177_crop_28.jpg	DataSourceDecorator(s:DataSource)
crop_img/software_design_principles_cheatsheet_177_crop_29.jpg	+writeData(data)
crop_img/software_design_principles_cheatsheet_177_crop_30.jpg	+writeData(data)
crop_img/software_design_principles_cheatsheet_177_crop_31.jpg	+readData0
crop_img/software_design_principles_cheatsheet_177_crop_32.jpg	+readData(
crop_img/software_design_principles_cheatsheet_177_crop_33.jpg	4
crop_img/software_design_principles_cheatsheet_177_crop_34.jpg	Encryption
crop_img/software_design_principles_cheatsheet_177_crop_35.jpg	Compression
crop_img/software_design_principles_cheatsheet_177_crop_36.jpg	Decorator
crop_img/software_design_principles_cheatsheet_177_crop_37.jpg	Decorator
crop_img/software_design_principles_cheatsheet_177_crop_38.jpg	+writeData(data)）
crop_img/software_design_principles_cheatsheet_177_crop_39.jpg	+writeData(data）
crop_img/software_design_principles_cheatsheet_177_crop_40.jpg	+readData0
crop_img/software_design_principles_cheatsheet_177_crop_41.jpg	+readData0
crop_img/software_design_principles_cheatsheet_178_crop_0.jpg	Soft ware ANrement & Terting:
crop_img/software_design_principles_cheatsheet_178_crop_1.jpg	) Dynamic Vori ficaltion: tert sys until it failk (executing code in a
crop_img/software_design_principles_cheatsheet_178_crop_2.jpg	tuntim env) , inchude vorious levels
crop_img/software_design_principles_cheatsheet_178_crop_3.jpg	static verification : examining code wl out executing it. Uke thol to
crop_img/software_design_principles_cheatsheet_178_crop_4.jpg	analyte code,Can be performed very early on. Don't ag runtime n
crop_img/software_design_principles_cheatsheet_178_crop_5.jpg	on compiled code
crop_img/software_design_principles_cheatsheet_178_crop_6.jpg	)Inopection/heview/Walk thhough: Human activity)group-bared + manual
crop_img/software_design_principles_cheatsheet_178_crop_7.jpg	Inspection: for mal checklist + moderaton
crop_img/software_design_principles_cheatsheet_178_crop_8.jpg	.Review : lers formal + pers
crop_img/software_design_principles_cheatsheet_178_crop_9.jpg	Walk through:
crop_img/software_design_principles_cheatsheet_178_crop_10.jpg	in formal + authon
crop_img/software_design_principles_cheatsheet_178_crop_11.jpg	A
crop_img/software_design_principles_cheatsheet_178_crop_12.jpg	) Fotmal verification : Math -ec haustive can be time-consuming + expen iv
crop_img/software_design_principles_cheatsheet_178_crop_13.jpg	oudsideonga
crop_img/software_design_principles_cheatsheet_178_crop_14.jpg	oudside onga
crop_img/software_design_principles_cheatsheet_178_crop_15.jpg	within orga
crop_img/software_design_principles_cheatsheet_178_crop_16.jpg	mthin onga
crop_img/software_design_principles_cheatsheet_178_crop_17.jpg	) Testing stager:
crop_img/software_design_principles_cheatsheet_178_crop_18.jpg	Dav Test S α Test ≤β Test ≤ lroduct Release
crop_img/software_design_principles_cheatsheet_178_crop_19.jpg	(open box)
crop_img/software_design_principles_cheatsheet_178_crop_20.jpg	(black bore)
crop_img/software_design_principles_cheatsheet_178_crop_21.jpg	 Tarting technique : ogaque bor Tert
crop_img/software_design_principles_cheatsheet_178_crop_22.jpg	Clear Box Test
crop_img/software_design_principles_cheatsheet_178_crop_23.jpg	) Tust Driven Development ( Too): Tart written before code )and ~ all
crop_img/software_design_principles_cheatsheet_178_crop_24.jpg	phoduction code have test unit
crop_img/software_design_principles_cheatsheet_178_crop_25.jpg	. Rwler:
crop_img/software_design_principles_cheatsheet_178_crop_26.jpg	make it fail
crop_img/software_design_principles_cheatsheet_178_crop_27.jpg	make it work (ar ximply ar o mible)
crop_img/software_design_principles_cheatsheet_178_crop_28.jpg	make it better (re facton)
crop_img/software_design_principles_cheatsheet_178_crop_29.jpg	 Run Turt → New sey → Whrite new tert → kun tert
crop_img/software_design_principles_cheatsheet_178_crop_30.jpg	 Tert Cy cb:
crop_img/software_design_principles_cheatsheet_178_crop_31.jpg	wrrite new
crop_img/software_design_principles_cheatsheet_178_crop_32.jpg	refactor tgun tert E
crop_img/software_design_principles_cheatsheet_178_crop_33.jpg	wde
crop_img/software_design_principles_cheatsheet_178_crop_34.jpg	T dev discip lines
crop_img/software_design_principles_cheatsheet_178_crop_35.jpg	a enovide inoement al ipecigication
crop_img/software_design_principles_cheatsheet_178_crop_36.jpg	) Why Too?
crop_img/software_design_principles_cheatsheet_178_crop_37.jpg	④个 con fidence while changing
crop_img/software_design_principles_cheatsheet_178_crop_38.jpg	3
crop_img/software_design_principles_cheatsheet_178_crop_39.jpg	Avoid regrevin
crop_img/software_design_principles_cheatsheet_178_crop_40.jpg	erLon
crop_img/to_do_note_2_crop_0.jpg	A bo ut Loge
crop_img/to_do_note_2_crop_1.jpg	1
crop_img/to_do_note_2_crop_2.jpg	Contact lage
crop_img/to_do_note_2_crop_3.jpg	2
crop_img/to_do_note_2_crop_4.jpg	3
crop_img/to_do_note_2_crop_5.jpg	Cancel logout Rediredt
crop_img/to_do_note_2_crop_6.jpg	By Sunday 20104
crop_img/user_stories_user_cases_26_crop_0.jpg	USER STORIES & USER CASES
crop_img/user_stories_user_cases_26_crop_1.jpg	) Use caser. How sys will interact with end -usor) used to doc funtional regs
crop_img/user_stories_user_cases_26_crop_2.jpg	. 3 levelx: brief ，casul, fully-dovsed
crop_img/user_stories_user_cases_26_crop_3.jpg	. struture : Ator/user )SuD) Goal, Pre onditions, main succeus scenario)
crop_img/user_stories_user_cases_26_crop_4.jpg	al tornate scenoio post condi tion(fully-d red induder all)
crop_img/user_stories_user_cases_26_crop_5.jpg	) Uxer rtories : simple in formal way to deroribe user needs
crop_img/user_stories_user_cases_26_crop_6.jpg	.Strnctwre : A1 a [role,I want [featwe] , so that [benefit]
crop_img/user_stories_user_cases_26_crop_7.jpg	. Accpt Ouiteria : der oribe in tial state j what happen in the sys when user
crop_img/user_stories_user_cases_26_crop_8.jpg	intoract j re rult
crop_img/user_stories_user_cases_26_crop_9.jpg	(Given...→ And….→when.….→ then.…→And.)
crop_img/user_stories_user_cases_26_crop_10.jpg	SOFTWARE ARCHITECTVRE
crop_img/user_stories_user_cases_26_crop_11.jpg	pf：Fundamental orga of a syx the componentr their ebtionship,en,
crop_img/user_stories_user_cases_26_crop_12.jpg	principles gove aning its derign)
crop_img/user_stories_user_cases_26_crop_13.jpg	. Decided by early and hard-to-change decisiong
crop_img/user_stories_user_cases_26_crop_14.jpg	 pesign : onga of modulex, easy-to-change
crop_img/user_stories_user_cases_26_crop_15.jpg	communi cate with all
crop_img/user_stories_user_cases_26_crop_16.jpg	cen
crop_img/user_stories_user_cases_26_crop_17.jpg	个
crop_img/user_stories_user_cases_26_crop_18.jpg	skate holders
crop_img/user_stories_user_cases_26_crop_19.jpg	) Soft ware Architect: great comm shils, use effective mechanisms to repre softwor
crop_img/user_stories_user_cases_26_crop_20.jpg	logical
crop_img/user_stories_user_cases_26_crop_21.jpg	dev
crop_img/user_stories_user_cases_26_crop_22.jpg	Sunarios
crop_img/user_stories_user_cases_26_crop_23.jpg	4t1 view model : desribing the arch of asys wing procrs
crop_img/user_stories_user_cases_26_crop_24.jpg	physical
crop_img/user_stories_user_cases_26_crop_25.jpg	views
crop_img/user_stories_user_cases_26_crop_26.jpg	) client-Sorver : servias crpd to sorvers,dientx accers servics via a net work
crop_img/user_stories_user_cases_26_crop_27.jpg	2-tier arch style (dient & server on a diff hord ware)
crop_img/user_stories_user_cases_26_crop_28.jpg	 N-tier :>α-t0
crop_img/user_stories_user_cases_26_crop_29.jpg	 Peer-to-Leer: Na distincion betwn client& aervrr,computationx
crop_img/user_stories_user_cases_26_crop_30.jpg	can be cartied by any node in the net work
crop_img/user_stories_user_cases_26_crop_31.jpg	.fo : f ault +disconn etion  node tobrance
crop_img/user_stories_user_cases_26_crop_32.jpg	.lony · maliiows node (not fe)
crop_img/user_stories_user_cases_26_crop_33.jpg	Blackboard : each ecialist knowledge rouce contribute a ptial soluion
crop_img/user_stories_user_cases_26_crop_34.jpg	.Components:black board, know ledge sowcr control compo nent
crop_img/user_stories_user_cases_26_crop_35.jpg	contain solution bjects
crop_img/user_stories_user_cases_26_crop_36.jpg	seledt & execule knowudge sorie
crop_img/user_stories_user_cases_26_crop_37.jpg	) Layered:
crop_img/user_stories_user_cases_26_crop_38.jpg	layers w/related funes, nhure ca layer depends on one beneath it
crop_img/user_stories_user_cases_26_crop_39.jpg	and is inde wl on top of it
crop_img/user_stories_user_cases_26_crop_40.jpg	.faoN ; io lation Rewsability, separation of con cernn
crop_img/user_stories_user_cases_26_crop_41.jpg	. Conx : redund ant )igid, complx
crop_img/user_stories_user_cases_27_crop_0.jpg	Lige
crop_img/user_stories_user_cases_27_crop_1.jpg	Filter →.Pata Sink
crop_img/user_stories_user_cases_27_crop_2.jpg	) Lipe and Filtor : Pat a Sowru
crop_img/user_stories_user_cases_27_crop_3.jpg	→
crop_img/user_stories_user_cases_27_crop_4.jpg	Liping: give the output of one command a input to subsequent command
crop_img/user_stories_user_cases_27_crop_5.jpg	) Event Driven : a comonent can announe events,othurr lirten and do work
crop_img/user_stories_user_cases_27_crop_6.jpg	) Model-view-Controller: arch pattern fohow layered appo ard
crop_img/user_stories_user_cases_27_crop_7.jpg	Controller: moded update based on usor actions
crop_img/user_stories_user_cases_27_crop_8.jpg	. oicw : render model, send uver event   contholler
crop_img/user_stories_user_cases_27_crop_9.jpg	Model : coptwre model updates, notifier changer→view
crop_img/user_stories_user_cases_27_crop_10.jpg	 Model-view- View Model: .model and view not (o nnected
crop_img/user_stories_user_cases_27_crop_11.jpg	send req west
crop_img/user_stories_user_cases_27_crop_12.jpg	VI Adion
crop_img/user_stories_user_cases_27_crop_13.jpg	View
crop_img/user_stories_user_cases_27_crop_14.jpg	Model  Pata sovce
crop_img/user_stories_user_cases_27_crop_15.jpg	→
crop_img/user_stories_user_cases_27_crop_16.jpg	View Model
crop_img/user_stories_user_cases_27_crop_17.jpg	Obseed
crop_img/user_stories_user_cases_27_crop_18.jpg	data change
crop_img/user_stories_user_cases_27_crop_19.jpg	qesponse
crop_img/user_stories_user_cases_27_crop_20.jpg	 ob ject Oriented Analy sis : E RE phase
crop_img/user_stories_user_cases_27_crop_21.jpg	not software objects
crop_img/user_stories_user_cases_27_crop_22.jpg	Gather reg: Domain Model (ishliation of real-ituation object)
crop_img/user_stories_user_cases_27_crop_23.jpg	 Domain Model in a UML
crop_img/user_stories_user_cases_27_crop_24.jpg	obtained from RE analy sis
crop_img/user_stories_user_cases_27_crop_25.jpg	. Relationship :Ex:x
crop_img/user_stories_user_cases_27_crop_26.jpg	store
crop_img/user_stories_user_cases_27_crop_27.jpg	Y
crop_img/user_stories_user_cases_27_crop_28.jpg	) System Sequena Diag ram : show how adors and system ulab ,capture
crop_img/user_stories_user_cases_27_crop_29.jpg	only one ue case.Intrationx go from top to down o time in cases
crop_img/user_stories_user_cases_27_crop_30.jpg	.Glo nary : give more details aout new teams in sso
crop_img/user_stories_user_cases_27_crop_31.jpg	.Follow DRy agile principle . Fray ment : Loop) Alt,Opt, Ref
crop_img/user_stories_user_cases_27_crop_32.jpg	) Sequence Diagram: modes a aingle scenaro,no longer a black box
crop_img/user_stories_user_cases_27_crop_33.jpg	.Object lige line : u--"
crop_img/user_stories_user_cases_27_crop_34.jpg	Activation bur:a rectange bore repractive
crop_img/user_stories_user_cases_27_crop_35.jpg	• mers age→ : wouit for receiver
crop_img/user_stories_user_cases_27_crop_36.jpg	muragg→: don't wait for rceiver
crop_img/user_stories_user_cases_27_crop_37.jpg	) Derign Clar Diagram : models soft ware clorres and object + relationships
crop_img/user_stories_user_cases_27_crop_38.jpg	vinibility: public (+))protected(#),pivat (),dived)
crop_img/user_stories_user_cases_27_crop_39.jpg	methods : vis + name (para): ret wan-type
crop_img/user_stories_user_cases_27_crop_40.jpg	.D inheritance
crop_img/user_stories_user_cases_27_crop_41.jpg	------:intorface img ment ation
crop_img/user_stories_user_cases_27_crop_42.jpg	on>:× related toy | ----→:×usex Y as para
crop_img/user_stories_user_cases_27_crop_43.jpg	—: whole & part sparabb
crop_img/user_stories_user_cases_27_crop_44.jpg	: whole & port in seporable
crop_img/user_stories_user_cases_27_crop_45.jpg	0
crop_img/user_stories_user_cases_27_crop_46.jpg	Attribute Text vrs AMso ciation Line
